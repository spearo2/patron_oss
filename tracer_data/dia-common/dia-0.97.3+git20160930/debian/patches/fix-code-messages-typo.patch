Index: dia-0.97.3+git20160930/ChangeLog.pre-git
===================================================================
--- dia-0.97.3+git20160930.orig/ChangeLog.pre-git
+++ dia-0.97.3+git20160930/ChangeLog.pre-git
@@ -182,7 +182,7 @@
 	* plug-ins/python/Makefile.am : added to EXTRA_DIST
 	* plug-ins/python/pydia-render.c : if the PyDia renderer does not
 	implement an optional method just fall back to the base classes
-	render implmentation. Also (try to) warn about missing, not optional
+	render implementation. Also (try to) warn about missing, not optional
 	methods with PyErr_Warn(), but can't find these messages yet.
 
 	* plug-ins/python/diasvg.py : self.line_width was not initialized
@@ -727,7 +727,7 @@
 	* plug-ins/drs/dia-render-script-import.c : unfinished (some helpers
 	to parse back .drs, but far away from real import)
 	* plug-ins/drs/dia-render-script-object.c : mostly empty (should later
-	include the implmentation of a DiaObject capable to render .drs
+	include the implementation of a DiaObject capable to render .drs
 	* plug-ins/makefile.msc : build it
 	* configure.in plug-ins/Makefile.am plug-ins/drs/Makefile.am : build
 	drs on *NIX, too. But do not install it.
@@ -2457,7 +2457,7 @@
 	* plug-ins/cairo/diacairo.c : gtk-print implementation for paginated 
 	output of PDF (bug #513226) and register for printing, also ... 
 	  plug-ins/cairo/diacairo-renderer.c : ... split off the renderer
-	implmentation in it's own file. Some tweaking for use in the
+	implementation in it's own file. Some tweaking for use in the
 	print context.
 	* plug-ins/cairo/diacairo.h : calback function to be registered
 	in the menu (later to replace native printing?)
Index: dia-0.97.3+git20160930/bindings/dia-properties.cpp
===================================================================
--- dia-0.97.3+git20160930.orig/bindings/dia-properties.cpp
+++ dia-0.97.3+git20160930/bindings/dia-properties.cpp
@@ -160,7 +160,7 @@ dia::Property< ::Property* >::~Property
 
 /*!
  * If there is still a property conversion missing it needs to be added
- * in four places. In the implmentation dia-properties.cpp, in the 
+ * in four places. In the implementation dia-properties.cpp, in the 
  * interface of this class and IProperty: dia-properties.h and finally 
  * in the .swig file.
  */
Index: dia-0.97.3+git20160930/lib/diavar.h
===================================================================
--- dia-0.97.3+git20160930.orig/lib/diavar.h
+++ dia-0.97.3+git20160930/lib/diavar.h
@@ -13,8 +13,8 @@
 #  /* DONT: define DIAVAR extern */
 #  define DIAVAR /* empty */
 #  /* extern and __declspec() are orthogonal - otherwise there wont be a difference between
-#   * the header declared variable and the one defined in the implmentation. At least clang-cl
-#   * code generation would create mutliple definitions, which later prohibit linking.
+#   * the header declared variable and the one defined in the implementation. At least clang-cl
+#   * code generation would create multiple definitions, which later prohibit linking.
 #   */
 #endif
 
Index: dia-0.97.3+git20160930/objects/custom_lines/custom_linetypes.c
===================================================================
--- dia-0.97.3+git20160930.orig/objects/custom_lines/custom_linetypes.c
+++ dia-0.97.3+git20160930/objects/custom_lines/custom_linetypes.c
@@ -230,7 +230,7 @@ customline_create(Point *startpoint,
   LineInfo* line_info = (LineInfo*)user_data;
 
   if (!ensure_standard_types()) {
-    g_warning ("Can't create standar types.");
+    g_warning ("Can't create standard types.");
     return NULL;
   }
 
Index: dia-0.97.3+git20160930/plug-ins/cairo/diacairo.c
===================================================================
--- dia-0.97.3+git20160930.orig/plug-ins/cairo/diacairo.c
+++ dia-0.97.3+git20160930/plug-ins/cairo/diacairo.c
@@ -328,7 +328,7 @@ export_data(DiagramData *data, DiaContex
   return TRUE;
 }
 
-G_GNUC_UNUSED /* keep implmentation for reference, see bug 599401 */
+G_GNUC_UNUSED /* keep implementation for reference, see bug 599401 */
 static gboolean
 export_print_data (DiagramData *data, DiaContext *ctx,
 		   const gchar *filename_utf8, const gchar *diafilename,
Index: dia-0.97.3+git20160930/plug-ins/python/pydia-export.c
===================================================================
--- dia-0.97.3+git20160930.orig/plug-ins/python/pydia-export.c
+++ dia-0.97.3+git20160930/plug-ins/python/pydia-export.c
@@ -75,7 +75,7 @@ static PyMemberDef PyDiaExportFilter_Mem
     { "name", T_INVALID, 0, RESTRICTED|READONLY,
       "The description for the filter." },
     { "unique_name", T_INVALID, 0, RESTRICTED|READONLY,
-      "A uniqe name within filters to allow disambiguation.", },
+      "A unique name within filters to allow disambiguation.", },
     { NULL }
 };
 
Index: dia-0.97.3+git20160930/plug-ins/python/pydia-render.c
===================================================================
--- dia-0.97.3+git20160930.orig/plug-ins/python/pydia-render.c
+++ dia-0.97.3+git20160930/plug-ins/python/pydia-render.c
@@ -564,7 +564,7 @@ draw_line(DiaRenderer *renderer,
     Py_DECREF(self);
   }
   else { /* member not optional */
-    gchar *msg = g_strdup_printf ("%s.draw_line() implmentation missing.",
+    gchar *msg = g_strdup_printf ("%s.draw_line() implementation missing.",
 				  G_OBJECT_CLASS_NAME (G_OBJECT_GET_CLASS (renderer)));
     PyErr_Clear();
     PyErr_Warn (PyExc_RuntimeWarning, msg);
@@ -772,7 +772,7 @@ draw_arc(DiaRenderer *renderer,
     Py_DECREF(self);
   }
   else { /* member not optional */
-    gchar *msg = g_strdup_printf ("%s.draw_arc() implmentation missing.",
+    gchar *msg = g_strdup_printf ("%s.draw_arc() implementation missing.",
 				  G_OBJECT_CLASS_NAME (G_OBJECT_GET_CLASS (renderer)));
     PyErr_Clear();
     PyErr_Warn (PyExc_RuntimeWarning, msg);
@@ -818,7 +818,7 @@ fill_arc(DiaRenderer *renderer,
     Py_DECREF(self);
   }
   else { /* member not optional */
-    gchar *msg = g_strdup_printf ("%s.fill_arc() implmentation missing.",
+    gchar *msg = g_strdup_printf ("%s.fill_arc() implementation missing.",
 				  G_OBJECT_CLASS_NAME (G_OBJECT_GET_CLASS (renderer)));
     PyErr_Clear();
     PyErr_Warn (PyExc_RuntimeWarning, msg);
@@ -1038,7 +1038,7 @@ draw_string(DiaRenderer *renderer,
     Py_DECREF(func);
     Py_DECREF(self);
   } else { /* member not optional */
-    gchar *msg = g_strdup_printf ("%s.draw_string() implmentation missing.",
+    gchar *msg = g_strdup_printf ("%s.draw_string() implementation missing.",
 				  G_OBJECT_CLASS_NAME (G_OBJECT_GET_CLASS (renderer)));
     PyErr_Clear();
     PyErr_Warn (PyExc_RuntimeWarning, msg);
@@ -1080,7 +1080,7 @@ draw_image(DiaRenderer *renderer,
     Py_DECREF(func);
     Py_DECREF(self);
   } else { /* member not optional */
-    gchar *msg = g_strdup_printf ("%s.draw_image() implmentation missing.",
+    gchar *msg = g_strdup_printf ("%s.draw_image() implementation missing.",
 				  G_OBJECT_CLASS_NAME (G_OBJECT_GET_CLASS (renderer)));
     PyErr_Clear();
     PyErr_Warn (PyExc_RuntimeWarning, msg);
Index: dia-0.97.3+git20160930/samples/Self/PyDiaObjects.dia
===================================================================
--- dia-0.97.3+git20160930.orig/samples/Self/PyDiaObjects.dia
+++ dia-0.97.3+git20160930/samples/Self/PyDiaObjects.dia
@@ -2780,7 +2780,7 @@
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#A uniqe name within filters to allow disambiguation.#</dia:string>
+            <dia:string>#A unique name within filters to allow disambiguation.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
