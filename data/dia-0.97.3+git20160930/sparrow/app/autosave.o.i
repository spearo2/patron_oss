# 0 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c"
# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c"
# 30 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c"
# 1 "../config.h" 1
# 31 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c" 2


# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.h" 1
# 22 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.h"
# 1 "/usr/include/glib-2.0/glib.h" 1
# 30 "/usr/include/glib-2.0/glib.h"
# 1 "/usr/include/glib-2.0/glib/galloca.h" 1
# 32 "/usr/include/glib-2.0/glib/galloca.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 32 "/usr/include/glib-2.0/glib/gtypes.h"
# 1 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 1
# 9 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 38 "/usr/include/glib-2.0/glib/gmacros.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
} max_align_t;
# 39 "/usr/include/glib-2.0/glib/gmacros.h" 2
# 10 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 1 3 4
# 203 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 195 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 81 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 2 3 4
# 82 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 196 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4
# 204 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/11/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 2 3 4
# 12 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/float.h" 1 3 4
# 13 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 2
# 26 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"

# 42 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"

# 42 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed char gint8;
typedef unsigned char guint8;

typedef signed short gint16;
typedef unsigned short guint16;






typedef signed int gint32;
typedef unsigned int guint32;
# 63 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed long gint64;
typedef unsigned long guint64;
# 79 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed long gssize;
typedef unsigned long gsize;
# 90 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef gint64 goffset;
# 106 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed long gintptr;
typedef unsigned long guintptr;
# 199 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef int GPid;
# 215 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"

# 33 "/usr/include/glib-2.0/glib/gtypes.h" 2

# 1 "/usr/include/glib-2.0/glib/gversionmacros.h" 1
# 35 "/usr/include/glib-2.0/glib/gtypes.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4



# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 39 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 2 3 4




struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 43 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;




typedef __pid_t pid_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 61 "/usr/include/time.h" 2 3 4











extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 36 "/usr/include/glib-2.0/glib/gtypes.h" 2


# 46 "/usr/include/glib-2.0/glib/gtypes.h"

# 46 "/usr/include/glib-2.0/glib/gtypes.h"
typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;

typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;

typedef float gfloat;
typedef double gdouble;
# 103 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void* gpointer;
typedef const void *gconstpointer;

typedef gint (*GCompareFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gint (*GCompareDataFunc) (gconstpointer a,
                                                 gconstpointer b,
       gpointer user_data);
typedef gboolean (*GEqualFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef void (*GDestroyNotify) (gpointer data);
typedef void (*GFunc) (gpointer data,
                                                 gpointer user_data);
typedef guint (*GHashFunc) (gconstpointer key);
typedef void (*GHFunc) (gpointer key,
                                                 gpointer value,
                                                 gpointer user_data);
# 133 "/usr/include/glib-2.0/glib/gtypes.h"
typedef gpointer (*GCopyFunc) (gconstpointer src,
                                                 gpointer data);
# 143 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void (*GFreeFunc) (gpointer data);
# 157 "/usr/include/glib-2.0/glib/gtypes.h"
typedef const gchar * (*GTranslateFunc) (const gchar *str,
       gpointer data);
# 501 "/usr/include/glib-2.0/glib/gtypes.h"
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;





union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
# 551 "/usr/include/glib-2.0/glib/gtypes.h"
typedef struct _GTimeVal GTimeVal __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));

struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
} __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));

typedef gint grefcount;
typedef gint gatomicrefcount;


# 33 "/usr/include/glib-2.0/glib/galloca.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4

# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));








# 1 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len,
     __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 535 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk (__dest, __src, __len,
     __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}
# 56 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
  return __builtin___memset_chk (__dest, __ch, __len,
     __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) explicit_bzero (void *__dest, size_t __len)
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  return __builtin___stpncpy_chk (__dest, __src, __n,
      __builtin_object_size (__dest, 2 > 1));
}
# 127 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 2 > 1));
}
# 536 "/usr/include/string.h" 2 3 4




# 34 "/usr/include/glib-2.0/glib/galloca.h" 2
# 31 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/garray.h" 1
# 34 "/usr/include/glib-2.0/glib/garray.h"



# 36 "/usr/include/glib-2.0/glib/garray.h"
typedef struct _GBytes GBytes;
typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;

struct _GArray
{
  gchar *data;
  guint len;
};

struct _GByteArray
{
  guint8 *data;
  guint len;
};

struct _GPtrArray
{
  gpointer *pdata;
  guint len;
};
# 69 "/usr/include/glib-2.0/glib/garray.h"
extern
GArray* g_array_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size);
extern
gpointer g_array_steal (GArray *array,
                                   gsize *len);
extern
GArray* g_array_sized_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size,
       guint reserved_size);
extern
GArray* g_array_copy (GArray *array);
extern
gchar* g_array_free (GArray *array,
       gboolean free_segment);
extern
GArray *g_array_ref (GArray *array);
extern
void g_array_unref (GArray *array);
extern
guint g_array_get_element_size (GArray *array);
extern
GArray* g_array_append_vals (GArray *array,
       gconstpointer data,
       guint len);
extern
GArray* g_array_prepend_vals (GArray *array,
       gconstpointer data,
       guint len);
extern
GArray* g_array_insert_vals (GArray *array,
       guint index_,
       gconstpointer data,
       guint len);
extern
GArray* g_array_set_size (GArray *array,
       guint length);
extern
GArray* g_array_remove_index (GArray *array,
       guint index_);
extern
GArray* g_array_remove_index_fast (GArray *array,
       guint index_);
extern
GArray* g_array_remove_range (GArray *array,
       guint index_,
       guint length);
extern
void g_array_sort (GArray *array,
       GCompareFunc compare_func);
extern
void g_array_sort_with_data (GArray *array,
       GCompareDataFunc compare_func,
       gpointer user_data);
extern
gboolean g_array_binary_search (GArray *array,
                                   gconstpointer target,
                                   GCompareFunc compare_func,
                                   guint *out_match_index);
extern
void g_array_set_clear_func (GArray *array,
                                   GDestroyNotify clear_func);






extern
GPtrArray* g_ptr_array_new (void);
extern
GPtrArray* g_ptr_array_new_with_free_func (GDestroyNotify element_free_func);
extern
gpointer* g_ptr_array_steal (GPtrArray *array,
                                            gsize *len);
extern
GPtrArray *g_ptr_array_copy (GPtrArray *array,
                                           GCopyFunc func,
                                           gpointer user_data);
extern
GPtrArray* g_ptr_array_sized_new (guint reserved_size);
extern
GPtrArray* g_ptr_array_new_full (guint reserved_size,
        GDestroyNotify element_free_func);
extern
gpointer* g_ptr_array_free (GPtrArray *array,
        gboolean free_seg);
extern
GPtrArray* g_ptr_array_ref (GPtrArray *array);
extern
void g_ptr_array_unref (GPtrArray *array);
extern
void g_ptr_array_set_free_func (GPtrArray *array,
                                           GDestroyNotify element_free_func);
extern
void g_ptr_array_set_size (GPtrArray *array,
        gint length);
extern
gpointer g_ptr_array_remove_index (GPtrArray *array,
        guint index_);
extern
gpointer g_ptr_array_remove_index_fast (GPtrArray *array,
        guint index_);
extern
gpointer g_ptr_array_steal_index (GPtrArray *array,
                                           guint index_);
extern
gpointer g_ptr_array_steal_index_fast (GPtrArray *array,
                                           guint index_);
extern
gboolean g_ptr_array_remove (GPtrArray *array,
        gpointer data);
extern
gboolean g_ptr_array_remove_fast (GPtrArray *array,
        gpointer data);
extern
GPtrArray *g_ptr_array_remove_range (GPtrArray *array,
        guint index_,
        guint length);
extern
void g_ptr_array_add (GPtrArray *array,
        gpointer data);
extern
void g_ptr_array_extend (GPtrArray *array_to_extend,
                                           GPtrArray *array,
                                           GCopyFunc func,
                                           gpointer user_data);
extern
void g_ptr_array_extend_and_steal (GPtrArray *array_to_extend,
                                           GPtrArray *array);
extern
void g_ptr_array_insert (GPtrArray *array,
                                           gint index_,
                                           gpointer data);
extern
void g_ptr_array_sort (GPtrArray *array,
        GCompareFunc compare_func);
extern
void g_ptr_array_sort_with_data (GPtrArray *array,
        GCompareDataFunc compare_func,
        gpointer user_data);
extern
void g_ptr_array_foreach (GPtrArray *array,
        GFunc func,
        gpointer user_data);
extern
gboolean g_ptr_array_find (GPtrArray *haystack,
                                           gconstpointer needle,
                                           guint *index_);
extern
gboolean g_ptr_array_find_with_equal_func (GPtrArray *haystack,
                                             gconstpointer needle,
                                             GEqualFunc equal_func,
                                             guint *index_);






extern
GByteArray* g_byte_array_new (void);
extern
GByteArray* g_byte_array_new_take (guint8 *data,
                                            gsize len);
extern
guint8* g_byte_array_steal (GByteArray *array,
                                            gsize *len);
extern
GByteArray* g_byte_array_sized_new (guint reserved_size);
extern
guint8* g_byte_array_free (GByteArray *array,
         gboolean free_segment);
extern
GBytes* g_byte_array_free_to_bytes (GByteArray *array);
extern
GByteArray *g_byte_array_ref (GByteArray *array);
extern
void g_byte_array_unref (GByteArray *array);
extern
GByteArray* g_byte_array_append (GByteArray *array,
         const guint8 *data,
         guint len);
extern
GByteArray* g_byte_array_prepend (GByteArray *array,
         const guint8 *data,
         guint len);
extern
GByteArray* g_byte_array_set_size (GByteArray *array,
         guint length);
extern
GByteArray* g_byte_array_remove_index (GByteArray *array,
         guint index_);
extern
GByteArray* g_byte_array_remove_index_fast (GByteArray *array,
         guint index_);
extern
GByteArray* g_byte_array_remove_range (GByteArray *array,
         guint index_,
         guint length);
extern
void g_byte_array_sort (GByteArray *array,
         GCompareFunc compare_func);
extern
void g_byte_array_sort_with_data (GByteArray *array,
         GCompareDataFunc compare_func,
         gpointer user_data);


# 32 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gasyncqueue.h" 1
# 32 "/usr/include/glib-2.0/glib/gasyncqueue.h"
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 32 "/usr/include/glib-2.0/glib/gthread.h"
# 1 "/usr/include/glib-2.0/glib/gatomic.h" 1
# 28 "/usr/include/glib-2.0/glib/gatomic.h"
# 1 "/usr/include/glib-2.0/glib/glib-typeof.h" 1
# 29 "/usr/include/glib-2.0/glib/gatomic.h" 2



extern
gint g_atomic_int_get (const volatile gint *atomic);
extern
void g_atomic_int_set (volatile gint *atomic,
                                                               gint newval);
extern
void g_atomic_int_inc (volatile gint *atomic);
extern
gboolean g_atomic_int_dec_and_test (volatile gint *atomic);
extern
gboolean g_atomic_int_compare_and_exchange (volatile gint *atomic,
                                                               gint oldval,
                                                               gint newval);
extern
gint g_atomic_int_add (volatile gint *atomic,
                                                               gint val);
extern
guint g_atomic_int_and (volatile guint *atomic,
                                                               guint val);
extern
guint g_atomic_int_or (volatile guint *atomic,
                                                               guint val);
extern
guint g_atomic_int_xor (volatile guint *atomic,
                                                               guint val);

extern
gpointer g_atomic_pointer_get (const volatile void *atomic);
extern
void g_atomic_pointer_set (volatile void *atomic,
                                                               gpointer newval);
extern
gboolean g_atomic_pointer_compare_and_exchange (volatile void *atomic,
                                                               gpointer oldval,
                                                               gpointer newval);
extern
gssize g_atomic_pointer_add (volatile void *atomic,
                                                               gssize val);
extern
gsize g_atomic_pointer_and (volatile void *atomic,
                                                               gsize val);
extern
gsize g_atomic_pointer_or (volatile void *atomic,
                                                               gsize val);
extern
gsize g_atomic_pointer_xor (volatile void *atomic,
                                                               gsize val);

__attribute__((__deprecated__("Use '" "g_atomic_int_add" "' instead"))) extern
gint g_atomic_int_exchange_and_add (volatile gint *atomic,
                                                               gint val);


# 33 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 26 "/usr/include/glib-2.0/glib/gerror.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 27 "/usr/include/glib-2.0/glib/gerror.h" 2

# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 34 "/usr/include/glib-2.0/glib/gquark.h"



# 36 "/usr/include/glib-2.0/glib/gquark.h"
typedef guint32 GQuark;



extern
GQuark g_quark_try_string (const gchar *string);
extern
GQuark g_quark_from_static_string (const gchar *string);
extern
GQuark g_quark_from_string (const gchar *string);
extern
const gchar * g_quark_to_string (GQuark quark) __attribute__ ((__const__));
# 61 "/usr/include/glib-2.0/glib/gquark.h"
extern
const gchar * g_intern_string (const gchar *string);
extern
const gchar * g_intern_static_string (const gchar *string);


# 29 "/usr/include/glib-2.0/glib/gerror.h" 2


# 41 "/usr/include/glib-2.0/glib/gerror.h"
typedef struct _GError GError;

struct _GError
{
  GQuark domain;
  gint code;
  gchar *message;
};
# 140 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorInitFunc) (GError *error);
# 158 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorCopyFunc) (const GError *src_error, GError *dest_error);
# 173 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorClearFunc) (GError *error);

extern
GQuark g_error_domain_register_static (const char *error_type_name,
                                         gsize error_type_private_size,
                                         GErrorInitFunc error_type_init,
                                         GErrorCopyFunc error_type_copy,
                                         GErrorClearFunc error_type_clear);

extern
GQuark g_error_domain_register (const char *error_type_name,
                                  gsize error_type_private_size,
                                  GErrorInitFunc error_type_init,
                                  GErrorCopyFunc error_type_copy,
                                  GErrorClearFunc error_type_clear);

extern
GError* g_error_new (GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (gnu_printf, 3, 4)));

extern
GError* g_error_new_literal (GQuark domain,
                                gint code,
                                const gchar *message);
extern
GError* g_error_new_valist (GQuark domain,
                                gint code,
                                const gchar *format,
                                va_list args) __attribute__((__format__ (gnu_printf, 3, 0)));

extern
void g_error_free (GError *error);
extern
GError* g_error_copy (const GError *error);

extern
gboolean g_error_matches (const GError *error,
                                GQuark domain,
                                gint code);




extern
void g_set_error (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (gnu_printf, 4, 5)));

extern
void g_set_error_literal (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *message);



extern
void g_propagate_error (GError **dest,
    GError *src);


extern
void g_clear_error (GError **err);


extern
void g_prefix_error (GError **err,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (gnu_printf, 2, 3)));


extern
void g_prefix_error_literal (GError **err,
                                       const gchar *prefix);


extern
void g_propagate_prefixed_error (GError **dest,
                                       GError *src,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (gnu_printf, 3, 4)));


# 34 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 35 "/usr/include/glib-2.0/glib/gutils.h"

# 50 "/usr/include/glib-2.0/glib/gutils.h"
extern
const gchar * g_get_user_name (void);
extern
const gchar * g_get_real_name (void);
extern
const gchar * g_get_home_dir (void);
extern
const gchar * g_get_tmp_dir (void);
extern
const gchar * g_get_host_name (void);
extern
const gchar * g_get_prgname (void);
extern
void g_set_prgname (const gchar *prgname);
extern
const gchar * g_get_application_name (void);
extern
void g_set_application_name (const gchar *application_name);
extern
gchar * g_get_os_info (const gchar *key_name);
# 192 "/usr/include/glib-2.0/glib/gutils.h"
extern
void g_reload_user_special_dirs_cache (void);
extern
const gchar * g_get_user_data_dir (void);
extern
const gchar * g_get_user_config_dir (void);
extern
const gchar * g_get_user_cache_dir (void);
extern
const gchar * g_get_user_state_dir (void);
extern
const gchar * const * g_get_system_data_dirs (void);
# 224 "/usr/include/glib-2.0/glib/gutils.h"
extern
const gchar * const * g_get_system_config_dirs (void);

extern
const gchar * g_get_user_runtime_dir (void);
# 252 "/usr/include/glib-2.0/glib/gutils.h"
typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,

  G_USER_N_DIRECTORIES
} GUserDirectory;

extern
const gchar * g_get_user_special_dir (GUserDirectory directory);
# 276 "/usr/include/glib-2.0/glib/gutils.h"
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  const gchar *key;
  guint value;
};



extern
guint g_parse_debug_string (const gchar *string,
         const GDebugKey *keys,
         guint nkeys);

extern
gint g_snprintf (gchar *string,
         gulong n,
         gchar const *format,
         ...) __attribute__((__format__ (gnu_printf, 3, 4)));
extern
gint g_vsnprintf (gchar *string,
         gulong n,
         gchar const *format,
         va_list args)
         __attribute__((__format__ (gnu_printf, 3, 0)));

extern
void g_nullify_pointer (gpointer *nullify_location);

typedef enum
{
  G_FORMAT_SIZE_DEFAULT = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1 << 0,
  G_FORMAT_SIZE_IEC_UNITS = 1 << 1,
  G_FORMAT_SIZE_BITS = 1 << 2
} GFormatSizeFlags;

extern
gchar *g_format_size_full (guint64 size,
                             GFormatSizeFlags flags);
extern
gchar *g_format_size (guint64 size);

__attribute__((__deprecated__("Use '" "g_format_size" "' instead"))) extern
gchar *g_format_size_for_display (goffset size);
# 333 "/usr/include/glib-2.0/glib/gutils.h"
typedef void (*GVoidFunc) (void) __attribute__((__deprecated__));



# 336 "/usr/include/glib-2.0/glib/gutils.h"
#pragma GCC diagnostic push
# 336 "/usr/include/glib-2.0/glib/gutils.h"

# 336 "/usr/include/glib-2.0/glib/gutils.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 336 "/usr/include/glib-2.0/glib/gutils.h"

__attribute__((__deprecated__)) extern
void g_atexit (GVoidFunc func);

# 339 "/usr/include/glib-2.0/glib/gutils.h"
#pragma GCC diagnostic pop
# 339 "/usr/include/glib-2.0/glib/gutils.h"

# 356 "/usr/include/glib-2.0/glib/gutils.h"
extern
gchar* g_find_program_in_path (const gchar *program);
# 374 "/usr/include/glib-2.0/glib/gutils.h"
extern
gint (g_bit_nth_lsf) (gulong mask,
                                 gint nth_bit);
extern
gint (g_bit_nth_msf) (gulong mask,
                                 gint nth_bit);
extern
guint (g_bit_storage) (gulong number);

static inline gint
g_bit_nth_lsf_impl (gulong mask,
                    gint nth_bit)
{
  if ((__builtin_expect (__extension__ ({ int _g_boolean_var_; if (nth_bit < -1) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 0)))
    nth_bit = -1;
  while (nth_bit < ((8 * 8) - 1))
    {
      nth_bit++;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}

static inline gint
g_bit_nth_msf_impl (gulong mask,
                    gint nth_bit)
{
  if (nth_bit < 0 || (__builtin_expect (__extension__ ({ int _g_boolean_var_; if (nth_bit > 8 * 8) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 0)))
    nth_bit = 8 * 8;
  while (nth_bit > 0)
    {
      nth_bit--;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}

static inline guint
g_bit_storage_impl (gulong number)
{

  return (__builtin_expect (__extension__ ({ int _g_boolean_var_; if (number) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 1)) ?
           ((8 * 8U - 1) ^ (guint) __builtin_clzl(number)) + 1 : 1;
# 430 "/usr/include/glib-2.0/glib/gutils.h"
}




# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 56 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 57 "/usr/include/stdlib.h" 2 3 4



# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 361 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ , __leaf__)) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ , __leaf__)) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4





typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 150 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 151 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (const void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 {

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-qual"

   return (void *) __p;

#pragma GCC diagnostic pop

 }
    }

  return ((void *)0);
}
# 834 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ , __leaf__)) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
# 1024 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) __asm__ ("" "realpath") __attribute__ ((__nothrow__ , __leaf__))

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) __asm__ ("" "__realpath_chk") __attribute__ ((__nothrow__ , __leaf__))


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved)
{
  size_t sz = __builtin_object_size (__resolved, 2 > 1);

  if (sz == (size_t) -1)
    return __realpath_alias (__name, __resolved);


  if ((((__typeof (4096)) 0 < (__typeof (4096)) -1 || (__builtin_constant_p (4096) && (4096) > 0)) && __builtin_constant_p ((((long unsigned int) (4096)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (4096)) <= (sz) / (sizeof (char)))))
    return __realpath_chk_warn (__name, __resolved, sz);

  return __realpath_chk (__name, __resolved, sz);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ptsname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ptsname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ptsname_r_alias (__fd, __buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                           ;
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) __asm__ ("" "wctomb") __attribute__ ((__nothrow__ , __leaf__))
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctomb (char *__s, wchar_t __wchar)
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1
      && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) __asm__ ("" "mbstowcs") __attribute__ ((__nothrow__ , __leaf__))



    __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__mbstowcs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbstowcs_alias (__dst, __src, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbstowcs_chk_warn (__dst, __src, __len, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbstowcs_chk (__dst, __src, __len, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))

                           ;
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) __asm__ ("" "wcstombs") __attribute__ ((__nothrow__ , __leaf__))



  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__wcstombs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcstombs_alias (__dst, __src, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1)) : __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1))))

                         ;
}
# 1028 "/usr/include/stdlib.h" 2 3 4








# 436 "/usr/include/glib-2.0/glib/gutils.h" 2
# 487 "/usr/include/glib-2.0/glib/gutils.h"

# 35 "/usr/include/glib-2.0/glib/gthread.h" 2





# 39 "/usr/include/glib-2.0/glib/gthread.h"
extern
GQuark g_thread_error_quark (void);

typedef enum
{
  G_THREAD_ERROR_AGAIN
} GThreadError;

typedef gpointer (*GThreadFunc) (gpointer data);

typedef struct _GThread GThread;

typedef union _GMutex GMutex;
typedef struct _GRecMutex GRecMutex;
typedef struct _GRWLock GRWLock;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GOnce GOnce;

union _GMutex
{

  gpointer p;
  guint i[2];
};

struct _GRWLock
{

  gpointer p;
  guint i[2];
};

struct _GCond
{

  gpointer p;
  guint i[2];
};

struct _GRecMutex
{

  gpointer p;
  guint i[2];
};


struct _GPrivate
{

  gpointer p;
  GDestroyNotify notify;
  gpointer future[2];
};

typedef enum
{
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;


struct _GOnce
{
  volatile GOnceStatus status;
  volatile gpointer retval;
};
# 140 "/usr/include/glib-2.0/glib/gthread.h"
extern
GThread * g_thread_ref (GThread *thread);
extern
void g_thread_unref (GThread *thread);
extern
GThread * g_thread_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data);
extern
GThread * g_thread_try_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data,
                                                 GError **error);
extern
GThread * g_thread_self (void);
extern
void g_thread_exit (gpointer retval);
extern
gpointer g_thread_join (GThread *thread);
extern
void g_thread_yield (void);


extern
void g_mutex_init (GMutex *mutex);
extern
void g_mutex_clear (GMutex *mutex);
extern
void g_mutex_lock (GMutex *mutex);
extern
gboolean g_mutex_trylock (GMutex *mutex);
extern
void g_mutex_unlock (GMutex *mutex);

extern
void g_rw_lock_init (GRWLock *rw_lock);
extern
void g_rw_lock_clear (GRWLock *rw_lock);
extern
void g_rw_lock_writer_lock (GRWLock *rw_lock);
extern
gboolean g_rw_lock_writer_trylock (GRWLock *rw_lock);
extern
void g_rw_lock_writer_unlock (GRWLock *rw_lock);
extern
void g_rw_lock_reader_lock (GRWLock *rw_lock);
extern
gboolean g_rw_lock_reader_trylock (GRWLock *rw_lock);
extern
void g_rw_lock_reader_unlock (GRWLock *rw_lock);

extern
void g_rec_mutex_init (GRecMutex *rec_mutex);
extern
void g_rec_mutex_clear (GRecMutex *rec_mutex);
extern
void g_rec_mutex_lock (GRecMutex *rec_mutex);
extern
gboolean g_rec_mutex_trylock (GRecMutex *rec_mutex);
extern
void g_rec_mutex_unlock (GRecMutex *rec_mutex);

extern
void g_cond_init (GCond *cond);
extern
void g_cond_clear (GCond *cond);
extern
void g_cond_wait (GCond *cond,
                                                 GMutex *mutex);
extern
void g_cond_signal (GCond *cond);
extern
void g_cond_broadcast (GCond *cond);
extern
gboolean g_cond_wait_until (GCond *cond,
                                                 GMutex *mutex,
                                                 gint64 end_time);

extern
gpointer g_private_get (GPrivate *key);
extern
void g_private_set (GPrivate *key,
                                                 gpointer value);
extern
void g_private_replace (GPrivate *key,
                                                 gpointer value);

extern
gpointer g_once_impl (GOnce *once,
                                                 GThreadFunc func,
                                                 gpointer arg);
extern
gboolean g_once_init_enter (volatile void *location);
extern
void g_once_init_leave (volatile void *location,
                                                 gsize result);
# 276 "/usr/include/glib-2.0/glib/gthread.h"
extern
guint g_get_num_processors (void);







typedef void GMutexLocker;
# 329 "/usr/include/glib-2.0/glib/gthread.h"

static inline GMutexLocker *
g_mutex_locker_new (GMutex *mutex)
{
  g_mutex_lock (mutex);
  return (GMutexLocker *) mutex;
}
# 347 "/usr/include/glib-2.0/glib/gthread.h"

static inline void
g_mutex_locker_free (GMutexLocker *locker)
{
  g_mutex_unlock ((GMutex *) locker);
}







typedef void GRecMutexLocker;
# 404 "/usr/include/glib-2.0/glib/gthread.h"

# 404 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 404 "/usr/include/glib-2.0/glib/gthread.h"

# 404 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 404 "/usr/include/glib-2.0/glib/gthread.h"


static inline GRecMutexLocker *
g_rec_mutex_locker_new (GRecMutex *rec_mutex)
{
  g_rec_mutex_lock (rec_mutex);
  return (GRecMutexLocker *) rec_mutex;
}

# 412 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 412 "/usr/include/glib-2.0/glib/gthread.h"

# 424 "/usr/include/glib-2.0/glib/gthread.h"

# 424 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 424 "/usr/include/glib-2.0/glib/gthread.h"

# 424 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 424 "/usr/include/glib-2.0/glib/gthread.h"


static inline void
g_rec_mutex_locker_free (GRecMutexLocker *locker)
{
  g_rec_mutex_unlock ((GRecMutex *) locker);
}

# 431 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 431 "/usr/include/glib-2.0/glib/gthread.h"








typedef void GRWLockWriterLocker;
# 514 "/usr/include/glib-2.0/glib/gthread.h"

# 514 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 514 "/usr/include/glib-2.0/glib/gthread.h"

# 514 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 514 "/usr/include/glib-2.0/glib/gthread.h"


static inline GRWLockWriterLocker *
g_rw_lock_writer_locker_new (GRWLock *rw_lock)
{
  g_rw_lock_writer_lock (rw_lock);
  return (GRWLockWriterLocker *) rw_lock;
}

# 522 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 522 "/usr/include/glib-2.0/glib/gthread.h"

# 535 "/usr/include/glib-2.0/glib/gthread.h"

# 535 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 535 "/usr/include/glib-2.0/glib/gthread.h"

# 535 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 535 "/usr/include/glib-2.0/glib/gthread.h"


static inline void
g_rw_lock_writer_locker_free (GRWLockWriterLocker *locker)
{
  g_rw_lock_writer_unlock ((GRWLock *) locker);
}

# 542 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 542 "/usr/include/glib-2.0/glib/gthread.h"








typedef void GRWLockReaderLocker;
# 569 "/usr/include/glib-2.0/glib/gthread.h"

# 569 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 569 "/usr/include/glib-2.0/glib/gthread.h"

# 569 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 569 "/usr/include/glib-2.0/glib/gthread.h"


static inline GRWLockReaderLocker *
g_rw_lock_reader_locker_new (GRWLock *rw_lock)
{
  g_rw_lock_reader_lock (rw_lock);
  return (GRWLockReaderLocker *) rw_lock;
}

# 577 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 577 "/usr/include/glib-2.0/glib/gthread.h"

# 590 "/usr/include/glib-2.0/glib/gthread.h"

# 590 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 590 "/usr/include/glib-2.0/glib/gthread.h"

# 590 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 590 "/usr/include/glib-2.0/glib/gthread.h"


static inline void
g_rw_lock_reader_locker_free (GRWLockReaderLocker *locker)
{
  g_rw_lock_reader_unlock ((GRWLock *) locker);
}

# 597 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 597 "/usr/include/glib-2.0/glib/gthread.h"



# 33 "/usr/include/glib-2.0/glib/gasyncqueue.h" 2



typedef struct _GAsyncQueue GAsyncQueue;

extern
GAsyncQueue *g_async_queue_new (void);
extern
GAsyncQueue *g_async_queue_new_full (GDestroyNotify item_free_func);
extern
void g_async_queue_lock (GAsyncQueue *queue);
extern
void g_async_queue_unlock (GAsyncQueue *queue);
extern
GAsyncQueue *g_async_queue_ref (GAsyncQueue *queue);
extern
void g_async_queue_unref (GAsyncQueue *queue);

__attribute__((__deprecated__("Use '" "g_async_queue_ref" "' instead"))) extern
void g_async_queue_ref_unlocked (GAsyncQueue *queue);

__attribute__((__deprecated__("Use '" "g_async_queue_unref" "' instead"))) extern
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);

extern
void g_async_queue_push (GAsyncQueue *queue,
                                                 gpointer data);
extern
void g_async_queue_push_unlocked (GAsyncQueue *queue,
                                                 gpointer data);
extern
void g_async_queue_push_sorted (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
gpointer g_async_queue_pop (GAsyncQueue *queue);
extern
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);
extern
gpointer g_async_queue_try_pop (GAsyncQueue *queue);
extern
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);
extern
gpointer g_async_queue_timeout_pop (GAsyncQueue *queue,
                                                 guint64 timeout);
extern
gpointer g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue,
                                                 guint64 timeout);
extern
gint g_async_queue_length (GAsyncQueue *queue);
extern
gint g_async_queue_length_unlocked (GAsyncQueue *queue);
extern
void g_async_queue_sort (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
void g_async_queue_sort_unlocked (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);

extern
gboolean g_async_queue_remove (GAsyncQueue *queue,
                                                 gpointer item);
extern
gboolean g_async_queue_remove_unlocked (GAsyncQueue *queue,
                                                 gpointer item);
extern
void g_async_queue_push_front (GAsyncQueue *queue,
                                                 gpointer item);
extern
void g_async_queue_push_front_unlocked (GAsyncQueue *queue,
                                                 gpointer item);


# 113 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma GCC diagnostic push
# 113 "/usr/include/glib-2.0/glib/gasyncqueue.h"

# 113 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 113 "/usr/include/glib-2.0/glib/gasyncqueue.h"

__attribute__((__deprecated__("Use '" "g_async_queue_timeout_pop" "' instead"))) extern
gpointer g_async_queue_timed_pop (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
__attribute__((__deprecated__("Use '" "g_async_queue_timeout_pop_unlocked" "' instead"))) extern
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
                                                 GTimeVal *end_time);

# 120 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma GCC diagnostic pop
# 120 "/usr/include/glib-2.0/glib/gasyncqueue.h"



# 33 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gbacktrace.h" 1
# 36 "/usr/include/glib-2.0/glib/gbacktrace.h"
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-arch.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4








# 8 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 3 4
typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR,

  SEGV_MTEAERR,

  SEGV_MTESERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 176 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 88 "/usr/include/signal.h" 3 4
extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 173 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 193 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 229 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 230 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));







extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));
# 292 "/usr/include/signal.h" 3 4
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));







# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 302 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 312 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 314 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];
# 101 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 317 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("Use sigaction with SA_RESTART instead")));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 328 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigstksz.h" 1 3 4
# 329 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 330 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 340 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 376 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));
# 377 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 392 "/usr/include/signal.h" 2 3 4


# 37 "/usr/include/glib-2.0/glib/gbacktrace.h" 2




# 40 "/usr/include/glib-2.0/glib/gbacktrace.h"
extern
void g_on_error_query (const gchar *prg_name);
extern
void g_on_error_stack_trace (const gchar *prg_name);
# 70 "/usr/include/glib-2.0/glib/gbacktrace.h"

# 35 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbase64.h" 1
# 28 "/usr/include/glib-2.0/glib/gbase64.h"


extern
gsize g_base64_encode_step (const guchar *in,
                                 gsize len,
                                 gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
extern
gsize g_base64_encode_close (gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
extern
gchar* g_base64_encode (const guchar *data,
                                 gsize len) __attribute__ ((__malloc__));
extern
gsize g_base64_decode_step (const gchar *in,
                                 gsize len,
                                 guchar *out,
                                 gint *state,
                                 guint *save);
extern
guchar *g_base64_decode (const gchar *text,
                                 gsize *out_len) __attribute__ ((__malloc__));
extern
guchar *g_base64_decode_inplace (gchar *text,
                                 gsize *out_len);



# 36 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbitlock.h" 1
# 30 "/usr/include/glib-2.0/glib/gbitlock.h"


extern
void g_bit_lock (volatile gint *address,
                                           gint lock_bit);
extern
gboolean g_bit_trylock (volatile gint *address,
                                           gint lock_bit);
extern
void g_bit_unlock (volatile gint *address,
                                           gint lock_bit);

extern
void g_pointer_bit_lock (volatile void *address,
                                           gint lock_bit);
extern
gboolean g_pointer_bit_trylock (volatile void *address,
                                           gint lock_bit);
extern
void g_pointer_bit_unlock (volatile void *address,
                                           gint lock_bit);
# 74 "/usr/include/glib-2.0/glib/gbitlock.h"

# 37 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 1
# 26 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
# 1 "/usr/include/glib-2.0/glib/gdatetime.h" 1
# 31 "/usr/include/glib-2.0/glib/gdatetime.h"
# 1 "/usr/include/glib-2.0/glib/gtimezone.h" 1
# 30 "/usr/include/glib-2.0/glib/gtimezone.h"


typedef struct _GTimeZone GTimeZone;
# 49 "/usr/include/glib-2.0/glib/gtimezone.h"
typedef enum
{
  G_TIME_TYPE_STANDARD,
  G_TIME_TYPE_DAYLIGHT,
  G_TIME_TYPE_UNIVERSAL
} GTimeType;

__attribute__((__deprecated__("Use '" "g_time_zone_new_identifier" "' instead"))) extern
GTimeZone * g_time_zone_new (const gchar *identifier);
extern
GTimeZone * g_time_zone_new_identifier (const gchar *identifier);
extern
GTimeZone * g_time_zone_new_utc (void);
extern
GTimeZone * g_time_zone_new_local (void);
extern
GTimeZone * g_time_zone_new_offset (gint32 seconds);

extern
GTimeZone * g_time_zone_ref (GTimeZone *tz);
extern
void g_time_zone_unref (GTimeZone *tz);

extern
gint g_time_zone_find_interval (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 time_);

extern
gint g_time_zone_adjust_time (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 *time_);

extern
const gchar * g_time_zone_get_abbreviation (GTimeZone *tz,
                                                                         gint interval);
extern
gint32 g_time_zone_get_offset (GTimeZone *tz,
                                                                         gint interval);
extern
gboolean g_time_zone_is_dst (GTimeZone *tz,
                                                                         gint interval);
extern
const gchar * g_time_zone_get_identifier (GTimeZone *tz);


# 32 "/usr/include/glib-2.0/glib/gdatetime.h" 2


# 87 "/usr/include/glib-2.0/glib/gdatetime.h"
typedef gint64 GTimeSpan;
# 96 "/usr/include/glib-2.0/glib/gdatetime.h"
typedef struct _GDateTime GDateTime;

extern
void g_date_time_unref (GDateTime *datetime);
extern
GDateTime * g_date_time_ref (GDateTime *datetime);

extern
GDateTime * g_date_time_new_now (GTimeZone *tz);
extern
GDateTime * g_date_time_new_now_local (void);
extern
GDateTime * g_date_time_new_now_utc (void);

extern
GDateTime * g_date_time_new_from_unix_local (gint64 t);
extern
GDateTime * g_date_time_new_from_unix_utc (gint64 t);


# 115 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic push
# 115 "/usr/include/glib-2.0/glib/gdatetime.h"

# 115 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 115 "/usr/include/glib-2.0/glib/gdatetime.h"

__attribute__((__deprecated__("Use '" "g_date_time_new_from_unix_local" "' instead"))) extern
GDateTime * g_date_time_new_from_timeval_local (const GTimeVal *tv);
__attribute__((__deprecated__("Use '" "g_date_time_new_from_unix_utc" "' instead"))) extern
GDateTime * g_date_time_new_from_timeval_utc (const GTimeVal *tv);

# 120 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic pop
# 120 "/usr/include/glib-2.0/glib/gdatetime.h"


extern
GDateTime * g_date_time_new_from_iso8601 (const gchar *text,
                                                                         GTimeZone *default_tz);

extern
GDateTime * g_date_time_new (GTimeZone *tz,
                                                                         gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
extern
GDateTime * g_date_time_new_local (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
extern
GDateTime * g_date_time_new_utc (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);

extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add (GDateTime *datetime,
                                                                         GTimeSpan timespan);

extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_years (GDateTime *datetime,
                                                                         gint years);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_months (GDateTime *datetime,
                                                                         gint months);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_weeks (GDateTime *datetime,
                                                                         gint weeks);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_days (GDateTime *datetime,
                                                                         gint days);

extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_hours (GDateTime *datetime,
                                                                         gint hours);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_minutes (GDateTime *datetime,
                                                                         gint minutes);
extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_seconds (GDateTime *datetime,
                                                                         gdouble seconds);

extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_full (GDateTime *datetime,
                                                                         gint years,
                                                                         gint months,
                                                                         gint days,
                                                                         gint hours,
                                                                         gint minutes,
                                                                         gdouble seconds);

extern
gint g_date_time_compare (gconstpointer dt1,
                                                                         gconstpointer dt2);
extern
GTimeSpan g_date_time_difference (GDateTime *end,
                                                                         GDateTime *begin);
extern
guint g_date_time_hash (gconstpointer datetime);
extern
gboolean g_date_time_equal (gconstpointer dt1,
                                                                         gconstpointer dt2);

extern
void g_date_time_get_ymd (GDateTime *datetime,
                                                                         gint *year,
                                                                         gint *month,
                                                                         gint *day);

extern
gint g_date_time_get_year (GDateTime *datetime);
extern
gint g_date_time_get_month (GDateTime *datetime);
extern
gint g_date_time_get_day_of_month (GDateTime *datetime);

extern
gint g_date_time_get_week_numbering_year (GDateTime *datetime);
extern
gint g_date_time_get_week_of_year (GDateTime *datetime);
extern
gint g_date_time_get_day_of_week (GDateTime *datetime);

extern
gint g_date_time_get_day_of_year (GDateTime *datetime);

extern
gint g_date_time_get_hour (GDateTime *datetime);
extern
gint g_date_time_get_minute (GDateTime *datetime);
extern
gint g_date_time_get_second (GDateTime *datetime);
extern
gint g_date_time_get_microsecond (GDateTime *datetime);
extern
gdouble g_date_time_get_seconds (GDateTime *datetime);

extern
gint64 g_date_time_to_unix (GDateTime *datetime);

# 242 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic push
# 242 "/usr/include/glib-2.0/glib/gdatetime.h"

# 242 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 242 "/usr/include/glib-2.0/glib/gdatetime.h"

__attribute__((__deprecated__("Use '" "g_date_time_to_unix" "' instead"))) extern
gboolean g_date_time_to_timeval (GDateTime *datetime,
                                                                         GTimeVal *tv);

# 246 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic pop
# 246 "/usr/include/glib-2.0/glib/gdatetime.h"


extern
GTimeSpan g_date_time_get_utc_offset (GDateTime *datetime);
extern
GTimeZone * g_date_time_get_timezone (GDateTime *datetime);
extern
const gchar * g_date_time_get_timezone_abbreviation (GDateTime *datetime);
extern
gboolean g_date_time_is_daylight_savings (GDateTime *datetime);

extern
GDateTime * g_date_time_to_timezone (GDateTime *datetime,
                                                                         GTimeZone *tz);
extern
GDateTime * g_date_time_to_local (GDateTime *datetime);
extern
GDateTime * g_date_time_to_utc (GDateTime *datetime);

extern
gchar * g_date_time_format (GDateTime *datetime,
                                                                         const gchar *format) __attribute__ ((__malloc__));
extern
gchar * g_date_time_format_iso8601 (GDateTime *datetime) __attribute__ ((__malloc__));


# 27 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 2




# 58 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
typedef enum
{
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;

extern
GQuark g_bookmark_file_error_quark (void);






typedef struct _GBookmarkFile GBookmarkFile;

extern
GBookmarkFile *g_bookmark_file_new (void);
extern
void g_bookmark_file_free (GBookmarkFile *bookmark);

extern
gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
extern
gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark,
          const gchar *data,
          gsize length,
          GError **error);
extern
gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark,
          const gchar *file,
          gchar **full_path,
          GError **error);
extern
gchar * g_bookmark_file_to_data (GBookmarkFile *bookmark,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
extern
gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);

extern
void g_bookmark_file_set_title (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *title);
extern
gchar * g_bookmark_file_get_title (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
extern
void g_bookmark_file_set_description (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *description);
extern
gchar * g_bookmark_file_get_description (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
extern
void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *mime_type);
extern
gchar * g_bookmark_file_get_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
extern
void g_bookmark_file_set_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar **groups,
          gsize length);
extern
void g_bookmark_file_add_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group);
extern
gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
extern
gchar ** g_bookmark_file_get_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error);
extern
void g_bookmark_file_add_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec);
extern
gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
extern
gchar ** g_bookmark_file_get_applications (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_application_info" "' instead"))) extern
gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec,
          gint count,
          time_t stamp,
          GError **error);
extern
gboolean g_bookmark_file_set_application_info (GBookmarkFile *bookmark,
                                                     const char *uri,
                                                     const char *name,
                                                     const char *exec,
                                                     int count,
                                                     GDateTime *stamp,
                                                     GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_application_info" "' instead"))) extern
gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          gchar **exec,
          guint *count,
          time_t *stamp,
          GError **error);
extern
gboolean g_bookmark_file_get_application_info (GBookmarkFile *bookmark,
                                                     const char *uri,
                                                     const char *name,
                                                     char **exec,
                                                     unsigned int *count,
                                                     GDateTime **stamp,
                                                     GError **error);
extern
void g_bookmark_file_set_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          gboolean is_private);
extern
gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
void g_bookmark_file_set_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *href,
          const gchar *mime_type);
extern
gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          gchar **href,
          gchar **mime_type,
          GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_added_date_time" "' instead"))) extern
void g_bookmark_file_set_added (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t added);
extern
void g_bookmark_file_set_added_date_time (GBookmarkFile *bookmark,
                                                    const char *uri,
                                                    GDateTime *added);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_added_date_time" "' instead"))) extern
time_t g_bookmark_file_get_added (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
GDateTime *g_bookmark_file_get_added_date_time (GBookmarkFile *bookmark,
                                                    const char *uri,
                                                    GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_modified_date_time" "' instead"))) extern
void g_bookmark_file_set_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t modified);
extern
void g_bookmark_file_set_modified_date_time (GBookmarkFile *bookmark,
                                                       const char *uri,
                                                       GDateTime *modified);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_modified_date_time" "' instead"))) extern
time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
GDateTime *g_bookmark_file_get_modified_date_time (GBookmarkFile *bookmark,
                                                       const char *uri,
                                                       GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_visited_date_time" "' instead"))) extern
void g_bookmark_file_set_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t visited);
extern
void g_bookmark_file_set_visited_date_time (GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GDateTime *visited);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_visited_date_time" "' instead"))) extern
time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
GDateTime *g_bookmark_file_get_visited_date_time (GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GError **error);
extern
gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark,
          const gchar *uri);
extern
gint g_bookmark_file_get_size (GBookmarkFile *bookmark);
extern
gchar ** g_bookmark_file_get_uris (GBookmarkFile *bookmark,
          gsize *length);
extern
gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
extern
gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
extern
gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
extern
gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark,
          const gchar *old_uri,
          const gchar *new_uri,
          GError **error);


# 38 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbytes.h" 1
# 32 "/usr/include/glib-2.0/glib/gbytes.h"


extern
GBytes * g_bytes_new (gconstpointer data,
                                                 gsize size);

extern
GBytes * g_bytes_new_take (gpointer data,
                                                 gsize size);

extern
GBytes * g_bytes_new_static (gconstpointer data,
                                                 gsize size);

extern
GBytes * g_bytes_new_with_free_func (gconstpointer data,
                                                 gsize size,
                                                 GDestroyNotify free_func,
                                                 gpointer user_data);

extern
GBytes * g_bytes_new_from_bytes (GBytes *bytes,
                                                 gsize offset,
                                                 gsize length);

extern
gconstpointer g_bytes_get_data (GBytes *bytes,
                                                 gsize *size);

extern
gsize g_bytes_get_size (GBytes *bytes);

extern
GBytes * g_bytes_ref (GBytes *bytes);

extern
void g_bytes_unref (GBytes *bytes);

extern
gpointer g_bytes_unref_to_data (GBytes *bytes,
                                                 gsize *size);

extern
GByteArray * g_bytes_unref_to_array (GBytes *bytes);

extern
guint g_bytes_hash (gconstpointer bytes);

extern
gboolean g_bytes_equal (gconstpointer bytes1,
                                                 gconstpointer bytes2);

extern
gint g_bytes_compare (gconstpointer bytes1,
                                                 gconstpointer bytes2);

extern
gconstpointer g_bytes_get_region (GBytes *bytes,
                                                 gsize element_size,
                                                 gsize offset,
                                                 gsize n_elements);



# 39 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcharset.h" 1
# 28 "/usr/include/glib-2.0/glib/gcharset.h"


extern
gboolean g_get_charset (const char **charset);
extern
gchar * g_get_codeset (void);
extern
gboolean g_get_console_charset (const char **charset);

extern
const gchar * const * g_get_language_names (void);
extern
const gchar * const * g_get_language_names_with_category
                                            (const gchar *category_name);
extern
gchar ** g_get_locale_variants (const gchar *locale);


# 40 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gchecksum.h" 1
# 29 "/usr/include/glib-2.0/glib/gchecksum.h"

# 47 "/usr/include/glib-2.0/glib/gchecksum.h"
typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256,
  G_CHECKSUM_SHA512,
  G_CHECKSUM_SHA384
} GChecksumType;
# 65 "/usr/include/glib-2.0/glib/gchecksum.h"
typedef struct _GChecksum GChecksum;

extern
gssize g_checksum_type_get_length (GChecksumType checksum_type);

extern
GChecksum * g_checksum_new (GChecksumType checksum_type);
extern
void g_checksum_reset (GChecksum *checksum);
extern
GChecksum * g_checksum_copy (const GChecksum *checksum);
extern
void g_checksum_free (GChecksum *checksum);
extern
void g_checksum_update (GChecksum *checksum,
                                                     const guchar *data,
                                                     gssize length);
extern
const gchar * g_checksum_get_string (GChecksum *checksum);
extern
void g_checksum_get_digest (GChecksum *checksum,
                                                     guint8 *buffer,
                                                     gsize *digest_len);

extern
gchar *g_compute_checksum_for_data (GChecksumType checksum_type,
                                                     const guchar *data,
                                                     gsize length);
extern
gchar *g_compute_checksum_for_string (GChecksumType checksum_type,
                                                     const gchar *str,
                                                     gssize length);

extern
gchar *g_compute_checksum_for_bytes (GChecksumType checksum_type,
                                                     GBytes *data);


# 41 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gconvert.h" 1
# 34 "/usr/include/glib-2.0/glib/gconvert.h"

# 54 "/usr/include/glib-2.0/glib/gconvert.h"
typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
  G_CONVERT_ERROR_NO_MEMORY,
  G_CONVERT_ERROR_EMBEDDED_NUL
} GConvertError;
# 74 "/usr/include/glib-2.0/glib/gconvert.h"
extern
GQuark g_convert_error_quark (void);







typedef struct _GIConv *GIConv;

extern
GIConv g_iconv_open (const gchar *to_codeset,
         const gchar *from_codeset);
extern
gsize g_iconv (GIConv converter,
         gchar **inbuf,
         gsize *inbytes_left,
         gchar **outbuf,
         gsize *outbytes_left);
extern
gint g_iconv_close (GIConv converter);


extern
gchar* g_convert (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
extern
gchar* g_convert_with_iconv (const gchar *str,
    gssize len,
    GIConv converter,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
extern
gchar* g_convert_with_fallback (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    const gchar *fallback,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));




extern
gchar* g_locale_to_utf8 (const gchar *opsysstring,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__ ((__malloc__));
extern
gchar* g_locale_from_utf8 (const gchar *utf8string,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__ ((__malloc__));




extern
gchar* g_filename_to_utf8 (const gchar *opsysstring,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__ ((__malloc__));
extern
gchar* g_filename_from_utf8 (const gchar *utf8string,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__ ((__malloc__));

extern
gchar *g_filename_from_uri (const gchar *uri,
       gchar **hostname,
       GError **error) __attribute__ ((__malloc__));

extern
gchar *g_filename_to_uri (const gchar *filename,
       const gchar *hostname,
       GError **error) __attribute__ ((__malloc__));
extern
gchar *g_filename_display_name (const gchar *filename) __attribute__ ((__malloc__));
extern
gboolean g_get_filename_charsets (const gchar ***filename_charsets);

extern
gchar *g_filename_display_basename (const gchar *filename) __attribute__ ((__malloc__));

extern
gchar **g_uri_list_extract_uris (const gchar *uri_list);


# 42 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdataset.h" 1
# 34 "/usr/include/glib-2.0/glib/gdataset.h"


typedef struct _GData GData;

typedef void (*GDataForeachFunc) (GQuark key_id,
                                                 gpointer data,
                                                 gpointer user_data);



extern
void g_datalist_init (GData **datalist);
extern
void g_datalist_clear (GData **datalist);
extern
gpointer g_datalist_id_get_data (GData **datalist,
      GQuark key_id);
extern
void g_datalist_id_set_data_full (GData **datalist,
      GQuark key_id,
      gpointer data,
      GDestroyNotify destroy_func);

typedef gpointer (*GDuplicateFunc) (gpointer data, gpointer user_data);

extern
gpointer g_datalist_id_dup_data (GData **datalist,
                                         GQuark key_id,
                                         GDuplicateFunc dup_func,
      gpointer user_data);
extern
gboolean g_datalist_id_replace_data (GData **datalist,
                                         GQuark key_id,
                                         gpointer oldval,
                                         gpointer newval,
                                         GDestroyNotify destroy,
      GDestroyNotify *old_destroy);

extern
gpointer g_datalist_id_remove_no_notify (GData **datalist,
      GQuark key_id);
extern
void g_datalist_foreach (GData **datalist,
      GDataForeachFunc func,
      gpointer user_data);
# 89 "/usr/include/glib-2.0/glib/gdataset.h"
extern
void g_datalist_set_flags (GData **datalist,
      guint flags);
extern
void g_datalist_unset_flags (GData **datalist,
      guint flags);
extern
guint g_datalist_get_flags (GData **datalist);
# 113 "/usr/include/glib-2.0/glib/gdataset.h"
extern
void g_dataset_destroy (gconstpointer dataset_location);
extern
gpointer g_dataset_id_get_data (gconstpointer dataset_location,
                                         GQuark key_id);
extern
gpointer g_datalist_get_data (GData **datalist,
       const gchar *key);
extern
void g_dataset_id_set_data_full (gconstpointer dataset_location,
                                         GQuark key_id,
                                         gpointer data,
                                         GDestroyNotify destroy_func);
extern
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location,
                                         GQuark key_id);
extern
void g_dataset_foreach (gconstpointer dataset_location,
                                         GDataForeachFunc func,
                                         gpointer user_data);
# 148 "/usr/include/glib-2.0/glib/gdataset.h"

# 43 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdate.h" 1
# 37 "/usr/include/glib-2.0/glib/gdate.h"

# 48 "/usr/include/glib-2.0/glib/gdate.h"
typedef gint32 GTime __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;


typedef enum
{
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
} GDateDMY;


typedef enum
{
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;
# 99 "/usr/include/glib-2.0/glib/gdate.h"
struct _GDate
{
  guint julian_days : 32;





  guint julian : 1;
  guint dmy : 1;


  guint day : 6;
  guint month : 4;
  guint year : 16;
};





extern
GDate* g_date_new (void);
extern
GDate* g_date_new_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year);
extern
GDate* g_date_new_julian (guint32 julian_day);
extern
void g_date_free (GDate *date);
extern
GDate* g_date_copy (const GDate *date);






extern
gboolean g_date_valid (const GDate *date);
extern
gboolean g_date_valid_day (GDateDay day) __attribute__ ((__const__));
extern
gboolean g_date_valid_month (GDateMonth month) __attribute__ ((__const__));
extern
gboolean g_date_valid_year (GDateYear year) __attribute__ ((__const__));
extern
gboolean g_date_valid_weekday (GDateWeekday weekday) __attribute__ ((__const__));
extern
gboolean g_date_valid_julian (guint32 julian_date) __attribute__ ((__const__));
extern
gboolean g_date_valid_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year) __attribute__ ((__const__));

extern
GDateWeekday g_date_get_weekday (const GDate *date);
extern
GDateMonth g_date_get_month (const GDate *date);
extern
GDateYear g_date_get_year (const GDate *date);
extern
GDateDay g_date_get_day (const GDate *date);
extern
guint32 g_date_get_julian (const GDate *date);
extern
guint g_date_get_day_of_year (const GDate *date);






extern
guint g_date_get_monday_week_of_year (const GDate *date);
extern
guint g_date_get_sunday_week_of_year (const GDate *date);
extern
guint g_date_get_iso8601_week_of_year (const GDate *date);





extern
void g_date_clear (GDate *date,
                                           guint n_dates);





extern
void g_date_set_parse (GDate *date,
                                           const gchar *str);
extern
void g_date_set_time_t (GDate *date,
        time_t timet);

# 198 "/usr/include/glib-2.0/glib/gdate.h"
#pragma GCC diagnostic push
# 198 "/usr/include/glib-2.0/glib/gdate.h"

# 198 "/usr/include/glib-2.0/glib/gdate.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 198 "/usr/include/glib-2.0/glib/gdate.h"

__attribute__((__deprecated__("Use '" "g_date_set_time_t" "' instead"))) extern
void g_date_set_time_val (GDate *date,
        GTimeVal *timeval);
__attribute__((__deprecated__("Use '" "g_date_set_time_t" "' instead"))) extern
void g_date_set_time (GDate *date,
                                           GTime time_);

# 205 "/usr/include/glib-2.0/glib/gdate.h"
#pragma GCC diagnostic pop
# 205 "/usr/include/glib-2.0/glib/gdate.h"

extern
void g_date_set_month (GDate *date,
                                           GDateMonth month);
extern
void g_date_set_day (GDate *date,
                                           GDateDay day);
extern
void g_date_set_year (GDate *date,
                                           GDateYear year);
extern
void g_date_set_dmy (GDate *date,
                                           GDateDay day,
                                           GDateMonth month,
                                           GDateYear y);
extern
void g_date_set_julian (GDate *date,
                                           guint32 julian_date);
extern
gboolean g_date_is_first_of_month (const GDate *date);
extern
gboolean g_date_is_last_of_month (const GDate *date);


extern
void g_date_add_days (GDate *date,
                                           guint n_days);
extern
void g_date_subtract_days (GDate *date,
                                           guint n_days);


extern
void g_date_add_months (GDate *date,
                                           guint n_months);
extern
void g_date_subtract_months (GDate *date,
                                           guint n_months);


extern
void g_date_add_years (GDate *date,
                                           guint n_years);
extern
void g_date_subtract_years (GDate *date,
                                           guint n_years);
extern
gboolean g_date_is_leap_year (GDateYear year) __attribute__ ((__const__));
extern
guint8 g_date_get_days_in_month (GDateMonth month,
                                           GDateYear year) __attribute__ ((__const__));
extern
guint8 g_date_get_monday_weeks_in_year (GDateYear year) __attribute__ ((__const__));
extern
guint8 g_date_get_sunday_weeks_in_year (GDateYear year) __attribute__ ((__const__));



extern
gint g_date_days_between (const GDate *date1,
        const GDate *date2);


extern
gint g_date_compare (const GDate *lhs,
                                           const GDate *rhs);
extern
void g_date_to_struct_tm (const GDate *date,
                                           struct tm *tm);

extern
void g_date_clamp (GDate *date,
        const GDate *min_date,
        const GDate *max_date);


extern
void g_date_order (GDate *date1, GDate *date2);




extern
gsize g_date_strftime (gchar *s,
                                           gsize slen,
                                           const gchar *format,
                                           const GDate *date);
# 305 "/usr/include/glib-2.0/glib/gdate.h"

# 44 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gdir.h" 1
# 32 "/usr/include/glib-2.0/glib/gdir.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4

# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));
# 209 "/usr/include/dirent.h" 3 4
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 246 "/usr/include/dirent.h" 2 3 4
# 255 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 325 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 353 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 402 "/usr/include/dirent.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 3 4

# 33 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 3 4

# 405 "/usr/include/dirent.h" 2 3 4
# 33 "/usr/include/glib-2.0/glib/gdir.h" 2





# 37 "/usr/include/glib-2.0/glib/gdir.h"
typedef struct _GDir GDir;

extern
GDir * g_dir_open (const gchar *path,
            guint flags,
            GError **error);
extern
const gchar * g_dir_read_name (GDir *dir);
extern
void g_dir_rewind (GDir *dir);
extern
void g_dir_close (GDir *dir);


# 46 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/genviron.h" 1
# 34 "/usr/include/glib-2.0/glib/genviron.h"


extern
const gchar * g_getenv (const gchar *variable);
extern
gboolean g_setenv (const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite);
extern
void g_unsetenv (const gchar *variable);
extern
gchar ** g_listenv (void);

extern
gchar ** g_get_environ (void);
extern
const gchar * g_environ_getenv (gchar **envp,
                                  const gchar *variable);
extern
gchar ** g_environ_setenv (gchar **envp,
                                  const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite) __attribute__((warn_unused_result));
extern
gchar ** g_environ_unsetenv (gchar **envp,
                                  const gchar *variable) __attribute__((warn_unused_result));


# 47 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gfileutils.h" 1
# 29 "/usr/include/glib-2.0/glib/gfileutils.h"




typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;





typedef enum
{
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;
# 99 "/usr/include/glib-2.0/glib/gfileutils.h"
typedef enum
{
  G_FILE_SET_CONTENTS_NONE = 0,
  G_FILE_SET_CONTENTS_CONSISTENT = 1 << 0,
  G_FILE_SET_CONTENTS_DURABLE = 1 << 1,
  G_FILE_SET_CONTENTS_ONLY_EXISTING = 1 << 2
} GFileSetContentsFlags
;

extern
GQuark g_file_error_quark (void);

extern
GFileError g_file_error_from_errno (gint err_no);

extern
gboolean g_file_test (const gchar *filename,
                              GFileTest test);
extern
gboolean g_file_get_contents (const gchar *filename,
                              gchar **contents,
                              gsize *length,
                              GError **error);
extern
gboolean g_file_set_contents (const gchar *filename,
                              const gchar *contents,
                              gssize length,
                              GError **error);

# 127 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma GCC diagnostic push
# 127 "/usr/include/glib-2.0/glib/gfileutils.h"

# 127 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 127 "/usr/include/glib-2.0/glib/gfileutils.h"

extern
gboolean g_file_set_contents_full (const gchar *filename,
                                   const gchar *contents,
                                   gssize length,
                                   GFileSetContentsFlags flags,
                                   int mode,
                                   GError **error);

# 135 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma GCC diagnostic pop
# 135 "/usr/include/glib-2.0/glib/gfileutils.h"

extern
gchar *g_file_read_link (const gchar *filename,
                              GError **error);


extern
gchar *g_mkdtemp (gchar *tmpl);
extern
gchar *g_mkdtemp_full (gchar *tmpl,
                               gint mode);


extern
gint g_mkstemp (gchar *tmpl);
extern
gint g_mkstemp_full (gchar *tmpl,
                               gint flags,
                               gint mode);


extern
gint g_file_open_tmp (const gchar *tmpl,
                               gchar **name_used,
                               GError **error);
extern
gchar *g_dir_make_tmp (const gchar *tmpl,
                               GError **error);

extern
gchar *g_build_path (const gchar *separator,
                               const gchar *first_element,
                               ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
extern
gchar *g_build_pathv (const gchar *separator,
                               gchar **args) __attribute__ ((__malloc__));

extern
gchar *g_build_filename (const gchar *first_element,
                               ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
extern
gchar *g_build_filenamev (gchar **args) __attribute__ ((__malloc__));
extern
gchar *g_build_filename_valist (const gchar *first_element,
                                  va_list *args) __attribute__ ((__malloc__));

extern
gint g_mkdir_with_parents (const gchar *pathname,
                               gint mode);
# 199 "/usr/include/glib-2.0/glib/gfileutils.h"
extern
gboolean g_path_is_absolute (const gchar *file_name);
extern
const gchar *g_path_skip_root (const gchar *file_name);

__attribute__((__deprecated__("Use '" "g_path_get_basename" "' instead"))) extern
const gchar *g_basename (const gchar *file_name);


extern
gchar *g_get_current_dir (void);
extern
gchar *g_path_get_basename (const gchar *file_name) __attribute__ ((__malloc__));
extern
gchar *g_path_get_dirname (const gchar *file_name) __attribute__ ((__malloc__));

extern
gchar *g_canonicalize_filename (const gchar *filename,
                                const gchar *relative_to) __attribute__ ((__malloc__));


# 49 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ggettext.h" 1
# 34 "/usr/include/glib-2.0/glib/ggettext.h"


extern
const gchar *g_strip_context (const gchar *msgid,
                              const gchar *msgval) __attribute__ ((__format_arg__ (1)));

extern
const gchar *g_dgettext (const gchar *domain,
                              const gchar *msgid) __attribute__ ((__format_arg__ (2)));
extern
const gchar *g_dcgettext (const gchar *domain,
                              const gchar *msgid,
                              gint category) __attribute__ ((__format_arg__ (2)));
extern
const gchar *g_dngettext (const gchar *domain,
                              const gchar *msgid,
                              const gchar *msgid_plural,
                              gulong n) __attribute__ ((__format_arg__ (3)));
extern
const gchar *g_dpgettext (const gchar *domain,
                              const gchar *msgctxtid,
                              gsize msgidoffset) __attribute__ ((__format_arg__ (2)));
extern
const gchar *g_dpgettext2 (const gchar *domain,
                              const gchar *context,
                              const gchar *msgid) __attribute__ ((__format_arg__ (3)));


# 50 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghash.h" 1
# 33 "/usr/include/glib-2.0/glib/ghash.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 32 "/usr/include/glib-2.0/glib/glist.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 35 "/usr/include/glib-2.0/glib/gmem.h"

# 52 "/usr/include/glib-2.0/glib/gmem.h"
typedef struct _GMemVTable GMemVTable;
# 71 "/usr/include/glib-2.0/glib/gmem.h"
extern
void g_free (gpointer mem);

extern
void g_clear_pointer (gpointer *pp,
                           GDestroyNotify destroy);

extern
gpointer g_malloc (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_malloc0 (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
extern
gpointer g_try_malloc (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_try_malloc0 (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_try_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));

extern
gpointer g_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));
extern
gpointer g_try_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_try_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_try_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));

extern
gpointer g_aligned_alloc (gsize n_blocks,
                           gsize n_block_bytes,
                           gsize alignment) __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1,2)));
extern
gpointer g_aligned_alloc0 (gsize n_blocks,
                           gsize n_block_bytes,
                           gsize alignment) __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1,2)));
extern
void g_aligned_free (gpointer mem);
# 214 "/usr/include/glib-2.0/glib/gmem.h"

static inline gpointer
g_steal_pointer (gpointer pp)
{
  gpointer *ptr = (gpointer *) pp;
  gpointer ref;

  ref = *ptr;
  *ptr = 
# 222 "/usr/include/glib-2.0/glib/gmem.h" 3 4
        ((void *)0)
# 222 "/usr/include/glib-2.0/glib/gmem.h"
            ;

  return ref;
}
# 380 "/usr/include/glib-2.0/glib/gmem.h"
struct _GMemVTable {
  gpointer (*malloc) (gsize n_bytes);
  gpointer (*realloc) (gpointer mem,
      gsize n_bytes);
  void (*free) (gpointer mem);

  gpointer (*calloc) (gsize n_blocks,
      gsize n_block_bytes);
  gpointer (*try_malloc) (gsize n_bytes);
  gpointer (*try_realloc) (gpointer mem,
      gsize n_bytes);
};
__attribute__((__deprecated__)) extern
void g_mem_set_vtable (GMemVTable *vtable);
__attribute__((__deprecated__)) extern
gboolean g_mem_is_system_malloc (void);

extern gboolean g_mem_gc_friendly;



extern GMemVTable *glib_mem_profiler_table;
__attribute__((__deprecated__)) extern
void g_mem_profile (void);


# 33 "/usr/include/glib-2.0/glib/glist.h" 2
# 1 "/usr/include/glib-2.0/glib/gnode.h" 1
# 34 "/usr/include/glib-2.0/glib/gnode.h"


typedef struct _GNode GNode;


typedef enum
{
  G_TRAVERSE_LEAVES = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK = 0x03,
  G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;


typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;

typedef gboolean (*GNodeTraverseFunc) (GNode *node,
       gpointer data);
typedef void (*GNodeForeachFunc) (GNode *node,
       gpointer data);



struct _GNode
{
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};
# 98 "/usr/include/glib-2.0/glib/gnode.h"
extern
GNode* g_node_new (gpointer data);
extern
void g_node_destroy (GNode *root);
extern
void g_node_unlink (GNode *node);
extern
GNode* g_node_copy_deep (GNode *node,
     GCopyFunc copy_func,
     gpointer data);
extern
GNode* g_node_copy (GNode *node);
extern
GNode* g_node_insert (GNode *parent,
     gint position,
     GNode *node);
extern
GNode* g_node_insert_before (GNode *parent,
     GNode *sibling,
     GNode *node);
extern
GNode* g_node_insert_after (GNode *parent,
     GNode *sibling,
     GNode *node);
extern
GNode* g_node_prepend (GNode *parent,
     GNode *node);
extern
guint g_node_n_nodes (GNode *root,
     GTraverseFlags flags);
extern
GNode* g_node_get_root (GNode *node);
extern
gboolean g_node_is_ancestor (GNode *node,
     GNode *descendant);
extern
guint g_node_depth (GNode *node);
extern
GNode* g_node_find (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gpointer data);
# 223 "/usr/include/glib-2.0/glib/gnode.h"
extern
void g_node_traverse (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gint max_depth,
     GNodeTraverseFunc func,
     gpointer data);






extern
guint g_node_max_height (GNode *root);

extern
void g_node_children_foreach (GNode *node,
      GTraverseFlags flags,
      GNodeForeachFunc func,
      gpointer data);
extern
void g_node_reverse_children (GNode *node);
extern
guint g_node_n_children (GNode *node);
extern
GNode* g_node_nth_child (GNode *node,
      guint n);
extern
GNode* g_node_last_child (GNode *node);
extern
GNode* g_node_find_child (GNode *node,
      GTraverseFlags flags,
      gpointer data);
extern
gint g_node_child_position (GNode *node,
      GNode *child);
extern
gint g_node_child_index (GNode *node,
      gpointer data);

extern
GNode* g_node_first_sibling (GNode *node);
extern
GNode* g_node_last_sibling (GNode *node);
# 305 "/usr/include/glib-2.0/glib/gnode.h"

# 34 "/usr/include/glib-2.0/glib/glist.h" 2



typedef struct _GList GList;

struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};



extern
GList* g_list_alloc (void) __attribute__((warn_unused_result));
extern
void g_list_free (GList *list);
extern
void g_list_free_1 (GList *list);

extern
void g_list_free_full (GList *list,
      GDestroyNotify free_func);
extern
GList* g_list_append (GList *list,
      gpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_prepend (GList *list,
      gpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_insert (GList *list,
      gpointer data,
      gint position) __attribute__((warn_unused_result));
extern
GList* g_list_insert_sorted (GList *list,
      gpointer data,
      GCompareFunc func) __attribute__((warn_unused_result));
extern
GList* g_list_insert_sorted_with_data (GList *list,
      gpointer data,
      GCompareDataFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
extern
GList* g_list_insert_before (GList *list,
      GList *sibling,
      gpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_insert_before_link (GList *list,
      GList *sibling,
      GList *link_) __attribute__((warn_unused_result));
extern
GList* g_list_concat (GList *list1,
      GList *list2) __attribute__((warn_unused_result));
extern
GList* g_list_remove (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_remove_all (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
extern
GList* g_list_remove_link (GList *list,
      GList *llink) __attribute__((warn_unused_result));
extern
GList* g_list_delete_link (GList *list,
      GList *link_) __attribute__((warn_unused_result));
extern
GList* g_list_reverse (GList *list) __attribute__((warn_unused_result));
extern
GList* g_list_copy (GList *list) __attribute__((warn_unused_result));

extern
GList* g_list_copy_deep (GList *list,
      GCopyFunc func,
      gpointer user_data) __attribute__((warn_unused_result));

extern
GList* g_list_nth (GList *list,
      guint n);
extern
GList* g_list_nth_prev (GList *list,
      guint n);
extern
GList* g_list_find (GList *list,
      gconstpointer data);
extern
GList* g_list_find_custom (GList *list,
      gconstpointer data,
      GCompareFunc func);
extern
gint g_list_position (GList *list,
      GList *llink);
extern
gint g_list_index (GList *list,
      gconstpointer data);
extern
GList* g_list_last (GList *list);
extern
GList* g_list_first (GList *list);
extern
guint g_list_length (GList *list);
extern
void g_list_foreach (GList *list,
      GFunc func,
      gpointer user_data);
extern
GList* g_list_sort (GList *list,
      GCompareFunc compare_func) __attribute__((warn_unused_result));
extern
GList* g_list_sort_with_data (GList *list,
      GCompareDataFunc compare_func,
      gpointer user_data) __attribute__((warn_unused_result));
extern
gpointer g_list_nth_data (GList *list,
      guint n);

extern
void g_clear_list (GList **list_ptr,
                                         GDestroyNotify destroy);
# 175 "/usr/include/glib-2.0/glib/glist.h"

# 34 "/usr/include/glib-2.0/glib/ghash.h" 2



typedef struct _GHashTable GHashTable;

typedef gboolean (*GHRFunc) (gpointer key,
                               gpointer value,
                               gpointer user_data);

typedef struct _GHashTableIter GHashTableIter;

struct _GHashTableIter
{

  gpointer dummy1;
  gpointer dummy2;
  gpointer dummy3;
  int dummy4;
  gboolean dummy5;
  gpointer dummy6;
};

extern
GHashTable* g_hash_table_new (GHashFunc hash_func,
                                            GEqualFunc key_equal_func);
extern
GHashTable* g_hash_table_new_full (GHashFunc hash_func,
                                            GEqualFunc key_equal_func,
                                            GDestroyNotify key_destroy_func,
                                            GDestroyNotify value_destroy_func);
extern
GHashTable *g_hash_table_new_similar (GHashTable *other_hash_table);
extern
void g_hash_table_destroy (GHashTable *hash_table);
extern
gboolean g_hash_table_insert (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
extern
gboolean g_hash_table_replace (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
extern
gboolean g_hash_table_add (GHashTable *hash_table,
                                            gpointer key);
extern
gboolean g_hash_table_remove (GHashTable *hash_table,
                                            gconstpointer key);
extern
void g_hash_table_remove_all (GHashTable *hash_table);
extern
gboolean g_hash_table_steal (GHashTable *hash_table,
                                            gconstpointer key);
extern
gboolean g_hash_table_steal_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *stolen_key,
                                            gpointer *stolen_value);
extern
void g_hash_table_steal_all (GHashTable *hash_table);
extern
gpointer g_hash_table_lookup (GHashTable *hash_table,
                                            gconstpointer key);
extern
gboolean g_hash_table_contains (GHashTable *hash_table,
                                            gconstpointer key);
extern
gboolean g_hash_table_lookup_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *orig_key,
                                            gpointer *value);
extern
void g_hash_table_foreach (GHashTable *hash_table,
                                            GHFunc func,
                                            gpointer user_data);
extern
gpointer g_hash_table_find (GHashTable *hash_table,
                                            GHRFunc predicate,
                                            gpointer user_data);
extern
guint g_hash_table_foreach_remove (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
extern
guint g_hash_table_foreach_steal (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
extern
guint g_hash_table_size (GHashTable *hash_table);
extern
GList * g_hash_table_get_keys (GHashTable *hash_table);
extern
GList * g_hash_table_get_values (GHashTable *hash_table);
extern
gpointer * g_hash_table_get_keys_as_array (GHashTable *hash_table,
                                            guint *length);

extern
void g_hash_table_iter_init (GHashTableIter *iter,
                                            GHashTable *hash_table);
extern
gboolean g_hash_table_iter_next (GHashTableIter *iter,
                                            gpointer *key,
                                            gpointer *value);
extern
GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);
extern
void g_hash_table_iter_remove (GHashTableIter *iter);
extern
void g_hash_table_iter_replace (GHashTableIter *iter,
                                            gpointer value);
extern
void g_hash_table_iter_steal (GHashTableIter *iter);

extern
GHashTable* g_hash_table_ref (GHashTable *hash_table);
extern
void g_hash_table_unref (GHashTable *hash_table);






extern
gboolean g_str_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_str_hash (gconstpointer v);

extern
gboolean g_int_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_int_hash (gconstpointer v);

extern
gboolean g_int64_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_int64_hash (gconstpointer v);

extern
gboolean g_double_equal (gconstpointer v1,
                         gconstpointer v2);
extern
guint g_double_hash (gconstpointer v);

extern
guint g_direct_hash (gconstpointer v) __attribute__ ((__const__));
extern
gboolean g_direct_equal (gconstpointer v1,
                         gconstpointer v2) __attribute__ ((__const__));


# 51 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghmac.h" 1
# 27 "/usr/include/glib-2.0/glib/ghmac.h"
# 1 "/usr/include/glib-2.0/glib/gchecksum.h" 1
# 28 "/usr/include/glib-2.0/glib/ghmac.h" 2


# 40 "/usr/include/glib-2.0/glib/ghmac.h"
typedef struct _GHmac GHmac;

extern
GHmac * g_hmac_new (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len);
extern
GHmac * g_hmac_copy (const GHmac *hmac);
extern
GHmac * g_hmac_ref (GHmac *hmac);
extern
void g_hmac_unref (GHmac *hmac);
extern
void g_hmac_update (GHmac *hmac,
                                                     const guchar *data,
                                                     gssize length);
extern
const gchar * g_hmac_get_string (GHmac *hmac);
extern
void g_hmac_get_digest (GHmac *hmac,
                                                     guint8 *buffer,
                                                     gsize *digest_len);

extern
gchar *g_compute_hmac_for_data (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const guchar *data,
                                                     gsize length);
extern
gchar *g_compute_hmac_for_string (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const gchar *str,
                                                     gssize length);
extern
gchar *g_compute_hmac_for_bytes (GChecksumType digest_type,
                                                     GBytes *key,
                                                     GBytes *data);



# 52 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghook.h" 1
# 34 "/usr/include/glib-2.0/glib/ghook.h"




typedef struct _GHook GHook;
typedef struct _GHookList GHookList;

typedef gint (*GHookCompareFunc) (GHook *new_hook,
       GHook *sibling);
typedef gboolean (*GHookFindFunc) (GHook *hook,
       gpointer data);
typedef void (*GHookMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef gboolean (*GHookCheckMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef void (*GHookFunc) (gpointer data);
typedef gboolean (*GHookCheckFunc) (gpointer data);
typedef void (*GHookFinalizeFunc) (GHookList *hook_list,
       GHook *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;




struct _GHookList
{
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  gpointer dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook
{
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
# 104 "/usr/include/glib-2.0/glib/ghook.h"
extern
void g_hook_list_init (GHookList *hook_list,
      guint hook_size);
extern
void g_hook_list_clear (GHookList *hook_list);
extern
GHook* g_hook_alloc (GHookList *hook_list);
extern
void g_hook_free (GHookList *hook_list,
      GHook *hook);
extern
GHook * g_hook_ref (GHookList *hook_list,
      GHook *hook);
extern
void g_hook_unref (GHookList *hook_list,
      GHook *hook);
extern
gboolean g_hook_destroy (GHookList *hook_list,
      gulong hook_id);
extern
void g_hook_destroy_link (GHookList *hook_list,
      GHook *hook);
extern
void g_hook_prepend (GHookList *hook_list,
      GHook *hook);
extern
void g_hook_insert_before (GHookList *hook_list,
      GHook *sibling,
      GHook *hook);
extern
void g_hook_insert_sorted (GHookList *hook_list,
      GHook *hook,
      GHookCompareFunc func);
extern
GHook* g_hook_get (GHookList *hook_list,
      gulong hook_id);
extern
GHook* g_hook_find (GHookList *hook_list,
      gboolean need_valids,
      GHookFindFunc func,
      gpointer data);
extern
GHook* g_hook_find_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer data);
extern
GHook* g_hook_find_func (GHookList *hook_list,
      gboolean need_valids,
      gpointer func);
extern
GHook* g_hook_find_func_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer func,
      gpointer data);

extern
GHook* g_hook_first_valid (GHookList *hook_list,
      gboolean may_be_in_call);



extern
GHook* g_hook_next_valid (GHookList *hook_list,
      GHook *hook,
      gboolean may_be_in_call);

extern
gint g_hook_compare_ids (GHook *new_hook,
      GHook *sibling);





extern
void g_hook_list_invoke (GHookList *hook_list,
      gboolean may_recurse);



extern
void g_hook_list_invoke_check (GHookList *hook_list,
      gboolean may_recurse);


extern
void g_hook_list_marshal (GHookList *hook_list,
      gboolean may_recurse,
      GHookMarshaller marshaller,
      gpointer marshal_data);
extern
void g_hook_list_marshal_check (GHookList *hook_list,
      gboolean may_recurse,
      GHookCheckMarshaller marshaller,
      gpointer marshal_data);


# 53 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghostutils.h" 1
# 27 "/usr/include/glib-2.0/glib/ghostutils.h"


extern
gboolean g_hostname_is_non_ascii (const gchar *hostname);
extern
gboolean g_hostname_is_ascii_encoded (const gchar *hostname);
extern
gboolean g_hostname_is_ip_address (const gchar *hostname);

extern
gchar *g_hostname_to_ascii (const gchar *hostname);
extern
gchar *g_hostname_to_unicode (const gchar *hostname);


# 54 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/giochannel.h" 1
# 33 "/usr/include/glib-2.0/glib/giochannel.h"
# 1 "/usr/include/glib-2.0/glib/gmain.h" 1
# 25 "/usr/include/glib-2.0/glib/gmain.h"
# 1 "/usr/include/glib-2.0/glib/gpoll.h" 1
# 28 "/usr/include/glib-2.0/glib/gpoll.h"

# 59 "/usr/include/glib-2.0/glib/gpoll.h"
typedef struct _GPollFD GPollFD;
# 74 "/usr/include/glib-2.0/glib/gpoll.h"
typedef gint (*GPollFunc) (GPollFD *ufds,
                                 guint nfsd,
                                 gint timeout_);
# 91 "/usr/include/glib-2.0/glib/gpoll.h"
struct _GPollFD
{





  gint fd;

  gushort events;
  gushort revents;
};
# 112 "/usr/include/glib-2.0/glib/gpoll.h"
extern
gint
g_poll (GPollFD *fds,
 guint nfds,
 gint timeout);


# 26 "/usr/include/glib-2.0/glib/gmain.h" 2
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 35 "/usr/include/glib-2.0/glib/gslist.h"


typedef struct _GSList GSList;

struct _GSList
{
  gpointer data;
  GSList *next;
};



extern
GSList* g_slist_alloc (void) __attribute__((warn_unused_result));
extern
void g_slist_free (GSList *list);
extern
void g_slist_free_1 (GSList *list);

extern
void g_slist_free_full (GSList *list,
       GDestroyNotify free_func);
extern
GSList* g_slist_append (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_prepend (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert (GSList *list,
       gpointer data,
       gint position) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert_sorted (GSList *list,
       gpointer data,
       GCompareFunc func) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert_sorted_with_data (GSList *list,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
extern
GSList* g_slist_insert_before (GSList *slist,
       GSList *sibling,
       gpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_concat (GSList *list1,
       GSList *list2) __attribute__((warn_unused_result));
extern
GSList* g_slist_remove (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_remove_all (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
extern
GSList* g_slist_remove_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
extern
GSList* g_slist_delete_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
extern
GSList* g_slist_reverse (GSList *list) __attribute__((warn_unused_result));
extern
GSList* g_slist_copy (GSList *list) __attribute__((warn_unused_result));

extern
GSList* g_slist_copy_deep (GSList *list,
       GCopyFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
extern
GSList* g_slist_nth (GSList *list,
       guint n);
extern
GSList* g_slist_find (GSList *list,
       gconstpointer data);
extern
GSList* g_slist_find_custom (GSList *list,
       gconstpointer data,
       GCompareFunc func);
extern
gint g_slist_position (GSList *list,
       GSList *llink);
extern
gint g_slist_index (GSList *list,
       gconstpointer data);
extern
GSList* g_slist_last (GSList *list);
extern
guint g_slist_length (GSList *list);
extern
void g_slist_foreach (GSList *list,
       GFunc func,
       gpointer user_data);
extern
GSList* g_slist_sort (GSList *list,
       GCompareFunc compare_func) __attribute__((warn_unused_result));
extern
GSList* g_slist_sort_with_data (GSList *list,
       GCompareDataFunc compare_func,
       gpointer user_data) __attribute__((warn_unused_result));
extern
gpointer g_slist_nth_data (GSList *list,
       guint n);

extern
void g_clear_slist (GSList **slist_ptr,
                                          GDestroyNotify destroy);
# 162 "/usr/include/glib-2.0/glib/gslist.h"

# 27 "/usr/include/glib-2.0/glib/gmain.h" 2




typedef enum
{
  G_IO_IN =1,
  G_IO_OUT =4,
  G_IO_PRI =2,
  G_IO_ERR =8,
  G_IO_HUP =16,
  G_IO_NVAL =32
} GIOCondition;
# 54 "/usr/include/glib-2.0/glib/gmain.h"

typedef enum
{
  G_MAIN_CONTEXT_FLAGS_NONE = 0,
  G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1
} GMainContextFlags;
# 68 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GMainContext GMainContext;







typedef struct _GMainLoop GMainLoop;







typedef struct _GSource GSource;
typedef struct _GSourcePrivate GSourcePrivate;
# 97 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
# 153 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GSourceFuncs GSourceFuncs;
# 193 "/usr/include/glib-2.0/glib/gmain.h"
typedef gboolean (*GSourceFunc) (gpointer user_data);
# 228 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GChildWatchFunc) (GPid pid,
                                       gint wait_status,
                                       gpointer user_data);
# 242 "/usr/include/glib-2.0/glib/gmain.h"

typedef void (*GSourceDisposeFunc) (GSource *source);

struct _GSource
{

  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;

  const GSourceFuncs *source_funcs;
  guint ref_count;

  GMainContext *context;

  gint priority;
  guint flags;
  guint source_id;

  GSList *poll_fds;

  GSource *prev;
  GSource *next;

  char *name;

  GSourcePrivate *priv;
};

struct _GSourceCallbackFuncs
{
  void (*ref) (gpointer cb_data);
  void (*unref) (gpointer cb_data);
  void (*get) (gpointer cb_data,
                 GSource *source,
                 GSourceFunc *func,
                 gpointer *data);
};







typedef void (*GSourceDummyMarshal) (void);

struct _GSourceFuncs
{
  gboolean (*prepare) (GSource *source,
                        gint *timeout_);
  gboolean (*check) (GSource *source);
  gboolean (*dispatch) (GSource *source,
                        GSourceFunc callback,
                        gpointer user_data);
  void (*finalize) (GSource *source);



  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};
# 379 "/usr/include/glib-2.0/glib/gmain.h"
extern
GMainContext *g_main_context_new (void);

# 381 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 381 "/usr/include/glib-2.0/glib/gmain.h"

# 381 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 381 "/usr/include/glib-2.0/glib/gmain.h"

extern
GMainContext *g_main_context_new_with_flags (GMainContextFlags flags);

# 384 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 384 "/usr/include/glib-2.0/glib/gmain.h"

extern
GMainContext *g_main_context_ref (GMainContext *context);
extern
void g_main_context_unref (GMainContext *context);
extern
GMainContext *g_main_context_default (void);

extern
gboolean g_main_context_iteration (GMainContext *context,
                                        gboolean may_block);
extern
gboolean g_main_context_pending (GMainContext *context);



extern
GSource *g_main_context_find_source_by_id (GMainContext *context,
                                                             guint source_id);
extern
GSource *g_main_context_find_source_by_user_data (GMainContext *context,
                                                             gpointer user_data);
extern
GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
                                                             GSourceFuncs *funcs,
                                                             gpointer user_data);



extern
void g_main_context_wakeup (GMainContext *context);
extern
gboolean g_main_context_acquire (GMainContext *context);
extern
void g_main_context_release (GMainContext *context);
extern
gboolean g_main_context_is_owner (GMainContext *context);
__attribute__((__deprecated__("Use '" "g_main_context_is_owner" "' instead"))) extern
gboolean g_main_context_wait (GMainContext *context,
                                 GCond *cond,
                                 GMutex *mutex);

extern
gboolean g_main_context_prepare (GMainContext *context,
                                  gint *priority);
extern
gint g_main_context_query (GMainContext *context,
                                  gint max_priority,
                                  gint *timeout_,
                                  GPollFD *fds,
                                  gint n_fds);
extern
gboolean g_main_context_check (GMainContext *context,
                                      gint max_priority,
                                      GPollFD *fds,
                                      gint n_fds);
extern
void g_main_context_dispatch (GMainContext *context);

extern
void g_main_context_set_poll_func (GMainContext *context,
                                       GPollFunc func);
extern
GPollFunc g_main_context_get_poll_func (GMainContext *context);



extern
void g_main_context_add_poll (GMainContext *context,
                                     GPollFD *fd,
                                     gint priority);
extern
void g_main_context_remove_poll (GMainContext *context,
                                     GPollFD *fd);

extern
gint g_main_depth (void);
extern
GSource *g_main_current_source (void);



extern
void g_main_context_push_thread_default (GMainContext *context);
extern
void g_main_context_pop_thread_default (GMainContext *context);
extern
GMainContext *g_main_context_get_thread_default (void);
extern
GMainContext *g_main_context_ref_thread_default (void);
# 482 "/usr/include/glib-2.0/glib/gmain.h"
typedef void GMainContextPusher ;
# 529 "/usr/include/glib-2.0/glib/gmain.h"

# 529 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 529 "/usr/include/glib-2.0/glib/gmain.h"

# 529 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 529 "/usr/include/glib-2.0/glib/gmain.h"


static inline GMainContextPusher *
g_main_context_pusher_new (GMainContext *main_context)
{
  g_main_context_push_thread_default (main_context);
  return (GMainContextPusher *) main_context;
}

# 537 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 537 "/usr/include/glib-2.0/glib/gmain.h"

# 551 "/usr/include/glib-2.0/glib/gmain.h"

# 551 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 551 "/usr/include/glib-2.0/glib/gmain.h"

# 551 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 551 "/usr/include/glib-2.0/glib/gmain.h"


static inline void
g_main_context_pusher_free (GMainContextPusher *pusher)
{
  g_main_context_pop_thread_default ((GMainContext *) pusher);
}

# 558 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 558 "/usr/include/glib-2.0/glib/gmain.h"




extern
GMainLoop *g_main_loop_new (GMainContext *context,
                                   gboolean is_running);
extern
void g_main_loop_run (GMainLoop *loop);
extern
void g_main_loop_quit (GMainLoop *loop);
extern
GMainLoop *g_main_loop_ref (GMainLoop *loop);
extern
void g_main_loop_unref (GMainLoop *loop);
extern
gboolean g_main_loop_is_running (GMainLoop *loop);
extern
GMainContext *g_main_loop_get_context (GMainLoop *loop);



extern
GSource *g_source_new (GSourceFuncs *source_funcs,
                                   guint struct_size);


# 584 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 584 "/usr/include/glib-2.0/glib/gmain.h"

# 584 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 584 "/usr/include/glib-2.0/glib/gmain.h"

extern
void g_source_set_dispose_function (GSource *source,
                                        GSourceDisposeFunc dispose);

# 588 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 588 "/usr/include/glib-2.0/glib/gmain.h"


extern
GSource *g_source_ref (GSource *source);
extern
void g_source_unref (GSource *source);

extern
guint g_source_attach (GSource *source,
                                   GMainContext *context);
extern
void g_source_destroy (GSource *source);

extern
void g_source_set_priority (GSource *source,
                                   gint priority);
extern
gint g_source_get_priority (GSource *source);
extern
void g_source_set_can_recurse (GSource *source,
                                   gboolean can_recurse);
extern
gboolean g_source_get_can_recurse (GSource *source);
extern
guint g_source_get_id (GSource *source);

extern
GMainContext *g_source_get_context (GSource *source);

extern
void g_source_set_callback (GSource *source,
                                   GSourceFunc func,
                                   gpointer data,
                                   GDestroyNotify notify);

extern
void g_source_set_funcs (GSource *source,
                                   GSourceFuncs *funcs);
extern
gboolean g_source_is_destroyed (GSource *source);

extern
void g_source_set_name (GSource *source,
                                              const char *name);
extern
void g_source_set_static_name (GSource *source,
                                               const char *name);
extern
const char * g_source_get_name (GSource *source);
extern
void g_source_set_name_by_id (guint tag,
                                              const char *name);

extern
void g_source_set_ready_time (GSource *source,
                                              gint64 ready_time);
extern
gint64 g_source_get_ready_time (GSource *source);


extern
gpointer g_source_add_unix_fd (GSource *source,
                                              gint fd,
                                              GIOCondition events);
extern
void g_source_modify_unix_fd (GSource *source,
                                              gpointer tag,
                                              GIOCondition new_events);
extern
void g_source_remove_unix_fd (GSource *source,
                                              gpointer tag);
extern
GIOCondition g_source_query_unix_fd (GSource *source,
                                              gpointer tag);



extern
void g_source_set_callback_indirect (GSource *source,
                                     gpointer callback_data,
                                     GSourceCallbackFuncs *callback_funcs);

extern
void g_source_add_poll (GSource *source,
           GPollFD *fd);
extern
void g_source_remove_poll (GSource *source,
           GPollFD *fd);

extern
void g_source_add_child_source (GSource *source,
           GSource *child_source);
extern
void g_source_remove_child_source (GSource *source,
           GSource *child_source);


# 684 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 684 "/usr/include/glib-2.0/glib/gmain.h"

# 684 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 684 "/usr/include/glib-2.0/glib/gmain.h"

__attribute__((__deprecated__("Use '" "g_source_get_time" "' instead"))) extern
void g_source_get_current_time (GSource *source,
                                    GTimeVal *timeval);

# 688 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 688 "/usr/include/glib-2.0/glib/gmain.h"


extern
gint64 g_source_get_time (GSource *source);







extern
GSource *g_idle_source_new (void);
extern
GSource *g_child_watch_source_new (GPid pid);
extern
GSource *g_timeout_source_new (guint interval);
extern
GSource *g_timeout_source_new_seconds (guint interval);




# 710 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 710 "/usr/include/glib-2.0/glib/gmain.h"

# 710 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 710 "/usr/include/glib-2.0/glib/gmain.h"

__attribute__((__deprecated__("Use '" "g_get_real_time" "' instead"))) extern
void g_get_current_time (GTimeVal *result);

# 713 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 713 "/usr/include/glib-2.0/glib/gmain.h"


extern
gint64 g_get_monotonic_time (void);
extern
gint64 g_get_real_time (void);



extern
gboolean g_source_remove (guint tag);
extern
gboolean g_source_remove_by_user_data (gpointer user_data);
extern
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs,
                                              gpointer user_data);
# 741 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (* GClearHandleFunc) (guint handle_id);

extern
void g_clear_handle_id (guint *tag_ptr,
                           GClearHandleFunc clear_func);
# 763 "/usr/include/glib-2.0/glib/gmain.h"
extern
guint g_timeout_add_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
guint g_timeout_add (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
extern
guint g_timeout_add_seconds_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
guint g_timeout_add_seconds (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
extern
guint g_child_watch_add_full (gint priority,
                                     GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
guint g_child_watch_add (GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data);
extern
guint g_idle_add (GSourceFunc function,
                                     gpointer data);
extern
guint g_idle_add_full (gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
gboolean g_idle_remove_by_data (gpointer data);

extern
void g_main_context_invoke_full (GMainContext *context,
                                     gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
extern
void g_main_context_invoke (GMainContext *context,
                                     GSourceFunc function,
                                     gpointer data);


static inline int
g_steal_fd (int *fd_ptr)
{
  int fd = *fd_ptr;
  *fd_ptr = -1;
  return fd;
}


extern GSourceFuncs g_timeout_funcs;
extern GSourceFuncs g_child_watch_funcs;
extern GSourceFuncs g_idle_funcs;

extern GSourceFuncs g_unix_signal_funcs;
extern GSourceFuncs g_unix_fd_source_funcs;



# 34 "/usr/include/glib-2.0/glib/giochannel.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 33 "/usr/include/glib-2.0/glib/gstring.h"
# 1 "/usr/include/glib-2.0/glib/gunicode.h" 1
# 30 "/usr/include/glib-2.0/glib/gunicode.h"

# 59 "/usr/include/glib-2.0/glib/gunicode.h"
typedef guint32 gunichar;
# 77 "/usr/include/glib-2.0/glib/gunicode.h"
typedef guint16 gunichar2;
# 116 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_SPACING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;
# 213 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CLOSE_PARENTHESIS = G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
  G_UNICODE_BREAK_HEBREW_LETTER,
  G_UNICODE_BREAK_REGIONAL_INDICATOR,
  G_UNICODE_BREAK_EMOJI_BASE,
  G_UNICODE_BREAK_EMOJI_MODIFIER,
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER
} GUnicodeBreakType;
# 449 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum
{
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED,
  G_UNICODE_SCRIPT_ARABIC,
  G_UNICODE_SCRIPT_ARMENIAN,
  G_UNICODE_SCRIPT_BENGALI,
  G_UNICODE_SCRIPT_BOPOMOFO,
  G_UNICODE_SCRIPT_CHEROKEE,
  G_UNICODE_SCRIPT_COPTIC,
  G_UNICODE_SCRIPT_CYRILLIC,
  G_UNICODE_SCRIPT_DESERET,
  G_UNICODE_SCRIPT_DEVANAGARI,
  G_UNICODE_SCRIPT_ETHIOPIC,
  G_UNICODE_SCRIPT_GEORGIAN,
  G_UNICODE_SCRIPT_GOTHIC,
  G_UNICODE_SCRIPT_GREEK,
  G_UNICODE_SCRIPT_GUJARATI,
  G_UNICODE_SCRIPT_GURMUKHI,
  G_UNICODE_SCRIPT_HAN,
  G_UNICODE_SCRIPT_HANGUL,
  G_UNICODE_SCRIPT_HEBREW,
  G_UNICODE_SCRIPT_HIRAGANA,
  G_UNICODE_SCRIPT_KANNADA,
  G_UNICODE_SCRIPT_KATAKANA,
  G_UNICODE_SCRIPT_KHMER,
  G_UNICODE_SCRIPT_LAO,
  G_UNICODE_SCRIPT_LATIN,
  G_UNICODE_SCRIPT_MALAYALAM,
  G_UNICODE_SCRIPT_MONGOLIAN,
  G_UNICODE_SCRIPT_MYANMAR,
  G_UNICODE_SCRIPT_OGHAM,
  G_UNICODE_SCRIPT_OLD_ITALIC,
  G_UNICODE_SCRIPT_ORIYA,
  G_UNICODE_SCRIPT_RUNIC,
  G_UNICODE_SCRIPT_SINHALA,
  G_UNICODE_SCRIPT_SYRIAC,
  G_UNICODE_SCRIPT_TAMIL,
  G_UNICODE_SCRIPT_TELUGU,
  G_UNICODE_SCRIPT_THAANA,
  G_UNICODE_SCRIPT_THAI,
  G_UNICODE_SCRIPT_TIBETAN,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
  G_UNICODE_SCRIPT_YI,
  G_UNICODE_SCRIPT_TAGALOG,
  G_UNICODE_SCRIPT_HANUNOO,
  G_UNICODE_SCRIPT_BUHID,
  G_UNICODE_SCRIPT_TAGBANWA,


  G_UNICODE_SCRIPT_BRAILLE,
  G_UNICODE_SCRIPT_CYPRIOT,
  G_UNICODE_SCRIPT_LIMBU,
  G_UNICODE_SCRIPT_OSMANYA,
  G_UNICODE_SCRIPT_SHAVIAN,
  G_UNICODE_SCRIPT_LINEAR_B,
  G_UNICODE_SCRIPT_TAI_LE,
  G_UNICODE_SCRIPT_UGARITIC,


  G_UNICODE_SCRIPT_NEW_TAI_LUE,
  G_UNICODE_SCRIPT_BUGINESE,
  G_UNICODE_SCRIPT_GLAGOLITIC,
  G_UNICODE_SCRIPT_TIFINAGH,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,
  G_UNICODE_SCRIPT_OLD_PERSIAN,
  G_UNICODE_SCRIPT_KHAROSHTHI,


  G_UNICODE_SCRIPT_UNKNOWN,
  G_UNICODE_SCRIPT_BALINESE,
  G_UNICODE_SCRIPT_CUNEIFORM,
  G_UNICODE_SCRIPT_PHOENICIAN,
  G_UNICODE_SCRIPT_PHAGS_PA,
  G_UNICODE_SCRIPT_NKO,


  G_UNICODE_SCRIPT_KAYAH_LI,
  G_UNICODE_SCRIPT_LEPCHA,
  G_UNICODE_SCRIPT_REJANG,
  G_UNICODE_SCRIPT_SUNDANESE,
  G_UNICODE_SCRIPT_SAURASHTRA,
  G_UNICODE_SCRIPT_CHAM,
  G_UNICODE_SCRIPT_OL_CHIKI,
  G_UNICODE_SCRIPT_VAI,
  G_UNICODE_SCRIPT_CARIAN,
  G_UNICODE_SCRIPT_LYCIAN,
  G_UNICODE_SCRIPT_LYDIAN,


  G_UNICODE_SCRIPT_AVESTAN,
  G_UNICODE_SCRIPT_BAMUM,
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN,
  G_UNICODE_SCRIPT_JAVANESE,
  G_UNICODE_SCRIPT_KAITHI,
  G_UNICODE_SCRIPT_LISU,
  G_UNICODE_SCRIPT_MEETEI_MAYEK,
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_TURKIC,
  G_UNICODE_SCRIPT_SAMARITAN,
  G_UNICODE_SCRIPT_TAI_THAM,
  G_UNICODE_SCRIPT_TAI_VIET,


  G_UNICODE_SCRIPT_BATAK,
  G_UNICODE_SCRIPT_BRAHMI,
  G_UNICODE_SCRIPT_MANDAIC,


  G_UNICODE_SCRIPT_CHAKMA,
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE,
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,
  G_UNICODE_SCRIPT_MIAO,
  G_UNICODE_SCRIPT_SHARADA,
  G_UNICODE_SCRIPT_SORA_SOMPENG,
  G_UNICODE_SCRIPT_TAKRI,


  G_UNICODE_SCRIPT_BASSA_VAH,
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,
  G_UNICODE_SCRIPT_DUPLOYAN,
  G_UNICODE_SCRIPT_ELBASAN,
  G_UNICODE_SCRIPT_GRANTHA,
  G_UNICODE_SCRIPT_KHOJKI,
  G_UNICODE_SCRIPT_KHUDAWADI,
  G_UNICODE_SCRIPT_LINEAR_A,
  G_UNICODE_SCRIPT_MAHAJANI,
  G_UNICODE_SCRIPT_MANICHAEAN,
  G_UNICODE_SCRIPT_MENDE_KIKAKUI,
  G_UNICODE_SCRIPT_MODI,
  G_UNICODE_SCRIPT_MRO,
  G_UNICODE_SCRIPT_NABATAEAN,
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_PERMIC,
  G_UNICODE_SCRIPT_PAHAWH_HMONG,
  G_UNICODE_SCRIPT_PALMYRENE,
  G_UNICODE_SCRIPT_PAU_CIN_HAU,
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI,
  G_UNICODE_SCRIPT_SIDDHAM,
  G_UNICODE_SCRIPT_TIRHUTA,
  G_UNICODE_SCRIPT_WARANG_CITI,


  G_UNICODE_SCRIPT_AHOM,
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_HATRAN,
  G_UNICODE_SCRIPT_MULTANI,
  G_UNICODE_SCRIPT_OLD_HUNGARIAN,
  G_UNICODE_SCRIPT_SIGNWRITING,


  G_UNICODE_SCRIPT_ADLAM,
  G_UNICODE_SCRIPT_BHAIKSUKI,
  G_UNICODE_SCRIPT_MARCHEN,
  G_UNICODE_SCRIPT_NEWA,
  G_UNICODE_SCRIPT_OSAGE,
  G_UNICODE_SCRIPT_TANGUT,


  G_UNICODE_SCRIPT_MASARAM_GONDI,
  G_UNICODE_SCRIPT_NUSHU,
  G_UNICODE_SCRIPT_SOYOMBO,
  G_UNICODE_SCRIPT_ZANABAZAR_SQUARE,


  G_UNICODE_SCRIPT_DOGRA,
  G_UNICODE_SCRIPT_GUNJALA_GONDI,
  G_UNICODE_SCRIPT_HANIFI_ROHINGYA,
  G_UNICODE_SCRIPT_MAKASAR,
  G_UNICODE_SCRIPT_MEDEFAIDRIN,
  G_UNICODE_SCRIPT_OLD_SOGDIAN,
  G_UNICODE_SCRIPT_SOGDIAN,


  G_UNICODE_SCRIPT_ELYMAIC,
  G_UNICODE_SCRIPT_NANDINAGARI,
  G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG,
  G_UNICODE_SCRIPT_WANCHO,


  G_UNICODE_SCRIPT_CHORASMIAN,
  G_UNICODE_SCRIPT_DIVES_AKURU,
  G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT,
  G_UNICODE_SCRIPT_YEZIDI,


  G_UNICODE_SCRIPT_CYPRO_MINOAN,
  G_UNICODE_SCRIPT_OLD_UYGHUR,
  G_UNICODE_SCRIPT_TANGSA,
  G_UNICODE_SCRIPT_TOTO,
  G_UNICODE_SCRIPT_VITHKUQI,


  G_UNICODE_SCRIPT_MATH,
} GUnicodeScript;

extern
guint32 g_unicode_script_to_iso15924 (GUnicodeScript script);
extern
GUnicodeScript g_unicode_script_from_iso15924 (guint32 iso15924);



extern
gboolean g_unichar_isalnum (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isalpha (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_iscntrl (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isdigit (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isgraph (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_islower (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isprint (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_ispunct (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isspace (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isupper (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isxdigit (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_istitle (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_isdefined (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_iswide (gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_iswide_cjk(gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_iszerowidth(gunichar c) __attribute__ ((__const__));
extern
gboolean g_unichar_ismark (gunichar c) __attribute__ ((__const__));



extern
gunichar g_unichar_toupper (gunichar c) __attribute__ ((__const__));
extern
gunichar g_unichar_tolower (gunichar c) __attribute__ ((__const__));
extern
gunichar g_unichar_totitle (gunichar c) __attribute__ ((__const__));



extern
gint g_unichar_digit_value (gunichar c) __attribute__ ((__const__));

extern
gint g_unichar_xdigit_value (gunichar c) __attribute__ ((__const__));


extern
GUnicodeType g_unichar_type (gunichar c) __attribute__ ((__const__));


extern
GUnicodeBreakType g_unichar_break_type (gunichar c) __attribute__ ((__const__));


extern
gint g_unichar_combining_class (gunichar uc) __attribute__ ((__const__));

extern
gboolean g_unichar_get_mirror_char (gunichar ch,
                                    gunichar *mirrored_ch);

extern
GUnicodeScript g_unichar_get_script (gunichar ch) __attribute__ ((__const__));


extern
gboolean g_unichar_validate (gunichar ch) __attribute__ ((__const__));


extern
gboolean g_unichar_compose (gunichar a,
                            gunichar b,
                            gunichar *ch);
extern
gboolean g_unichar_decompose (gunichar ch,
                              gunichar *a,
                              gunichar *b);

extern
gsize g_unichar_fully_decompose (gunichar ch,
                                 gboolean compat,
                                 gunichar *result,
                                 gsize result_len);
# 762 "/usr/include/glib-2.0/glib/gunicode.h"
extern
void g_unicode_canonical_ordering (gunichar *string,
                                   gsize len);


__attribute__((__deprecated__)) extern
gunichar *g_unicode_canonical_decomposition (gunichar ch,
                                             gsize *result_len) __attribute__ ((__malloc__));



extern const gchar * const g_utf8_skip;
# 793 "/usr/include/glib-2.0/glib/gunicode.h"
extern
gunichar g_utf8_get_char (const gchar *p) __attribute__((__pure__));
extern
gunichar g_utf8_get_char_validated (const gchar *p,
                                    gssize max_len) __attribute__((__pure__));

extern
gchar* g_utf8_offset_to_pointer (const gchar *str,
                                   glong offset) __attribute__((__pure__));
extern
glong g_utf8_pointer_to_offset (const gchar *str,
                                   const gchar *pos) __attribute__((__pure__));
extern
gchar* g_utf8_prev_char (const gchar *p) __attribute__((__pure__));
extern
gchar* g_utf8_find_next_char (const gchar *p,
                                   const gchar *end) __attribute__((__pure__));
extern
gchar* g_utf8_find_prev_char (const gchar *str,
                                   const gchar *p) __attribute__((__pure__));

extern
glong g_utf8_strlen (const gchar *p,
                                   gssize max) __attribute__((__pure__));

extern
gchar *g_utf8_substring (const gchar *str,
                                   glong start_pos,
                                   glong end_pos) __attribute__ ((__malloc__));

extern
gchar *g_utf8_strncpy (gchar *dest,
                                   const gchar *src,
                                   gsize n);



extern
gchar* g_utf8_strchr (const gchar *p,
                       gssize len,
                       gunichar c);
extern
gchar* g_utf8_strrchr (const gchar *p,
                       gssize len,
                       gunichar c);
extern
gchar* g_utf8_strreverse (const gchar *str,
                          gssize len);

extern
gunichar2 *g_utf8_to_utf16 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
extern
gunichar * g_utf8_to_ucs4 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
extern
gunichar * g_utf8_to_ucs4_fast (const gchar *str,
                                glong len,
                                glong *items_written) __attribute__ ((__malloc__));
extern
gunichar * g_utf16_to_ucs4 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
extern
gchar* g_utf16_to_utf8 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
extern
gunichar2 *g_ucs4_to_utf16 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
extern
gchar* g_ucs4_to_utf8 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));

extern
gint g_unichar_to_utf8 (gunichar c,
                             gchar *outbuf);

extern
gboolean g_utf8_validate (const gchar *str,
                          gssize max_len,
                          const gchar **end);
extern
gboolean g_utf8_validate_len (const gchar *str,
                              gsize max_len,
                              const gchar **end);

extern
gchar *g_utf8_strup (const gchar *str,
                       gssize len) __attribute__ ((__malloc__));
extern
gchar *g_utf8_strdown (const gchar *str,
                       gssize len) __attribute__ ((__malloc__));
extern
gchar *g_utf8_casefold (const gchar *str,
                        gssize len) __attribute__ ((__malloc__));
# 930 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;

extern
gchar *g_utf8_normalize (const gchar *str,
                         gssize len,
                         GNormalizeMode mode) __attribute__ ((__malloc__));

extern
gint g_utf8_collate (const gchar *str1,
                           const gchar *str2) __attribute__((__pure__));
extern
gchar *g_utf8_collate_key (const gchar *str,
                           gssize len) __attribute__ ((__malloc__));
extern
gchar *g_utf8_collate_key_for_filename (const gchar *str,
                                        gssize len) __attribute__ ((__malloc__));

extern
gchar *g_utf8_make_valid (const gchar *str,
                          gssize len) __attribute__ ((__malloc__));


# 34 "/usr/include/glib-2.0/glib/gstring.h" 2





typedef struct _GString GString;

struct _GString
{
  gchar *str;
  gsize len;
  gsize allocated_len;
};

extern
GString* g_string_new (const gchar *init);
extern
GString* g_string_new_len (const gchar *init,
                                         gssize len);
extern
GString* g_string_sized_new (gsize dfl_size);
extern
gchar* g_string_free (GString *string,
                                         gboolean free_segment);
extern
GBytes* g_string_free_to_bytes (GString *string);
extern
gboolean g_string_equal (const GString *v,
                                         const GString *v2);
extern
guint g_string_hash (const GString *str);
extern
GString* g_string_assign (GString *string,
                                         const gchar *rval);
extern
GString* g_string_truncate (GString *string,
                                         gsize len);
extern
GString* g_string_set_size (GString *string,
                                         gsize len);
extern
GString* g_string_insert_len (GString *string,
                                         gssize pos,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_append (GString *string,
                                         const gchar *val);
extern
GString* g_string_append_len (GString *string,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_append_c (GString *string,
                                         gchar c);
extern
GString* g_string_append_unichar (GString *string,
                                         gunichar wc);
extern
GString* g_string_prepend (GString *string,
                                         const gchar *val);
extern
GString* g_string_prepend_c (GString *string,
                                         gchar c);
extern
GString* g_string_prepend_unichar (GString *string,
                                         gunichar wc);
extern
GString* g_string_prepend_len (GString *string,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_insert (GString *string,
                                         gssize pos,
                                         const gchar *val);
extern
GString* g_string_insert_c (GString *string,
                                         gssize pos,
                                         gchar c);
extern
GString* g_string_insert_unichar (GString *string,
                                         gssize pos,
                                         gunichar wc);
extern
GString* g_string_overwrite (GString *string,
                                         gsize pos,
                                         const gchar *val);
extern
GString* g_string_overwrite_len (GString *string,
                                         gsize pos,
                                         const gchar *val,
                                         gssize len);
extern
GString* g_string_erase (GString *string,
                                         gssize pos,
                                         gssize len);
extern
guint g_string_replace (GString *string,
                                         const gchar *find,
                                         const gchar *replace,
                                         guint limit);
extern
GString* g_string_ascii_down (GString *string);
extern
GString* g_string_ascii_up (GString *string);
extern
void g_string_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (gnu_printf, 2, 0)));
extern
void g_string_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (gnu_printf, 2, 3)));
extern
void g_string_append_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (gnu_printf, 2, 0)));
extern
void g_string_append_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (gnu_printf, 2, 3)));
extern
GString* g_string_append_uri_escaped (GString *string,
                                          const gchar *unescaped,
                                          const gchar *reserved_chars_allowed,
                                          gboolean allow_utf8);



static inline GString*
g_string_append_c_inline (GString *gstring,
                          gchar c)
{
  if (gstring->len + 1 < gstring->allocated_len)
    {
      gstring->str[gstring->len++] = c;
      gstring->str[gstring->len] = 0;
    }
  else
    g_string_insert_c (gstring, -1, c);
  return gstring;
}




__attribute__((__deprecated__)) extern
GString *g_string_down (GString *string);
__attribute__((__deprecated__)) extern
GString *g_string_up (GString *string);





# 35 "/usr/include/glib-2.0/glib/giochannel.h" 2






typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;

typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;



typedef enum
{

  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,

  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;

typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;

typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;

typedef enum
{
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITABLE = 1 << 3,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;

struct _GIOChannel
{

  gint ref_count;
  GIOFuncs *funcs;

  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;

  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];



  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;

  gpointer reserved1;
  gpointer reserved2;
};

typedef gboolean (*GIOFunc) (GIOChannel *source,
        GIOCondition condition,
        gpointer data);
struct _GIOFuncs
{
  GIOStatus (*io_read) (GIOChannel *channel,
             gchar *buf,
      gsize count,
      gsize *bytes_read,
      GError **err);
  GIOStatus (*io_write) (GIOChannel *channel,
      const gchar *buf,
      gsize count,
      gsize *bytes_written,
      GError **err);
  GIOStatus (*io_seek) (GIOChannel *channel,
      gint64 offset,
      GSeekType type,
      GError **err);
  GIOStatus (*io_close) (GIOChannel *channel,
      GError **err);
  GSource* (*io_create_watch) (GIOChannel *channel,
      GIOCondition condition);
  void (*io_free) (GIOChannel *channel);
  GIOStatus (*io_set_flags) (GIOChannel *channel,
                                  GIOFlags flags,
      GError **err);
  GIOFlags (*io_get_flags) (GIOChannel *channel);
};

extern
void g_io_channel_init (GIOChannel *channel);
extern
GIOChannel *g_io_channel_ref (GIOChannel *channel);
extern
void g_io_channel_unref (GIOChannel *channel);

__attribute__((__deprecated__("Use '" "g_io_channel_read_chars" "' instead"))) extern
GIOError g_io_channel_read (GIOChannel *channel,
                                 gchar *buf,
                                 gsize count,
                                 gsize *bytes_read);

__attribute__((__deprecated__("Use '" "g_io_channel_write_chars" "' instead"))) extern
GIOError g_io_channel_write (GIOChannel *channel,
                                 const gchar *buf,
                                 gsize count,
                                 gsize *bytes_written);

__attribute__((__deprecated__("Use '" "g_io_channel_seek_position" "' instead"))) extern
GIOError g_io_channel_seek (GIOChannel *channel,
                                 gint64 offset,
                                 GSeekType type);

__attribute__((__deprecated__("Use '" "g_io_channel_shutdown" "' instead"))) extern
void g_io_channel_close (GIOChannel *channel);

extern
GIOStatus g_io_channel_shutdown (GIOChannel *channel,
     gboolean flush,
     GError **err);
extern
guint g_io_add_watch_full (GIOChannel *channel,
     gint priority,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data,
     GDestroyNotify notify);
extern
GSource * g_io_create_watch (GIOChannel *channel,
     GIOCondition condition);
extern
guint g_io_add_watch (GIOChannel *channel,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data);




extern
void g_io_channel_set_buffer_size (GIOChannel *channel,
        gsize size);
extern
gsize g_io_channel_get_buffer_size (GIOChannel *channel);
extern
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);
extern
GIOStatus g_io_channel_set_flags (GIOChannel *channel,
        GIOFlags flags,
        GError **error);
extern
GIOFlags g_io_channel_get_flags (GIOChannel *channel);
extern
void g_io_channel_set_line_term (GIOChannel *channel,
        const gchar *line_term,
        gint length);
extern
const gchar * g_io_channel_get_line_term (GIOChannel *channel,
        gint *length);
extern
void g_io_channel_set_buffered (GIOChannel *channel,
        gboolean buffered);
extern
gboolean g_io_channel_get_buffered (GIOChannel *channel);
extern
GIOStatus g_io_channel_set_encoding (GIOChannel *channel,
        const gchar *encoding,
        GError **error);
extern
const gchar * g_io_channel_get_encoding (GIOChannel *channel);
extern
void g_io_channel_set_close_on_unref (GIOChannel *channel,
        gboolean do_close);
extern
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);


extern
GIOStatus g_io_channel_flush (GIOChannel *channel,
        GError **error);
extern
GIOStatus g_io_channel_read_line (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        gsize *terminator_pos,
        GError **error);
extern
GIOStatus g_io_channel_read_line_string (GIOChannel *channel,
        GString *buffer,
        gsize *terminator_pos,
        GError **error);
extern
GIOStatus g_io_channel_read_to_end (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        GError **error);
extern
GIOStatus g_io_channel_read_chars (GIOChannel *channel,
        gchar *buf,
        gsize count,
        gsize *bytes_read,
        GError **error);
extern
GIOStatus g_io_channel_read_unichar (GIOChannel *channel,
        gunichar *thechar,
        GError **error);
extern
GIOStatus g_io_channel_write_chars (GIOChannel *channel,
        const gchar *buf,
        gssize count,
        gsize *bytes_written,
        GError **error);
extern
GIOStatus g_io_channel_write_unichar (GIOChannel *channel,
        gunichar thechar,
        GError **error);
extern
GIOStatus g_io_channel_seek_position (GIOChannel *channel,
        gint64 offset,
        GSeekType type,
        GError **error);
extern
GIOChannel* g_io_channel_new_file (const gchar *filename,
        const gchar *mode,
        GError **error);



extern
GQuark g_io_channel_error_quark (void);
extern
GIOChannelError g_io_channel_error_from_errno (gint en);
# 320 "/usr/include/glib-2.0/glib/giochannel.h"
extern
GIOChannel* g_io_channel_unix_new (int fd);
extern
gint g_io_channel_unix_get_fd (GIOChannel *channel);



extern GSourceFuncs g_io_watch_funcs;
# 402 "/usr/include/glib-2.0/glib/giochannel.h"

# 55 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gkeyfile.h" 1
# 31 "/usr/include/glib-2.0/glib/gkeyfile.h"


typedef enum
{
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;



extern
GQuark g_key_file_error_quark (void);

typedef struct _GKeyFile GKeyFile;

typedef enum
{
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;

extern
GKeyFile *g_key_file_new (void);
extern
GKeyFile *g_key_file_ref (GKeyFile *key_file);
extern
void g_key_file_unref (GKeyFile *key_file);
extern
void g_key_file_free (GKeyFile *key_file);
extern
void g_key_file_set_list_separator (GKeyFile *key_file,
          gchar separator);
extern
gboolean g_key_file_load_from_file (GKeyFile *key_file,
          const gchar *file,
          GKeyFileFlags flags,
          GError **error);
extern
gboolean g_key_file_load_from_data (GKeyFile *key_file,
          const gchar *data,
          gsize length,
          GKeyFileFlags flags,
          GError **error);
extern
gboolean g_key_file_load_from_bytes (GKeyFile *key_file,
                                             GBytes *bytes,
                                             GKeyFileFlags flags,
                                             GError **error);
extern
gboolean g_key_file_load_from_dirs (GKeyFile *key_file,
          const gchar *file,
          const gchar **search_dirs,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
extern
gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file,
          const gchar *file,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
extern
gchar *g_key_file_to_data (GKeyFile *key_file,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
extern
gboolean g_key_file_save_to_file (GKeyFile *key_file,
                                             const gchar *filename,
                                             GError **error);
extern
gchar *g_key_file_get_start_group (GKeyFile *key_file) __attribute__ ((__malloc__));
extern
gchar **g_key_file_get_groups (GKeyFile *key_file,
          gsize *length);
extern
gchar **g_key_file_get_keys (GKeyFile *key_file,
          const gchar *group_name,
          gsize *length,
          GError **error);
extern
gboolean g_key_file_has_group (GKeyFile *key_file,
          const gchar *group_name);
extern
gboolean g_key_file_has_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
gchar *g_key_file_get_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__ ((__malloc__));
extern
void g_key_file_set_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *value);
extern
gchar *g_key_file_get_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__ ((__malloc__));
extern
void g_key_file_set_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *string);
extern
gchar *g_key_file_get_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          GError **error) __attribute__ ((__malloc__));
extern
gchar *g_key_file_get_locale_for_key (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *locale) __attribute__ ((__malloc__));
extern
void g_key_file_set_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar *string);
extern
gboolean g_key_file_get_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean value);
extern
gint g_key_file_get_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint value);
extern
gint64 g_key_file_get_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint64 value);
extern
guint64 g_key_file_get_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
void g_key_file_set_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          guint64 value);
extern
gdouble g_key_file_get_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error);
extern
void g_key_file_set_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble value);
extern
gchar **g_key_file_get_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error);
extern
void g_key_file_set_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar * const list[],
          gsize length);
extern
gchar **g_key_file_get_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          gsize *length,
          GError **error);
extern
void g_key_file_set_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar * const list[],
          gsize length);
extern
gboolean *g_key_file_get_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
extern
void g_key_file_set_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean list[],
          gsize length);
extern
gint *g_key_file_get_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
extern
void g_key_file_set_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble list[],
                                             gsize length);
extern
gdouble *g_key_file_get_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gsize *length,
                                             GError **error) __attribute__ ((__malloc__));
extern
void g_key_file_set_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint list[],
          gsize length);
extern
gboolean g_key_file_set_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *comment,
                                             GError **error);
extern
gchar *g_key_file_get_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error) __attribute__ ((__malloc__));

extern
gboolean g_key_file_remove_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
          GError **error);
extern
gboolean g_key_file_remove_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
extern
gboolean g_key_file_remove_group (GKeyFile *key_file,
          const gchar *group_name,
          GError **error);
# 328 "/usr/include/glib-2.0/glib/gkeyfile.h"

# 56 "/usr/include/glib-2.0/glib.h" 2



# 1 "/usr/include/glib-2.0/glib/gmappedfile.h" 1
# 30 "/usr/include/glib-2.0/glib/gmappedfile.h"


typedef struct _GMappedFile GMappedFile;

extern
GMappedFile *g_mapped_file_new (const gchar *filename,
             gboolean writable,
             GError **error);
extern
GMappedFile *g_mapped_file_new_from_fd (gint fd,
      gboolean writable,
      GError **error);
extern
gsize g_mapped_file_get_length (GMappedFile *file);
extern
gchar *g_mapped_file_get_contents (GMappedFile *file);
extern
GBytes * g_mapped_file_get_bytes (GMappedFile *file);
extern
GMappedFile *g_mapped_file_ref (GMappedFile *file);
extern
void g_mapped_file_unref (GMappedFile *file);

__attribute__((__deprecated__("Use '" "g_mapped_file_unref" "' instead"))) extern
void g_mapped_file_free (GMappedFile *file);


# 60 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmarkup.h" 1
# 31 "/usr/include/glib-2.0/glib/gmarkup.h"

# 49 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,



  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;
# 72 "/usr/include/glib-2.0/glib/gmarkup.h"
extern
GQuark g_markup_error_quark (void);
# 95 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef enum
{
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION = 1 << 2,
  G_MARKUP_IGNORE_QUALIFIED = 1 << 3
} GMarkupParseFlags;
# 112 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;
# 143 "/usr/include/glib-2.0/glib/gmarkup.h"
struct _GMarkupParser
{

  void (*start_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          const gchar **attribute_names,
                          const gchar **attribute_values,
                          gpointer user_data,
                          GError **error);


  void (*end_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          gpointer user_data,
                          GError **error);



  void (*text) (GMarkupParseContext *context,
                          const gchar *text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);






  void (*passthrough) (GMarkupParseContext *context,
                          const gchar *passthrough_text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);




  void (*error) (GMarkupParseContext *context,
                          GError *error,
                          gpointer user_data);
};

extern
GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser,
                                                   GMarkupParseFlags flags,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_dnotify);
extern
GMarkupParseContext *g_markup_parse_context_ref (GMarkupParseContext *context);
extern
void g_markup_parse_context_unref (GMarkupParseContext *context);
extern
void g_markup_parse_context_free (GMarkupParseContext *context);
extern
gboolean g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar *text,
                                                   gssize text_len,
                                                   GError **error);
extern
void g_markup_parse_context_push (GMarkupParseContext *context,
                                                   const GMarkupParser *parser,
                                                   gpointer user_data);
extern
gpointer g_markup_parse_context_pop (GMarkupParseContext *context);

extern
gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError **error);
extern
const gchar * g_markup_parse_context_get_element (GMarkupParseContext *context);
extern
const GSList * g_markup_parse_context_get_element_stack (GMarkupParseContext *context);


extern
void g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint *line_number,
                                                          gint *char_number);
extern
gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);


extern
gchar* g_markup_escape_text (const gchar *text,
                             gssize length);

extern
gchar *g_markup_printf_escaped (const char *format,
    ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
gchar *g_markup_vprintf_escaped (const char *format,
     va_list args) __attribute__((__format__ (gnu_printf, 1, 0)));

typedef enum
{
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,

  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;



extern
gboolean g_markup_collect_attributes (const gchar *element_name,
                                        const gchar **attribute_names,
                                        const gchar **attribute_values,
                                        GError **error,
                                        GMarkupCollectType first_type,
                                        const gchar *first_attr,
                                        ...);


# 61 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gmessages.h" 1
# 36 "/usr/include/glib-2.0/glib/gmessages.h"
# 1 "/usr/include/glib-2.0/glib/gvariant.h" 1
# 28 "/usr/include/glib-2.0/glib/gvariant.h"
# 1 "/usr/include/glib-2.0/glib/gvarianttype.h" 1
# 30 "/usr/include/glib-2.0/glib/gvarianttype.h"

# 41 "/usr/include/glib-2.0/glib/gvarianttype.h"
typedef struct _GVariantType GVariantType;
# 295 "/usr/include/glib-2.0/glib/gvarianttype.h"
extern
gboolean g_variant_type_string_is_valid (const gchar *type_string);
extern
gboolean g_variant_type_string_scan (const gchar *string,
                                                                         const gchar *limit,
                                                                         const gchar **endptr);


extern
void g_variant_type_free (GVariantType *type);
extern
GVariantType * g_variant_type_copy (const GVariantType *type);
extern
GVariantType * g_variant_type_new (const gchar *type_string);


extern
gsize g_variant_type_get_string_length (const GVariantType *type);
extern
const gchar * g_variant_type_peek_string (const GVariantType *type);
extern
gchar * g_variant_type_dup_string (const GVariantType *type);


extern
gboolean g_variant_type_is_definite (const GVariantType *type);
extern
gboolean g_variant_type_is_container (const GVariantType *type);
extern
gboolean g_variant_type_is_basic (const GVariantType *type);
extern
gboolean g_variant_type_is_maybe (const GVariantType *type);
extern
gboolean g_variant_type_is_array (const GVariantType *type);
extern
gboolean g_variant_type_is_tuple (const GVariantType *type);
extern
gboolean g_variant_type_is_dict_entry (const GVariantType *type);
extern
gboolean g_variant_type_is_variant (const GVariantType *type);


extern
guint g_variant_type_hash (gconstpointer type);
extern
gboolean g_variant_type_equal (gconstpointer type1,
                                                                         gconstpointer type2);


extern
gboolean g_variant_type_is_subtype_of (const GVariantType *type,
                                                                         const GVariantType *supertype);


extern
const GVariantType * g_variant_type_element (const GVariantType *type);
extern
const GVariantType * g_variant_type_first (const GVariantType *type);
extern
const GVariantType * g_variant_type_next (const GVariantType *type);
extern
gsize g_variant_type_n_items (const GVariantType *type);
extern
const GVariantType * g_variant_type_key (const GVariantType *type);
extern
const GVariantType * g_variant_type_value (const GVariantType *type);


extern
GVariantType * g_variant_type_new_array (const GVariantType *element);
extern
GVariantType * g_variant_type_new_maybe (const GVariantType *element);
extern
GVariantType * g_variant_type_new_tuple (const GVariantType * const *items,
                                                                         gint length);
extern
GVariantType * g_variant_type_new_dict_entry (const GVariantType *key,
                                                                         const GVariantType *value);


extern
const GVariantType * g_variant_type_checked_ (const gchar *);
extern
gsize g_variant_type_string_get_depth_ (const gchar *type_string);


# 29 "/usr/include/glib-2.0/glib/gvariant.h" 2





typedef struct _GVariant GVariant;

typedef enum
{
  G_VARIANT_CLASS_BOOLEAN = 'b',
  G_VARIANT_CLASS_BYTE = 'y',
  G_VARIANT_CLASS_INT16 = 'n',
  G_VARIANT_CLASS_UINT16 = 'q',
  G_VARIANT_CLASS_INT32 = 'i',
  G_VARIANT_CLASS_UINT32 = 'u',
  G_VARIANT_CLASS_INT64 = 'x',
  G_VARIANT_CLASS_UINT64 = 't',
  G_VARIANT_CLASS_HANDLE = 'h',
  G_VARIANT_CLASS_DOUBLE = 'd',
  G_VARIANT_CLASS_STRING = 's',
  G_VARIANT_CLASS_OBJECT_PATH = 'o',
  G_VARIANT_CLASS_SIGNATURE = 'g',
  G_VARIANT_CLASS_VARIANT = 'v',
  G_VARIANT_CLASS_MAYBE = 'm',
  G_VARIANT_CLASS_ARRAY = 'a',
  G_VARIANT_CLASS_TUPLE = '(',
  G_VARIANT_CLASS_DICT_ENTRY = '{'
} GVariantClass;

extern
void g_variant_unref (GVariant *value);
extern
GVariant * g_variant_ref (GVariant *value);
extern
GVariant * g_variant_ref_sink (GVariant *value);
extern
gboolean g_variant_is_floating (GVariant *value);
extern
GVariant * g_variant_take_ref (GVariant *value);

extern
const GVariantType * g_variant_get_type (GVariant *value);
extern
const gchar * g_variant_get_type_string (GVariant *value);
extern
gboolean g_variant_is_of_type (GVariant *value,
                                                                         const GVariantType *type);
extern
gboolean g_variant_is_container (GVariant *value);
extern
GVariantClass g_variant_classify (GVariant *value);
extern
GVariant * g_variant_new_boolean (gboolean value);
extern
GVariant * g_variant_new_byte (guint8 value);
extern
GVariant * g_variant_new_int16 (gint16 value);
extern
GVariant * g_variant_new_uint16 (guint16 value);
extern
GVariant * g_variant_new_int32 (gint32 value);
extern
GVariant * g_variant_new_uint32 (guint32 value);
extern
GVariant * g_variant_new_int64 (gint64 value);
extern
GVariant * g_variant_new_uint64 (guint64 value);
extern
GVariant * g_variant_new_handle (gint32 value);
extern
GVariant * g_variant_new_double (gdouble value);
extern
GVariant * g_variant_new_string (const gchar *string);
extern
GVariant * g_variant_new_take_string (gchar *string);
extern
GVariant * g_variant_new_printf (const gchar *format_string,
                                                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
GVariant * g_variant_new_object_path (const gchar *object_path);
extern
gboolean g_variant_is_object_path (const gchar *string);
extern
GVariant * g_variant_new_signature (const gchar *signature);
extern
gboolean g_variant_is_signature (const gchar *string);
extern
GVariant * g_variant_new_variant (GVariant *value);
extern
GVariant * g_variant_new_strv (const gchar * const *strv,
                                                                         gssize length);
extern
GVariant * g_variant_new_objv (const gchar * const *strv,
                                                                         gssize length);
extern
GVariant * g_variant_new_bytestring (const gchar *string);
extern
GVariant * g_variant_new_bytestring_array (const gchar * const *strv,
                                                                         gssize length);
extern
GVariant * g_variant_new_fixed_array (const GVariantType *element_type,
                                                                         gconstpointer elements,
                                                                         gsize n_elements,
                                                                         gsize element_size);
extern
gboolean g_variant_get_boolean (GVariant *value);
extern
guint8 g_variant_get_byte (GVariant *value);
extern
gint16 g_variant_get_int16 (GVariant *value);
extern
guint16 g_variant_get_uint16 (GVariant *value);
extern
gint32 g_variant_get_int32 (GVariant *value);
extern
guint32 g_variant_get_uint32 (GVariant *value);
extern
gint64 g_variant_get_int64 (GVariant *value);
extern
guint64 g_variant_get_uint64 (GVariant *value);
extern
gint32 g_variant_get_handle (GVariant *value);
extern
gdouble g_variant_get_double (GVariant *value);
extern
GVariant * g_variant_get_variant (GVariant *value);
extern
const gchar * g_variant_get_string (GVariant *value,
                                                                         gsize *length);
extern
gchar * g_variant_dup_string (GVariant *value,
                                                                         gsize *length);
extern
const gchar ** g_variant_get_strv (GVariant *value,
                                                                         gsize *length);
extern
gchar ** g_variant_dup_strv (GVariant *value,
                                                                         gsize *length);
extern
const gchar ** g_variant_get_objv (GVariant *value,
                                                                         gsize *length);
extern
gchar ** g_variant_dup_objv (GVariant *value,
                                                                         gsize *length);
extern
const gchar * g_variant_get_bytestring (GVariant *value);
extern
gchar * g_variant_dup_bytestring (GVariant *value,
                                                                         gsize *length);
extern
const gchar ** g_variant_get_bytestring_array (GVariant *value,
                                                                         gsize *length);
extern
gchar ** g_variant_dup_bytestring_array (GVariant *value,
                                                                         gsize *length);

extern
GVariant * g_variant_new_maybe (const GVariantType *child_type,
                                                                         GVariant *child);
extern
GVariant * g_variant_new_array (const GVariantType *child_type,
                                                                         GVariant * const *children,
                                                                         gsize n_children);
extern
GVariant * g_variant_new_tuple (GVariant * const *children,
                                                                         gsize n_children);
extern
GVariant * g_variant_new_dict_entry (GVariant *key,
                                                                         GVariant *value);

extern
GVariant * g_variant_get_maybe (GVariant *value);
extern
gsize g_variant_n_children (GVariant *value);
extern
void g_variant_get_child (GVariant *value,
                                                                         gsize index_,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_get_child_value (GVariant *value,
                                                                         gsize index_);
extern
gboolean g_variant_lookup (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_lookup_value (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
extern
gconstpointer g_variant_get_fixed_array (GVariant *value,
                                                                         gsize *n_elements,
                                                                         gsize element_size);

extern
gsize g_variant_get_size (GVariant *value);
extern
gconstpointer g_variant_get_data (GVariant *value);
extern
GBytes * g_variant_get_data_as_bytes (GVariant *value);
extern
void g_variant_store (GVariant *value,
                                                                         gpointer data);

extern
gchar * g_variant_print (GVariant *value,
                                                                         gboolean type_annotate);
extern
GString * g_variant_print_string (GVariant *value,
                                                                         GString *string,
                                                                         gboolean type_annotate);

extern
guint g_variant_hash (gconstpointer value);
extern
gboolean g_variant_equal (gconstpointer one,
                                                                         gconstpointer two);

extern
GVariant * g_variant_get_normal_form (GVariant *value);
extern
gboolean g_variant_is_normal_form (GVariant *value);
extern
GVariant * g_variant_byteswap (GVariant *value);

extern
GVariant * g_variant_new_from_bytes (const GVariantType *type,
                                                                         GBytes *bytes,
                                                                         gboolean trusted);
extern
GVariant * g_variant_new_from_data (const GVariantType *type,
                                                                         gconstpointer data,
                                                                         gsize size,
                                                                         gboolean trusted,
                                                                         GDestroyNotify notify,
                                                                         gpointer user_data);

typedef struct _GVariantIter GVariantIter;
struct _GVariantIter {

  gsize x[16];
};

extern
GVariantIter * g_variant_iter_new (GVariant *value);
extern
gsize g_variant_iter_init (GVariantIter *iter,
                                                                         GVariant *value);
extern
GVariantIter * g_variant_iter_copy (GVariantIter *iter);
extern
gsize g_variant_iter_n_children (GVariantIter *iter);
extern
void g_variant_iter_free (GVariantIter *iter);
extern
GVariant * g_variant_iter_next_value (GVariantIter *iter);
extern
gboolean g_variant_iter_next (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);
extern
gboolean g_variant_iter_loop (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);


typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {

  union
  {
    struct {
      gsize partial_magic;
      const GVariantType *type;
      gsize y[14];
    } s;
    gsize x[16];
  } u;
};

typedef enum
{
  G_VARIANT_PARSE_ERROR_FAILED,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED,
  G_VARIANT_PARSE_ERROR_RECURSION
} GVariantParseError;


__attribute__((__deprecated__("Use '" "g_variant_parse_error_quark" "' instead"))) extern
GQuark g_variant_parser_get_error_quark (void);

extern
GQuark g_variant_parse_error_quark (void);
# 374 "/usr/include/glib-2.0/glib/gvariant.h"
extern
GVariantBuilder * g_variant_builder_new (const GVariantType *type);
extern
void g_variant_builder_unref (GVariantBuilder *builder);
extern
GVariantBuilder * g_variant_builder_ref (GVariantBuilder *builder);
extern
void g_variant_builder_init (GVariantBuilder *builder,
                                                                         const GVariantType *type);
extern
GVariant * g_variant_builder_end (GVariantBuilder *builder);
extern
void g_variant_builder_clear (GVariantBuilder *builder);
extern
void g_variant_builder_open (GVariantBuilder *builder,
                                                                         const GVariantType *type);
extern
void g_variant_builder_close (GVariantBuilder *builder);
extern
void g_variant_builder_add_value (GVariantBuilder *builder,
                                                                         GVariant *value);
extern
void g_variant_builder_add (GVariantBuilder *builder,
                                                                         const gchar *format_string,
                                                                         ...);
extern
void g_variant_builder_add_parsed (GVariantBuilder *builder,
                                                                         const gchar *format,
                                                                         ...);

extern
GVariant * g_variant_new (const gchar *format_string,
                                                                         ...);
extern
void g_variant_get (GVariant *value,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_new_va (const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
extern
void g_variant_get_va (GVariant *value,
                                                                         const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
extern
gboolean g_variant_check_format_string (GVariant *value,
                                                                         const gchar *format_string,
                                                                         gboolean copy_only);

extern
GVariant * g_variant_parse (const GVariantType *type,
                                                                         const gchar *text,
                                                                         const gchar *limit,
                                                                         const gchar **endptr,
                                                                         GError **error);
extern
GVariant * g_variant_new_parsed (const gchar *format,
                                                                         ...);
extern
GVariant * g_variant_new_parsed_va (const gchar *format,
                                                                         va_list *app);

extern
gchar * g_variant_parse_error_print_context (GError *error,
                                                                         const gchar *source_str);

extern
gint g_variant_compare (gconstpointer one,
                                                                         gconstpointer two);

typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {

  union
  {
    struct {
      GVariant *asv;
      gsize partial_magic;
      gsize y[14];
    } s;
    gsize x[16];
  } u;
};
# 497 "/usr/include/glib-2.0/glib/gvariant.h"
extern
GVariantDict * g_variant_dict_new (GVariant *from_asv);

extern
void g_variant_dict_init (GVariantDict *dict,
                                                                         GVariant *from_asv);

extern
gboolean g_variant_dict_lookup (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GVariant * g_variant_dict_lookup_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
extern
gboolean g_variant_dict_contains (GVariantDict *dict,
                                                                         const gchar *key);
extern
void g_variant_dict_insert (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
extern
void g_variant_dict_insert_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         GVariant *value);
extern
gboolean g_variant_dict_remove (GVariantDict *dict,
                                                                         const gchar *key);
extern
void g_variant_dict_clear (GVariantDict *dict);
extern
GVariant * g_variant_dict_end (GVariantDict *dict);
extern
GVariantDict * g_variant_dict_ref (GVariantDict *dict);
extern
void g_variant_dict_unref (GVariantDict *dict);


# 37 "/usr/include/glib-2.0/glib/gmessages.h" 2





extern
gsize g_printf_string_upper_bound (const gchar* format,
         va_list args) __attribute__((__format__ (gnu_printf, 1, 0)));
# 53 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum
{

  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,


  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,

  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;




typedef void (*GLogFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);



extern
guint g_log_set_handler (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data);
extern
guint g_log_set_handler_full (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data,
                                         GDestroyNotify destroy);
extern
void g_log_remove_handler (const gchar *log_domain,
                                         guint handler_id);
extern
void g_log_default_handler (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *message,
                                         gpointer unused_data);
extern
GLogFunc g_log_set_default_handler (GLogFunc log_func,
        gpointer user_data);
extern
void g_log (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (gnu_printf, 3, 4)));
extern
void g_logv (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         va_list args) __attribute__((__format__ (gnu_printf, 3, 0)));
extern
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain,
                                         GLogLevelFlags fatal_mask);
extern
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);
# 134 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum
{
  G_LOG_WRITER_HANDLED = 1,
  G_LOG_WRITER_UNHANDLED = 0,
} GLogWriterOutput;
# 156 "/usr/include/glib-2.0/glib/gmessages.h"
typedef struct _GLogField GLogField;
struct _GLogField
{
  const gchar *key;
  gconstpointer value;
  gssize length;
};
# 195 "/usr/include/glib-2.0/glib/gmessages.h"
typedef GLogWriterOutput (*GLogWriterFunc) (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);

extern
void g_log_structured (const gchar *log_domain,
                                                GLogLevelFlags log_level,
                                                ...);
extern
void g_log_structured_array (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields);

extern
void g_log_variant (const gchar *log_domain,
                                                GLogLevelFlags log_level,
                                                GVariant *fields);

extern
void g_log_set_writer_func (GLogWriterFunc func,
                                                gpointer user_data,
                                                GDestroyNotify user_data_free);

extern
gboolean g_log_writer_supports_color (gint output_fd);
extern
gboolean g_log_writer_is_journald (gint output_fd);

extern
gchar *g_log_writer_format_fields (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gboolean use_color);

extern
GLogWriterOutput g_log_writer_journald (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
extern
GLogWriterOutput g_log_writer_standard_streams (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
extern
GLogWriterOutput g_log_writer_default (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);

extern
void g_log_writer_default_set_use_stderr (gboolean use_stderr);
extern
gboolean g_log_writer_default_would_drop (GLogLevelFlags log_level,
                                                 const char *log_domain);


extern
gboolean g_log_get_debug_enabled (void);
extern
void g_log_set_debug_enabled (gboolean enabled);
# 276 "/usr/include/glib-2.0/glib/gmessages.h"
void _g_log_fallback_handler (const gchar *log_domain,
       GLogLevelFlags log_level,
       const gchar *message,
       gpointer unused_data);


extern
void g_return_if_fail_warning (const char *log_domain,
          const char *pretty_function,
          const char *expression) ;
extern
void g_warn_message (const char *domain,
                               const char *file,
                               int line,
                               const char *func,
                               const char *warnexpr) ;
__attribute__((__deprecated__)) extern
__attribute__ ((__noreturn__))
void g_assert_warning (const char *log_domain,
          const char *file,
          const int line,
                 const char *pretty_function,
                 const char *expression);

extern
void g_log_structured_standard (const gchar *log_domain,
                                GLogLevelFlags log_level,
                                const gchar *file,
                                const gchar *line,
                                const gchar *func,
                                const gchar *message_format,
                                ...) __attribute__((__format__ (gnu_printf, 6, 7)));
# 515 "/usr/include/glib-2.0/glib/gmessages.h"
typedef void (*GPrintFunc) (const gchar *string);
extern
void g_print (const gchar *format,
                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
GPrintFunc g_set_print_handler (GPrintFunc func);
extern
void g_printerr (const gchar *format,
                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
GPrintFunc g_set_printerr_handler (GPrintFunc func);
# 686 "/usr/include/glib-2.0/glib/gmessages.h"

# 63 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/goption.h" 1
# 29 "/usr/include/glib-2.0/glib/goption.h"

# 38 "/usr/include/glib-2.0/glib/goption.h"
typedef struct _GOptionContext GOptionContext;
# 51 "/usr/include/glib-2.0/glib/goption.h"
typedef struct _GOptionGroup GOptionGroup;
typedef struct _GOptionEntry GOptionEntry;
# 81 "/usr/include/glib-2.0/glib/goption.h"
typedef enum
{
  G_OPTION_FLAG_NONE = 0,
  G_OPTION_FLAG_HIDDEN = 1 << 0,
  G_OPTION_FLAG_IN_MAIN = 1 << 1,
  G_OPTION_FLAG_REVERSE = 1 << 2,
  G_OPTION_FLAG_NO_ARG = 1 << 3,
  G_OPTION_FLAG_FILENAME = 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG = 1 << 5,
  G_OPTION_FLAG_NOALIAS = 1 << 6
} GOptionFlags;
# 119 "/usr/include/glib-2.0/glib/goption.h"
typedef enum
{
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;
# 149 "/usr/include/glib-2.0/glib/goption.h"
typedef gboolean (*GOptionArgFunc) (const gchar *option_name,
        const gchar *value,
        gpointer data,
        GError **error);
# 167 "/usr/include/glib-2.0/glib/goption.h"
typedef gboolean (*GOptionParseFunc) (GOptionContext *context,
          GOptionGroup *group,
          gpointer data,
          GError **error);
# 182 "/usr/include/glib-2.0/glib/goption.h"
typedef void (*GOptionErrorFunc) (GOptionContext *context,
      GOptionGroup *group,
      gpointer data,
      GError **error);
# 206 "/usr/include/glib-2.0/glib/goption.h"
typedef enum
{
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;

extern
GQuark g_option_error_quark (void);
# 258 "/usr/include/glib-2.0/glib/goption.h"
struct _GOptionEntry
{
  const gchar *long_name;
  gchar short_name;
  gint flags;

  GOptionArg arg;
  gpointer arg_data;

  const gchar *description;
  const gchar *arg_description;
};
# 307 "/usr/include/glib-2.0/glib/goption.h"
extern
GOptionContext *g_option_context_new (const gchar *parameter_string);
extern
void g_option_context_set_summary (GOptionContext *context,
                                                   const gchar *summary);
extern
const gchar * g_option_context_get_summary (GOptionContext *context);
extern
void g_option_context_set_description (GOptionContext *context,
                                                   const gchar *description);
extern
const gchar * g_option_context_get_description (GOptionContext *context);
extern
void g_option_context_free (GOptionContext *context);
extern
void g_option_context_set_help_enabled (GOptionContext *context,
         gboolean help_enabled);
extern
gboolean g_option_context_get_help_enabled (GOptionContext *context);
extern
void g_option_context_set_ignore_unknown_options (GOptionContext *context,
            gboolean ignore_unknown);
extern
gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);

extern
void g_option_context_set_strict_posix (GOptionContext *context,
                                                             gboolean strict_posix);
extern
gboolean g_option_context_get_strict_posix (GOptionContext *context);

extern
void g_option_context_add_main_entries (GOptionContext *context,
         const GOptionEntry *entries,
         const gchar *translation_domain);
extern
gboolean g_option_context_parse (GOptionContext *context,
         gint *argc,
         gchar ***argv,
         GError **error);
extern
gboolean g_option_context_parse_strv (GOptionContext *context,
                                                   gchar ***arguments,
                                                   GError **error);
extern
void g_option_context_set_translate_func (GOptionContext *context,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
extern
void g_option_context_set_translation_domain (GOptionContext *context,
        const gchar *domain);

extern
void g_option_context_add_group (GOptionContext *context,
       GOptionGroup *group);
extern
void g_option_context_set_main_group (GOptionContext *context,
            GOptionGroup *group);
extern
GOptionGroup *g_option_context_get_main_group (GOptionContext *context);
extern
gchar *g_option_context_get_help (GOptionContext *context,
                                               gboolean main_help,
                                               GOptionGroup *group);

extern
GOptionGroup *g_option_group_new (const gchar *name,
           const gchar *description,
           const gchar *help_description,
           gpointer user_data,
           GDestroyNotify destroy);
extern
void g_option_group_set_parse_hooks (GOptionGroup *group,
           GOptionParseFunc pre_parse_func,
           GOptionParseFunc post_parse_func);
extern
void g_option_group_set_error_hook (GOptionGroup *group,
           GOptionErrorFunc error_func);
__attribute__((__deprecated__)) extern
void g_option_group_free (GOptionGroup *group);
extern
GOptionGroup *g_option_group_ref (GOptionGroup *group);
extern
void g_option_group_unref (GOptionGroup *group);
extern
void g_option_group_add_entries (GOptionGroup *group,
           const GOptionEntry *entries);
extern
void g_option_group_set_translate_func (GOptionGroup *group,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
extern
void g_option_group_set_translation_domain (GOptionGroup *group,
           const gchar *domain);


# 65 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpattern.h" 1
# 27 "/usr/include/glib-2.0/glib/gpattern.h"



typedef struct _GPatternSpec GPatternSpec;

extern
GPatternSpec* g_pattern_spec_new (const gchar *pattern);
extern
void g_pattern_spec_free (GPatternSpec *pspec);
extern
GPatternSpec *g_pattern_spec_copy (GPatternSpec *pspec);
extern
gboolean g_pattern_spec_equal (GPatternSpec *pspec1,
     GPatternSpec *pspec2);
extern
gboolean g_pattern_spec_match (GPatternSpec *pspec,
                               gsize string_length,
                               const gchar *string,
                               const gchar *string_reversed);
extern
gboolean g_pattern_spec_match_string (GPatternSpec *pspec,
                                      const gchar *string);
__attribute__((__deprecated__("Use '" "g_pattern_spec_match" "' instead"))) extern
gboolean g_pattern_match (GPatternSpec *pspec,
     guint string_length,
     const gchar *string,
     const gchar *string_reversed);
__attribute__((__deprecated__("Use '" "g_pattern_spec_match_string" "' instead"))) extern
gboolean g_pattern_match_string (GPatternSpec *pspec,
     const gchar *string);
extern
gboolean g_pattern_match_simple (const gchar *pattern,
     const gchar *string);


# 66 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gprimes.h" 1
# 34 "/usr/include/glib-2.0/glib/gprimes.h"

# 45 "/usr/include/glib-2.0/glib/gprimes.h"
extern
guint g_spaced_primes_closest (guint num) __attribute__ ((__const__));


# 68 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gqsort.h" 1
# 34 "/usr/include/glib-2.0/glib/gqsort.h"


extern
void g_qsort_with_data (gconstpointer pbase,
   gint total_elems,
   gsize size,
   GCompareDataFunc compare_func,
   gpointer user_data);


# 69 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gqueue.h" 1
# 34 "/usr/include/glib-2.0/glib/gqueue.h"


typedef struct _GQueue GQueue;
# 47 "/usr/include/glib-2.0/glib/gqueue.h"
struct _GQueue
{
  GList *head;
  GList *tail;
  guint length;
};
# 72 "/usr/include/glib-2.0/glib/gqueue.h"
extern
GQueue* g_queue_new (void);
extern
void g_queue_free (GQueue *queue);
extern
void g_queue_free_full (GQueue *queue,
    GDestroyNotify free_func);
extern
void g_queue_init (GQueue *queue);
extern
void g_queue_clear (GQueue *queue);
extern
gboolean g_queue_is_empty (GQueue *queue);
extern
void g_queue_clear_full (GQueue *queue,
                                 GDestroyNotify free_func);
extern
guint g_queue_get_length (GQueue *queue);
extern
void g_queue_reverse (GQueue *queue);
extern
GQueue * g_queue_copy (GQueue *queue);
extern
void g_queue_foreach (GQueue *queue,
                                 GFunc func,
                                 gpointer user_data);
extern
GList * g_queue_find (GQueue *queue,
                                 gconstpointer data);
extern
GList * g_queue_find_custom (GQueue *queue,
                                 gconstpointer data,
                                 GCompareFunc func);
extern
void g_queue_sort (GQueue *queue,
                                 GCompareDataFunc compare_func,
                                 gpointer user_data);

extern
void g_queue_push_head (GQueue *queue,
                                 gpointer data);
extern
void g_queue_push_tail (GQueue *queue,
                                 gpointer data);
extern
void g_queue_push_nth (GQueue *queue,
                                 gpointer data,
                                 gint n);
extern
gpointer g_queue_pop_head (GQueue *queue);
extern
gpointer g_queue_pop_tail (GQueue *queue);
extern
gpointer g_queue_pop_nth (GQueue *queue,
                                 guint n);
extern
gpointer g_queue_peek_head (GQueue *queue);
extern
gpointer g_queue_peek_tail (GQueue *queue);
extern
gpointer g_queue_peek_nth (GQueue *queue,
                                 guint n);
extern
gint g_queue_index (GQueue *queue,
                                 gconstpointer data);
extern
gboolean g_queue_remove (GQueue *queue,
                                 gconstpointer data);
extern
guint g_queue_remove_all (GQueue *queue,
                                 gconstpointer data);
extern
void g_queue_insert_before (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
extern
void g_queue_insert_before_link
                                (GQueue *queue,
                                 GList *sibling,
                                 GList *link_);
extern
void g_queue_insert_after (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
extern
void g_queue_insert_after_link
                                (GQueue *queue,
                                 GList *sibling,
                                 GList *link_);
extern
void g_queue_insert_sorted (GQueue *queue,
                                 gpointer data,
                                 GCompareDataFunc func,
                                 gpointer user_data);

extern
void g_queue_push_head_link (GQueue *queue,
                                 GList *link_);
extern
void g_queue_push_tail_link (GQueue *queue,
                                 GList *link_);
extern
void g_queue_push_nth_link (GQueue *queue,
                                 gint n,
                                 GList *link_);
extern
GList* g_queue_pop_head_link (GQueue *queue);
extern
GList* g_queue_pop_tail_link (GQueue *queue);
extern
GList* g_queue_pop_nth_link (GQueue *queue,
                                 guint n);
extern
GList* g_queue_peek_head_link (GQueue *queue);
extern
GList* g_queue_peek_tail_link (GQueue *queue);
extern
GList* g_queue_peek_nth_link (GQueue *queue,
                                 guint n);
extern
gint g_queue_link_index (GQueue *queue,
                                 GList *link_);
extern
void g_queue_unlink (GQueue *queue,
                                 GList *link_);
extern
void g_queue_delete_link (GQueue *queue,
                                 GList *link_);


# 71 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grand.h" 1
# 34 "/usr/include/glib-2.0/glib/grand.h"


typedef struct _GRand GRand;
# 47 "/usr/include/glib-2.0/glib/grand.h"
extern
GRand* g_rand_new_with_seed (guint32 seed);
extern
GRand* g_rand_new_with_seed_array (const guint32 *seed,
        guint seed_length);
extern
GRand* g_rand_new (void);
extern
void g_rand_free (GRand *rand_);
extern
GRand* g_rand_copy (GRand *rand_);
extern
void g_rand_set_seed (GRand *rand_,
          guint32 seed);
extern
void g_rand_set_seed_array (GRand *rand_,
          const guint32 *seed,
          guint seed_length);



extern
guint32 g_rand_int (GRand *rand_);
extern
gint32 g_rand_int_range (GRand *rand_,
          gint32 begin,
          gint32 end);
extern
gdouble g_rand_double (GRand *rand_);
extern
gdouble g_rand_double_range (GRand *rand_,
          gdouble begin,
          gdouble end);
extern
void g_random_set_seed (guint32 seed);



extern
guint32 g_random_int (void);
extern
gint32 g_random_int_range (gint32 begin,
          gint32 end);
extern
gdouble g_random_double (void);
extern
gdouble g_random_double_range (gdouble begin,
          gdouble end);



# 72 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grcbox.h" 1
# 19 "/usr/include/glib-2.0/glib/grcbox.h"
       
# 28 "/usr/include/glib-2.0/glib/grcbox.h"


extern
gpointer g_rc_box_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_rc_box_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_rc_box_dup (gsize block_size,
                                                 gconstpointer mem_block) __attribute__((__alloc_size__(1)));
extern
gpointer g_rc_box_acquire (gpointer mem_block);
extern
void g_rc_box_release (gpointer mem_block);
extern
void g_rc_box_release_full (gpointer mem_block,
                                                 GDestroyNotify clear_func);

extern
gsize g_rc_box_get_size (gpointer mem_block);

extern
gpointer g_atomic_rc_box_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_atomic_rc_box_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_atomic_rc_box_dup (gsize block_size,
                                                 gconstpointer mem_block) __attribute__((__alloc_size__(1)));
extern
gpointer g_atomic_rc_box_acquire (gpointer mem_block);
extern
void g_atomic_rc_box_release (gpointer mem_block);
extern
void g_atomic_rc_box_release_full (gpointer mem_block,
                                                 GDestroyNotify clear_func);

extern
gsize g_atomic_rc_box_get_size (gpointer mem_block);
# 89 "/usr/include/glib-2.0/glib/grcbox.h"

# 73 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grefcount.h" 1
# 29 "/usr/include/glib-2.0/glib/grefcount.h"


extern
void g_ref_count_init (grefcount *rc);
extern
void g_ref_count_inc (grefcount *rc);
extern
gboolean g_ref_count_dec (grefcount *rc);
extern
gboolean g_ref_count_compare (grefcount *rc,
                                                 gint val);

extern
void g_atomic_ref_count_init (gatomicrefcount *arc);
extern
void g_atomic_ref_count_inc (gatomicrefcount *arc);
extern
gboolean g_atomic_ref_count_dec (gatomicrefcount *arc);
extern
gboolean g_atomic_ref_count_compare (gatomicrefcount *arc,
                                                 gint val);
# 121 "/usr/include/glib-2.0/glib/grefcount.h"

# 74 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grefstring.h" 1
# 19 "/usr/include/glib-2.0/glib/grefstring.h"
       

# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 22 "/usr/include/glib-2.0/glib/grefstring.h" 2
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 23 "/usr/include/glib-2.0/glib/grefstring.h" 2



extern
char * g_ref_string_new (const char *str);
extern
char * g_ref_string_new_len (const char *str,
                                 gssize len);
extern
char * g_ref_string_new_intern (const char *str);

extern
char * g_ref_string_acquire (char *str);
extern
void g_ref_string_release (char *str);

extern
gsize g_ref_string_length (char *str);
# 55 "/usr/include/glib-2.0/glib/grefstring.h"
typedef char GRefString;


# 75 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gregex.h" 1
# 31 "/usr/include/glib-2.0/glib/gregex.h"

# 140 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum
{
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,


  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
} GRegexError;
# 214 "/usr/include/glib-2.0/glib/gregex.h"
extern
GQuark g_regex_error_quark (void);
# 296 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum
{
  G_REGEX_CASELESS = 1 << 0,
  G_REGEX_MULTILINE = 1 << 1,
  G_REGEX_DOTALL = 1 << 2,
  G_REGEX_EXTENDED = 1 << 3,
  G_REGEX_ANCHORED = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY = 1 << 5,
  G_REGEX_UNGREEDY = 1 << 9,
  G_REGEX_RAW = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE = 1 << 12,
  G_REGEX_OPTIMIZE = 1 << 13,
  G_REGEX_FIRSTLINE = 1 << 18,
  G_REGEX_DUPNAMES = 1 << 19,
  G_REGEX_NEWLINE_CR = 1 << 20,
  G_REGEX_NEWLINE_LF = 1 << 21,
  G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF,
  G_REGEX_NEWLINE_ANYCRLF = G_REGEX_NEWLINE_CR | 1 << 22,
  G_REGEX_BSR_ANYCRLF = 1 << 23,
  G_REGEX_JAVASCRIPT_COMPAT = 1 << 25
} GRegexCompileFlags;
# 386 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum
{
  G_REGEX_MATCH_ANCHORED = 1 << 4,
  G_REGEX_MATCH_NOTBOL = 1 << 7,
  G_REGEX_MATCH_NOTEOL = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY = 1 << 10,
  G_REGEX_MATCH_PARTIAL = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY = 1 << 22,
  G_REGEX_MATCH_NEWLINE_ANYCRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_ANY,
  G_REGEX_MATCH_BSR_ANYCRLF = 1 << 23,
  G_REGEX_MATCH_BSR_ANY = 1 << 24,
  G_REGEX_MATCH_PARTIAL_SOFT = G_REGEX_MATCH_PARTIAL,
  G_REGEX_MATCH_PARTIAL_HARD = 1 << 27,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 1 << 28
} GRegexMatchFlags;
# 413 "/usr/include/glib-2.0/glib/gregex.h"
typedef struct _GRegex GRegex;
# 422 "/usr/include/glib-2.0/glib/gregex.h"
typedef struct _GMatchInfo GMatchInfo;
# 441 "/usr/include/glib-2.0/glib/gregex.h"
typedef gboolean (*GRegexEvalCallback) (const GMatchInfo *match_info,
       GString *result,
       gpointer user_data);


extern
GRegex *g_regex_new (const gchar *pattern,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options,
       GError **error);
extern
GRegex *g_regex_ref (GRegex *regex);
extern
void g_regex_unref (GRegex *regex);
extern
const gchar *g_regex_get_pattern (const GRegex *regex);
extern
gint g_regex_get_max_backref (const GRegex *regex);
extern
gint g_regex_get_capture_count (const GRegex *regex);
extern
gboolean g_regex_get_has_cr_or_lf (const GRegex *regex);
extern
gint g_regex_get_max_lookbehind (const GRegex *regex);
extern
gint g_regex_get_string_number (const GRegex *regex,
       const gchar *name);
extern
gchar *g_regex_escape_string (const gchar *string,
       gint length);
extern
gchar *g_regex_escape_nul (const gchar *string,
       gint length);

extern
GRegexCompileFlags g_regex_get_compile_flags (const GRegex *regex);
extern
GRegexMatchFlags g_regex_get_match_flags (const GRegex *regex);


extern
gboolean g_regex_match_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
extern
gboolean g_regex_match (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
extern
gboolean g_regex_match_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
extern
gboolean g_regex_match_all (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
extern
gboolean g_regex_match_all_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);


extern
gchar **g_regex_split_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
extern
gchar **g_regex_split (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options);
extern
gchar **g_regex_split_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       gint max_tokens,
       GError **error);


extern
gchar *g_regex_replace (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
extern
gchar *g_regex_replace_literal (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
extern
gchar *g_regex_replace_eval (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GRegexEvalCallback eval,
       gpointer user_data,
       GError **error);
extern
gboolean g_regex_check_replacement (const gchar *replacement,
       gboolean *has_references,
       GError **error);


extern
GRegex *g_match_info_get_regex (const GMatchInfo *match_info);
extern
const gchar *g_match_info_get_string (const GMatchInfo *match_info);

extern
GMatchInfo *g_match_info_ref (GMatchInfo *match_info);
extern
void g_match_info_unref (GMatchInfo *match_info);
extern
void g_match_info_free (GMatchInfo *match_info);
extern
gboolean g_match_info_next (GMatchInfo *match_info,
       GError **error);
extern
gboolean g_match_info_matches (const GMatchInfo *match_info);
extern
gint g_match_info_get_match_count (const GMatchInfo *match_info);
extern
gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);
extern
gchar *g_match_info_expand_references(const GMatchInfo *match_info,
       const gchar *string_to_expand,
       GError **error);
extern
gchar *g_match_info_fetch (const GMatchInfo *match_info,
       gint match_num);
extern
gboolean g_match_info_fetch_pos (const GMatchInfo *match_info,
       gint match_num,
       gint *start_pos,
       gint *end_pos);
extern
gchar *g_match_info_fetch_named (const GMatchInfo *match_info,
       const gchar *name);
extern
gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info,
       const gchar *name,
       gint *start_pos,
       gint *end_pos);
extern
gchar **g_match_info_fetch_all (const GMatchInfo *match_info);


# 76 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gscanner.h" 1
# 35 "/usr/include/glib-2.0/glib/gscanner.h"


typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;

typedef void (*GScannerMsgFunc) (GScanner *scanner,
       gchar *message,
       gboolean error);
# 62 "/usr/include/glib-2.0/glib/gscanner.h"
typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;


typedef enum
{
  G_TOKEN_EOF = 0,

  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',

  G_TOKEN_NONE = 256,

  G_TOKEN_ERROR,

  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,

  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,

  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,


  G_TOKEN_LAST
} GTokenType;

union _GTokenValue
{
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};

struct _GScannerConfig
{


  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;



  guint case_sensitive : 1;




  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;


  guint padding_dummy;
};

struct _GScanner
{

  gpointer user_data;
  guint max_parse_errors;


  guint parse_errors;


  const gchar *input_name;


  GData *qdata;


  GScannerConfig *config;


  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;


  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;



  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;



  GScannerMsgFunc msg_handler;
};

extern
GScanner* g_scanner_new (const GScannerConfig *config_templ);
extern
void g_scanner_destroy (GScanner *scanner);
extern
void g_scanner_input_file (GScanner *scanner,
       gint input_fd);
extern
void g_scanner_sync_file_offset (GScanner *scanner);
extern
void g_scanner_input_text (GScanner *scanner,
       const gchar *text,
       guint text_len);
extern
GTokenType g_scanner_get_next_token (GScanner *scanner);
extern
GTokenType g_scanner_peek_next_token (GScanner *scanner);
extern
GTokenType g_scanner_cur_token (GScanner *scanner);
extern
GTokenValue g_scanner_cur_value (GScanner *scanner);
extern
guint g_scanner_cur_line (GScanner *scanner);
extern
guint g_scanner_cur_position (GScanner *scanner);
extern
gboolean g_scanner_eof (GScanner *scanner);
extern
guint g_scanner_set_scope (GScanner *scanner,
       guint scope_id);
extern
void g_scanner_scope_add_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol,
       gpointer value);
extern
void g_scanner_scope_remove_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
extern
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
extern
void g_scanner_scope_foreach_symbol (GScanner *scanner,
       guint scope_id,
       GHFunc func,
       gpointer user_data);
extern
gpointer g_scanner_lookup_symbol (GScanner *scanner,
       const gchar *symbol);
extern
void g_scanner_unexp_token (GScanner *scanner,
       GTokenType expected_token,
       const gchar *identifier_spec,
       const gchar *symbol_spec,
       const gchar *symbol_name,
       const gchar *message,
       gint is_error);
extern
void g_scanner_error (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (gnu_printf, 2, 3)));
extern
void g_scanner_warn (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (gnu_printf, 2, 3)));
# 297 "/usr/include/glib-2.0/glib/gscanner.h"

# 77 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gsequence.h" 1
# 28 "/usr/include/glib-2.0/glib/gsequence.h"


typedef struct _GSequence GSequence;
typedef struct _GSequenceNode GSequenceIter;

typedef gint (* GSequenceIterCompareFunc) (GSequenceIter *a,
                                           GSequenceIter *b,
                                           gpointer data);



extern
GSequence * g_sequence_new (GDestroyNotify data_destroy);
extern
void g_sequence_free (GSequence *seq);
extern
gint g_sequence_get_length (GSequence *seq);
extern
void g_sequence_foreach (GSequence *seq,
                                              GFunc func,
                                              gpointer user_data);
extern
void g_sequence_foreach_range (GSequenceIter *begin,
                                              GSequenceIter *end,
                                              GFunc func,
                                              gpointer user_data);
extern
void g_sequence_sort (GSequence *seq,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
void g_sequence_sort_iter (GSequence *seq,
                                              GSequenceIterCompareFunc cmp_func,
                                              gpointer cmp_data);
extern
gboolean g_sequence_is_empty (GSequence *seq);



extern
GSequenceIter *g_sequence_get_begin_iter (GSequence *seq);
extern
GSequenceIter *g_sequence_get_end_iter (GSequence *seq);
extern
GSequenceIter *g_sequence_get_iter_at_pos (GSequence *seq,
                                              gint pos);
extern
GSequenceIter *g_sequence_append (GSequence *seq,
                                              gpointer data);
extern
GSequenceIter *g_sequence_prepend (GSequence *seq,
                                              gpointer data);
extern
GSequenceIter *g_sequence_insert_before (GSequenceIter *iter,
                                              gpointer data);
extern
void g_sequence_move (GSequenceIter *src,
                                              GSequenceIter *dest);
extern
void g_sequence_swap (GSequenceIter *a,
                                              GSequenceIter *b);
extern
GSequenceIter *g_sequence_insert_sorted (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_insert_sorted_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
void g_sequence_sort_changed (GSequenceIter *iter,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
void g_sequence_sort_changed_iter (GSequenceIter *iter,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
void g_sequence_remove (GSequenceIter *iter);
extern
void g_sequence_remove_range (GSequenceIter *begin,
                                              GSequenceIter *end);
extern
void g_sequence_move_range (GSequenceIter *dest,
                                              GSequenceIter *begin,
                                              GSequenceIter *end);
extern
GSequenceIter *g_sequence_search (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_search_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_lookup (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
extern
GSequenceIter *g_sequence_lookup_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);



extern
gpointer g_sequence_get (GSequenceIter *iter);
extern
void g_sequence_set (GSequenceIter *iter,
                                              gpointer data);


extern
gboolean g_sequence_iter_is_begin (GSequenceIter *iter);
extern
gboolean g_sequence_iter_is_end (GSequenceIter *iter);
extern
GSequenceIter *g_sequence_iter_next (GSequenceIter *iter);
extern
GSequenceIter *g_sequence_iter_prev (GSequenceIter *iter);
extern
gint g_sequence_iter_get_position (GSequenceIter *iter);
extern
GSequenceIter *g_sequence_iter_move (GSequenceIter *iter,
                                              gint delta);
extern
GSequence * g_sequence_iter_get_sequence (GSequenceIter *iter);



extern
gint g_sequence_iter_compare (GSequenceIter *a,
                                              GSequenceIter *b);
extern
GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter *begin,
                                              GSequenceIter *end);


# 78 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gshell.h" 1
# 28 "/usr/include/glib-2.0/glib/gshell.h"




typedef enum
{

  G_SHELL_ERROR_BAD_QUOTING,

  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;

extern
GQuark g_shell_error_quark (void);

extern
gchar* g_shell_quote (const gchar *unquoted_string);
extern
gchar* g_shell_unquote (const gchar *quoted_string,
                             GError **error);
extern
gboolean g_shell_parse_argv (const gchar *command_line,
                             gint *argcp,
                             gchar ***argvp,
                             GError **error);


# 79 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gslice.h" 1
# 28 "/usr/include/glib-2.0/glib/gslice.h"




extern
gpointer g_slice_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_slice_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
extern
gpointer g_slice_copy (gsize block_size,
                                         gconstpointer mem_block) __attribute__((__alloc_size__(1)));
extern
void g_slice_free1 (gsize block_size,
      gpointer mem_block);
extern
void g_slice_free_chain_with_offset (gsize block_size,
      gpointer mem_chain,
      gsize next_offset);
# 92 "/usr/include/glib-2.0/glib/gslice.h"
typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;

__attribute__((__deprecated__)) extern
void g_slice_set_config (GSliceConfig ckey, gint64 value);
__attribute__((__deprecated__)) extern
gint64 g_slice_get_config (GSliceConfig ckey);
__attribute__((__deprecated__)) extern
gint64* g_slice_get_config_state (GSliceConfig ckey, gint64 address, guint *n_values);







# 80 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gspawn.h" 1
# 28 "/usr/include/glib-2.0/glib/gspawn.h"

# 68 "/usr/include/glib-2.0/glib/gspawn.h"
typedef enum
{
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_2BIG __attribute__((__deprecated__("Use '" "G_SPAWN_ERROR_TOO_BIG" "' instead"))) = G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED


} GSpawnError;
# 138 "/usr/include/glib-2.0/glib/gspawn.h"
typedef void (* GSpawnChildSetupFunc) (gpointer user_data);
# 168 "/usr/include/glib-2.0/glib/gspawn.h"
typedef enum
{
  G_SPAWN_DEFAULT = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,

  G_SPAWN_SEARCH_PATH = 1 << 2,

  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6,
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 1 << 7,
  G_SPAWN_CLOEXEC_PIPES = 1 << 8
} GSpawnFlags;

extern
GQuark g_spawn_error_quark (void);
extern
GQuark g_spawn_exit_error_quark (void);

extern
gboolean g_spawn_async (const gchar *working_directory,
                        gchar **argv,
                        gchar **envp,
                        GSpawnFlags flags,
                        GSpawnChildSetupFunc child_setup,
                        gpointer user_data,
                        GPid *child_pid,
                        GError **error);





extern
gboolean g_spawn_async_with_pipes (const gchar *working_directory,
                                   gchar **argv,
                                   gchar **envp,
                                   GSpawnFlags flags,
                                   GSpawnChildSetupFunc child_setup,
                                   gpointer user_data,
                                   GPid *child_pid,
                                   gint *standard_input,
                                   gint *standard_output,
                                   gint *standard_error,
                                   GError **error);

extern
gboolean g_spawn_async_with_pipes_and_fds (const gchar *working_directory,
                                           const gchar * const *argv,
                                           const gchar * const *envp,
                                           GSpawnFlags flags,
                                           GSpawnChildSetupFunc child_setup,
                                           gpointer user_data,
                                           gint stdin_fd,
                                           gint stdout_fd,
                                           gint stderr_fd,
                                           const gint *source_fds,
                                           const gint *target_fds,
                                           gsize n_fds,
                                           GPid *child_pid_out,
                                           gint *stdin_pipe_out,
                                           gint *stdout_pipe_out,
                                           gint *stderr_pipe_out,
                                           GError **error);


extern
gboolean g_spawn_async_with_fds (const gchar *working_directory,
                                 gchar **argv,
                                 gchar **envp,
                                 GSpawnFlags flags,
                                 GSpawnChildSetupFunc child_setup,
                                 gpointer user_data,
                                 GPid *child_pid,
                                 gint stdin_fd,
                                 gint stdout_fd,
                                 gint stderr_fd,
                                 GError **error);





extern
gboolean g_spawn_sync (const gchar *working_directory,
                               gchar **argv,
                               gchar **envp,
                               GSpawnFlags flags,
                               GSpawnChildSetupFunc child_setup,
                               gpointer user_data,
                               gchar **standard_output,
                               gchar **standard_error,
                               gint *wait_status,
                               GError **error);

extern
gboolean g_spawn_command_line_sync (const gchar *command_line,
                                     gchar **standard_output,
                                     gchar **standard_error,
                                     gint *wait_status,
                                     GError **error);
extern
gboolean g_spawn_command_line_async (const gchar *command_line,
                                     GError **error);

extern
gboolean g_spawn_check_wait_status (gint wait_status,
                                    GError **error);

__attribute__((__deprecated__("Use '" "g_spawn_check_wait_status" "' instead"))) extern
gboolean g_spawn_check_exit_status (gint wait_status,
        GError **error);

extern
void g_spawn_close_pid (GPid pid);


# 82 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gstrfuncs.h" 1
# 37 "/usr/include/glib-2.0/glib/gstrfuncs.h"



typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;

extern const guint16 * const g_ascii_table;
# 89 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern
gchar g_ascii_tolower (gchar c) __attribute__ ((__const__));
extern
gchar g_ascii_toupper (gchar c) __attribute__ ((__const__));

extern
gint g_ascii_digit_value (gchar c) __attribute__ ((__const__));
extern
gint g_ascii_xdigit_value (gchar c) __attribute__ ((__const__));





extern
gchar* g_strdelimit (gchar *string,
     const gchar *delimiters,
     gchar new_delimiter);
extern
gchar* g_strcanon (gchar *string,
     const gchar *valid_chars,
     gchar substitutor);
extern
const gchar * g_strerror (gint errnum) __attribute__ ((__const__));
extern
const gchar * g_strsignal (gint signum) __attribute__ ((__const__));
extern
gchar * g_strreverse (gchar *string);
extern
gsize g_strlcpy (gchar *dest,
     const gchar *src,
     gsize dest_size);
extern
gsize g_strlcat (gchar *dest,
     const gchar *src,
     gsize dest_size);
extern
gchar * g_strstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
extern
gchar * g_strrstr (const gchar *haystack,
     const gchar *needle);
extern
gchar * g_strrstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);

extern
gboolean g_str_has_suffix (const gchar *str,
     const gchar *suffix);
extern
gboolean g_str_has_prefix (const gchar *str,
     const gchar *prefix);



extern
gdouble g_strtod (const gchar *nptr,
     gchar **endptr);
extern
gdouble g_ascii_strtod (const gchar *nptr,
     gchar **endptr);
extern
guint64 g_ascii_strtoull (const gchar *nptr,
     gchar **endptr,
     guint base);
extern
gint64 g_ascii_strtoll (const gchar *nptr,
     gchar **endptr,
     guint base);




extern
gchar * g_ascii_dtostr (gchar *buffer,
     gint buf_len,
     gdouble d);
extern
gchar * g_ascii_formatd (gchar *buffer,
     gint buf_len,
     const gchar *format,
     gdouble d);


extern
gchar* g_strchug (gchar *string);

extern
gchar* g_strchomp (gchar *string);



extern
gint g_ascii_strcasecmp (const gchar *s1,
        const gchar *s2);
extern
gint g_ascii_strncasecmp (const gchar *s1,
        const gchar *s2,
        gsize n);
extern
gchar* g_ascii_strdown (const gchar *str,
        gssize len) __attribute__ ((__malloc__));
extern
gchar* g_ascii_strup (const gchar *str,
        gssize len) __attribute__ ((__malloc__));

extern
gboolean g_str_is_ascii (const gchar *str);

__attribute__((__deprecated__)) extern
gint g_strcasecmp (const gchar *s1,
                                        const gchar *s2);
__attribute__((__deprecated__)) extern
gint g_strncasecmp (const gchar *s1,
                                        const gchar *s2,
                                        guint n);
__attribute__((__deprecated__)) extern
gchar* g_strdown (gchar *string);
__attribute__((__deprecated__)) extern
gchar* g_strup (gchar *string);





extern
gchar* g_strdup (const gchar *str) __attribute__ ((__malloc__));
extern
gchar* g_strdup_printf (const gchar *format,
     ...) __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__malloc__));
extern
gchar* g_strdup_vprintf (const gchar *format,
     va_list args) __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__malloc__));
extern
gchar* g_strndup (const gchar *str,
     gsize n) __attribute__ ((__malloc__));
extern
gchar* g_strnfill (gsize length,
     gchar fill_char) __attribute__ ((__malloc__));
extern
gchar* g_strconcat (const gchar *string1,
     ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
extern
gchar* g_strjoin (const gchar *separator,
     ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));





extern
gchar* g_strcompress (const gchar *source) __attribute__ ((__malloc__));
# 252 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern
gchar* g_strescape (const gchar *source,
     const gchar *exceptions) __attribute__ ((__malloc__));

__attribute__((__deprecated__("Use '" "g_memdup2" "' instead"))) extern
gpointer g_memdup (gconstpointer mem,
                                        guint byte_size) __attribute__((__alloc_size__(2)));

extern
gpointer g_memdup2 (gconstpointer mem,
                                        gsize byte_size) __attribute__((__alloc_size__(2)));
# 273 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef gchar** GStrv;
extern
gchar** g_strsplit (const gchar *string,
     const gchar *delimiter,
     gint max_tokens);
extern
gchar ** g_strsplit_set (const gchar *string,
     const gchar *delimiters,
     gint max_tokens);
extern
gchar* g_strjoinv (const gchar *separator,
     gchar **str_array) __attribute__ ((__malloc__));
extern
void g_strfreev (gchar **str_array);
extern
gchar** g_strdupv (gchar **str_array);
extern
guint g_strv_length (gchar **str_array);

extern
gchar* g_stpcpy (gchar *dest,
                                        const char *src);

extern
gchar * g_str_to_ascii (const gchar *str,
                                                                         const gchar *from_locale);

extern
gchar ** g_str_tokenize_and_fold (const gchar *string,
                                                                         const gchar *translit_locale,
                                                                         gchar ***ascii_alternates);

extern
gboolean g_str_match_string (const gchar *search_term,
                                                                         const gchar *potential_hit,
                                                                         gboolean accept_alternates);

extern
gboolean g_strv_contains (const gchar * const *strv,
                                        const gchar *str);

extern
gboolean g_strv_equal (const gchar * const *strv1,
                                        const gchar * const *strv2);
# 329 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef enum
  {
    G_NUMBER_PARSER_ERROR_INVALID,
    G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS,
  } GNumberParserError;
# 345 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern
GQuark g_number_parser_error_quark (void);

extern
gboolean g_ascii_string_to_signed (const gchar *str,
                                                    guint base,
                                                    gint64 min,
                                                    gint64 max,
                                                    gint64 *out_num,
                                                    GError **error);

extern
gboolean g_ascii_string_to_unsigned (const gchar *str,
                                                    guint base,
                                                    guint64 min,
                                                    guint64 max,
                                                    guint64 *out_num,
                                                    GError **error);


# 83 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gstringchunk.h" 1
# 34 "/usr/include/glib-2.0/glib/gstringchunk.h"


typedef struct _GStringChunk GStringChunk;

extern
GStringChunk* g_string_chunk_new (gsize size);
extern
void g_string_chunk_free (GStringChunk *chunk);
extern
void g_string_chunk_clear (GStringChunk *chunk);
extern
gchar* g_string_chunk_insert (GStringChunk *chunk,
                                           const gchar *string);
extern
gchar* g_string_chunk_insert_len (GStringChunk *chunk,
                                           const gchar *string,
                                           gssize len);
extern
gchar* g_string_chunk_insert_const (GStringChunk *chunk,
                                           const gchar *string);


# 84 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gstrvbuilder.h" 1
# 29 "/usr/include/glib-2.0/glib/gstrvbuilder.h"

# 39 "/usr/include/glib-2.0/glib/gstrvbuilder.h"
typedef struct _GStrvBuilder GStrvBuilder;

extern
GStrvBuilder *g_strv_builder_new (void);

extern
void g_strv_builder_unref (GStrvBuilder *builder);

extern
GStrvBuilder *g_strv_builder_ref (GStrvBuilder *builder);

extern
void g_strv_builder_add (GStrvBuilder *builder,
                         const char *value);

extern
void g_strv_builder_addv (GStrvBuilder *builder,
                          const char **value);

extern
void g_strv_builder_add_many (GStrvBuilder *builder,
                              ...) __attribute__((__sentinel__));

extern
GStrv g_strv_builder_end (GStrvBuilder *builder);


# 86 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtestutils.h" 1
# 30 "/usr/include/glib-2.0/glib/gtestutils.h"
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4









# 37 "/usr/include/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 52 "/usr/include/errno.h" 3 4

# 31 "/usr/include/glib-2.0/glib/gtestutils.h" 2





# 35 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef struct GTestCase GTestCase;
typedef struct GTestSuite GTestSuite;
typedef void (*GTestFunc) (void);
typedef void (*GTestDataFunc) (gconstpointer user_data);
typedef void (*GTestFixtureFunc) (gpointer fixture,
                                  gconstpointer user_data);
# 238 "/usr/include/glib-2.0/glib/gtestutils.h"
extern
int g_strcmp0 (const char *str1,
                                         const char *str2);


extern
void g_test_minimized_result (double minimized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (gnu_printf, 2, 3)));
extern
void g_test_maximized_result (double maximized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (gnu_printf, 2, 3)));


extern
void g_test_init (int *argc,
                                         char ***argv,
                                         ...) __attribute__((__sentinel__));
# 320 "/usr/include/glib-2.0/glib/gtestutils.h"
extern
gboolean g_test_subprocess (void);


extern
int g_test_run (void);

extern
void g_test_add_func (const char *testpath,
                                         GTestFunc test_func);

extern
void g_test_add_data_func (const char *testpath,
                                         gconstpointer test_data,
                                         GTestDataFunc test_func);

extern
void g_test_add_data_func_full (const char *testpath,
                                         gpointer test_data,
                                         GTestDataFunc test_func,
                                         GDestroyNotify data_free_func);


extern
const char * g_test_get_path (void);


extern
void g_test_fail (void);
extern
void g_test_fail_printf (const char *format,
                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
void g_test_incomplete (const gchar *msg);
extern
void g_test_incomplete_printf (const char *format,
                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
void g_test_skip (const gchar *msg);
extern
void g_test_skip_printf (const char *format,
                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
gboolean g_test_failed (void);
extern
void g_test_set_nonfatal_assertions (void);
# 399 "/usr/include/glib-2.0/glib/gtestutils.h"
extern
void g_test_message (const char *format,
                                         ...) __attribute__((__format__ (gnu_printf, 1, 2)));
extern
void g_test_bug_base (const char *uri_pattern);
extern
void g_test_bug (const char *bug_uri_snippet);
extern
void g_test_summary (const char *summary);

extern
void g_test_timer_start (void);
extern
double g_test_timer_elapsed (void);
extern
double g_test_timer_last (void);


extern
void g_test_queue_free (gpointer gfree_pointer);
extern
void g_test_queue_destroy (GDestroyNotify destroy_func,
                                         gpointer destroy_data);
# 445 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef enum {
  G_TEST_TRAP_SILENCE_STDOUT = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN = 1 << 9
} GTestTrapFlags __attribute__((__deprecated__("Use '" "GTestSubprocessFlags" "' instead")));


# 451 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma GCC diagnostic push
# 451 "/usr/include/glib-2.0/glib/gtestutils.h"

# 451 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 451 "/usr/include/glib-2.0/glib/gtestutils.h"


__attribute__((__deprecated__("Use '" "g_test_trap_subprocess" "' instead"))) extern
gboolean g_test_trap_fork (guint64 usec_timeout,
                                         GTestTrapFlags test_trap_flags);


# 457 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma GCC diagnostic pop
# 457 "/usr/include/glib-2.0/glib/gtestutils.h"


typedef enum {
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1 << 0,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 1 << 1,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 1 << 2
} GTestSubprocessFlags;

extern
void g_test_trap_subprocess (const char *test_path,
                                         guint64 usec_timeout,
                                         GTestSubprocessFlags test_flags);

extern
gboolean g_test_trap_has_passed (void);
extern
gboolean g_test_trap_reached_timeout (void);
# 483 "/usr/include/glib-2.0/glib/gtestutils.h"
extern
gint32 g_test_rand_int (void);
extern
gint32 g_test_rand_int_range (gint32 begin,
                                         gint32 end);
extern
double g_test_rand_double (void);
extern
double g_test_rand_double_range (double range_start,
                                         double range_end);






extern
GTestCase* g_test_create_case (const char *test_name,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
extern
GTestSuite* g_test_create_suite (const char *suite_name);
extern
GTestSuite* g_test_get_root (void);
extern
void g_test_suite_add (GTestSuite *suite,
                                         GTestCase *test_case);
extern
void g_test_suite_add_suite (GTestSuite *suite,
                                         GTestSuite *nestedsuite);
extern
int g_test_run_suite (GTestSuite *suite);

extern
void g_test_case_free (GTestCase *test_case);

extern
void g_test_suite_free (GTestSuite *suite);

extern
void g_test_trap_assertions (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         guint64 assertion_flags,
                                         const char *pattern);
extern
void g_assertion_message (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *message) ;
extern
__attribute__ ((__noreturn__))
void g_assertion_message_expr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr);
extern
void g_assertion_message_cmpstr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char *arg1,
                                         const char *cmp,
                                         const char *arg2) ;

extern
void g_assertion_message_cmpstrv (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char * const *arg1,
                                         const char * const *arg2,
                                         gsize first_wrong_idx) ;
extern
void g_assertion_message_cmpnum (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         long double arg1,
                                         const char *cmp,
                                         long double arg2,
                                         char numtype) ;
extern
void g_assertion_message_error (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const GError *error,
                                         GQuark error_domain,
                                         int error_code) ;
extern
void g_test_add_vtable (const char *testpath,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
typedef struct {
  gboolean test_initialized;
  gboolean test_quick;
  gboolean test_perf;
  gboolean test_verbose;
  gboolean test_quiet;
  gboolean test_undefined;
} GTestConfig;
extern const GTestConfig * const g_test_config_vars;


typedef enum {
  G_TEST_RUN_SUCCESS,
  G_TEST_RUN_SKIPPED,
  G_TEST_RUN_FAILURE,
  G_TEST_RUN_INCOMPLETE
} GTestResult;

typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,
  G_TEST_LOG_START_BINARY,
  G_TEST_LOG_LIST_CASE,
  G_TEST_LOG_SKIP_CASE,
  G_TEST_LOG_START_CASE,
  G_TEST_LOG_STOP_CASE,
  G_TEST_LOG_MIN_RESULT,
  G_TEST_LOG_MAX_RESULT,
  G_TEST_LOG_MESSAGE,
  G_TEST_LOG_START_SUITE,
  G_TEST_LOG_STOP_SUITE
} GTestLogType;

typedef struct {
  GTestLogType log_type;
  guint n_strings;
  gchar **strings;
  guint n_nums;
  long double *nums;
} GTestLogMsg;
typedef struct {

  GString *data;
  GSList *msgs;
} GTestLogBuffer;

extern
const char* g_test_log_type_name (GTestLogType log_type);
extern
GTestLogBuffer* g_test_log_buffer_new (void);
extern
void g_test_log_buffer_free (GTestLogBuffer *tbuffer);
extern
void g_test_log_buffer_push (GTestLogBuffer *tbuffer,
                                         guint n_bytes,
                                         const guint8 *bytes);
extern
GTestLogMsg* g_test_log_buffer_pop (GTestLogBuffer *tbuffer);
extern
void g_test_log_msg_free (GTestLogMsg *tmsg);
# 664 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef gboolean (*GTestLogFatalFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);
extern
void
g_test_log_set_fatal_handler (GTestLogFatalFunc log_func,
                                         gpointer user_data);

extern
void g_test_expect_message (const gchar *log_domain,
                                                  GLogLevelFlags log_level,
                                                  const gchar *pattern);
extern
void g_test_assert_expected_messages_internal (const char *domain,
                                                  const char *file,
                                                  int line,
                                                  const char *func);

typedef enum
{
  G_TEST_DIST,
  G_TEST_BUILT
} GTestFileType;

extern
gchar * g_test_build_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
extern
const gchar *g_test_get_dir (GTestFileType file_type);
extern
const gchar *g_test_get_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));




# 87 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gthreadpool.h" 1
# 34 "/usr/include/glib-2.0/glib/gthreadpool.h"


typedef struct _GThreadPool GThreadPool;




struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};

extern
GThreadPool * g_thread_pool_new (GFunc func,
                                                 gpointer user_data,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
extern
GThreadPool * g_thread_pool_new_full (GFunc func,
                                                 gpointer user_data,
                                                 GDestroyNotify item_free_func,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
extern
void g_thread_pool_free (GThreadPool *pool,
                                                 gboolean immediate,
                                                 gboolean wait_);
extern
gboolean g_thread_pool_push (GThreadPool *pool,
                                                 gpointer data,
                                                 GError **error);
extern
guint g_thread_pool_unprocessed (GThreadPool *pool);
extern
void g_thread_pool_set_sort_function (GThreadPool *pool,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
extern
gboolean g_thread_pool_move_to_front (GThreadPool *pool,
                                                 gpointer data);

extern
gboolean g_thread_pool_set_max_threads (GThreadPool *pool,
                                                 gint max_threads,
                                                 GError **error);
extern
gint g_thread_pool_get_max_threads (GThreadPool *pool);
extern
guint g_thread_pool_get_num_threads (GThreadPool *pool);

extern
void g_thread_pool_set_max_unused_threads (gint max_threads);
extern
gint g_thread_pool_get_max_unused_threads (void);
extern
guint g_thread_pool_get_num_unused_threads (void);
extern
void g_thread_pool_stop_unused_threads (void);
extern
void g_thread_pool_set_max_idle_time (guint interval);
extern
guint g_thread_pool_get_max_idle_time (void);


# 89 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtimer.h" 1
# 34 "/usr/include/glib-2.0/glib/gtimer.h"






typedef struct _GTimer GTimer;



extern
GTimer* g_timer_new (void);
extern
void g_timer_destroy (GTimer *timer);
extern
void g_timer_start (GTimer *timer);
extern
void g_timer_stop (GTimer *timer);
extern
void g_timer_reset (GTimer *timer);
extern
void g_timer_continue (GTimer *timer);
extern
gdouble g_timer_elapsed (GTimer *timer,
      gulong *microseconds);
extern
gboolean g_timer_is_active (GTimer *timer);

extern
void g_usleep (gulong microseconds);


# 65 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma GCC diagnostic push
# 65 "/usr/include/glib-2.0/glib/gtimer.h"

# 65 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/glib-2.0/glib/gtimer.h"

__attribute__((__deprecated__)) extern
void g_time_val_add (GTimeVal *time_,
                                  glong microseconds);
__attribute__((__deprecated__("Use '" "g_date_time_new_from_iso8601" "' instead"))) extern
gboolean g_time_val_from_iso8601 (const gchar *iso_date,
      GTimeVal *time_);
__attribute__((__deprecated__("Use '" "g_date_time_format" "' instead"))) extern
gchar* g_time_val_to_iso8601 (GTimeVal *time_) __attribute__ ((__malloc__));

# 74 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma GCC diagnostic pop
# 74 "/usr/include/glib-2.0/glib/gtimer.h"



# 90 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gtrashstack.h" 1
# 34 "/usr/include/glib-2.0/glib/gtrashstack.h"



# 36 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/glib/gtrashstack.h"

# 36 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/glib/gtrashstack.h"


typedef struct _GTrashStack GTrashStack __attribute__((__deprecated__));
struct _GTrashStack
{
  GTrashStack *next;
} __attribute__((__deprecated__));

__attribute__((__deprecated__)) extern
void g_trash_stack_push (GTrashStack **stack_p,
                                gpointer data_p);
__attribute__((__deprecated__)) extern
gpointer g_trash_stack_pop (GTrashStack **stack_p);
__attribute__((__deprecated__)) extern
gpointer g_trash_stack_peek (GTrashStack **stack_p);
__attribute__((__deprecated__)) extern
guint g_trash_stack_height (GTrashStack **stack_p);


# 54 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma GCC diagnostic pop
# 54 "/usr/include/glib-2.0/glib/gtrashstack.h"



# 92 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtree.h" 1
# 34 "/usr/include/glib-2.0/glib/gtree.h"




typedef struct _GTree GTree;
# 47 "/usr/include/glib-2.0/glib/gtree.h"
typedef struct _GTreeNode GTreeNode;

typedef gboolean (*GTraverseFunc) (gpointer key,
                                   gpointer value,
                                   gpointer data);
# 66 "/usr/include/glib-2.0/glib/gtree.h"
typedef gboolean (*GTraverseNodeFunc) (GTreeNode *node,
                                       gpointer data);



extern
GTree* g_tree_new (GCompareFunc key_compare_func);
extern
GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data);
extern
GTree* g_tree_new_full (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data,
                                 GDestroyNotify key_destroy_func,
                                 GDestroyNotify value_destroy_func);
extern
GTreeNode *g_tree_node_first (GTree *tree);
extern
GTreeNode *g_tree_node_last (GTree *tree);
extern
GTreeNode *g_tree_node_previous (GTreeNode *node);
extern
GTreeNode *g_tree_node_next (GTreeNode *node);
extern
GTree* g_tree_ref (GTree *tree);
extern
void g_tree_unref (GTree *tree);
extern
void g_tree_destroy (GTree *tree);
extern
GTreeNode *g_tree_insert_node (GTree *tree,
                               gpointer key,
                               gpointer value);
extern
void g_tree_insert (GTree *tree,
                                 gpointer key,
                                 gpointer value);
extern
GTreeNode *g_tree_replace_node (GTree *tree,
                                gpointer key,
                                gpointer value);
extern
void g_tree_replace (GTree *tree,
                                 gpointer key,
                                 gpointer value);
extern
gboolean g_tree_remove (GTree *tree,
                                 gconstpointer key);

extern
void g_tree_remove_all (GTree *tree);

extern
gboolean g_tree_steal (GTree *tree,
                                 gconstpointer key);
extern
gpointer g_tree_node_key (GTreeNode *node);
extern
gpointer g_tree_node_value (GTreeNode *node);
extern
GTreeNode *g_tree_lookup_node (GTree *tree,
                               gconstpointer key);
extern
gpointer g_tree_lookup (GTree *tree,
                                 gconstpointer key);
extern
gboolean g_tree_lookup_extended (GTree *tree,
                                 gconstpointer lookup_key,
                                 gpointer *orig_key,
                                 gpointer *value);
extern
void g_tree_foreach (GTree *tree,
                                 GTraverseFunc func,
                                 gpointer user_data);
extern
void g_tree_foreach_node (GTree *tree,
                          GTraverseNodeFunc func,
                          gpointer user_data);

__attribute__((__deprecated__)) extern
void g_tree_traverse (GTree *tree,
                                 GTraverseFunc traverse_func,
                                 GTraverseType traverse_type,
                                 gpointer user_data);

extern
GTreeNode *g_tree_search_node (GTree *tree,
                               GCompareFunc search_func,
                               gconstpointer user_data);
extern
gpointer g_tree_search (GTree *tree,
                                 GCompareFunc search_func,
                                 gconstpointer user_data);
extern
GTreeNode *g_tree_lower_bound (GTree *tree,
                               gconstpointer key);
extern
GTreeNode *g_tree_upper_bound (GTree *tree,
                               gconstpointer key);
extern
gint g_tree_height (GTree *tree);
extern
gint g_tree_nnodes (GTree *tree);
# 177 "/usr/include/glib-2.0/glib/gtree.h"

# 93 "/usr/include/glib-2.0/glib.h" 2


# 1 "/usr/include/glib-2.0/glib/guri.h" 1
# 19 "/usr/include/glib-2.0/glib/guri.h"
       










# 29 "/usr/include/glib-2.0/glib/guri.h"
#pragma GCC diagnostic push
# 29 "/usr/include/glib-2.0/glib/guri.h"

# 29 "/usr/include/glib-2.0/glib/guri.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/glib-2.0/glib/guri.h"


typedef struct _GUri GUri;

extern
GUri * g_uri_ref (GUri *uri);
extern
void g_uri_unref (GUri *uri);
# 79 "/usr/include/glib-2.0/glib/guri.h"

typedef enum {
  G_URI_FLAGS_NONE = 0,
  G_URI_FLAGS_PARSE_RELAXED = 1 << 0,
  G_URI_FLAGS_HAS_PASSWORD = 1 << 1,
  G_URI_FLAGS_HAS_AUTH_PARAMS = 1 << 2,
  G_URI_FLAGS_ENCODED = 1 << 3,
  G_URI_FLAGS_NON_DNS = 1 << 4,
  G_URI_FLAGS_ENCODED_QUERY = 1 << 5,
  G_URI_FLAGS_ENCODED_PATH = 1 << 6,
  G_URI_FLAGS_ENCODED_FRAGMENT = 1 << 7,
  G_URI_FLAGS_SCHEME_NORMALIZE = 1 << 8,
} GUriFlags;

extern
gboolean g_uri_split (const gchar *uri_ref,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **userinfo,
                                     gchar **host,
                                     gint *port,
                                     gchar **path,
                                     gchar **query,
                                     gchar **fragment,
                                     GError **error);
extern
gboolean g_uri_split_with_user (const gchar *uri_ref,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **user,
                                     gchar **password,
                                     gchar **auth_params,
                                     gchar **host,
                                     gint *port,
                                     gchar **path,
                                     gchar **query,
                                     gchar **fragment,
                                     GError **error);
extern
gboolean g_uri_split_network (const gchar *uri_string,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **host,
                                     gint *port,
                                     GError **error);

extern
gboolean g_uri_is_valid (const gchar *uri_string,
                                     GUriFlags flags,
                                     GError **error);

extern
gchar * g_uri_join (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *userinfo,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
extern
gchar * g_uri_join_with_user (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *user,
                                     const gchar *password,
                                     const gchar *auth_params,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);

extern
GUri * g_uri_parse (const gchar *uri_string,
                                     GUriFlags flags,
                                     GError **error);
extern
GUri * g_uri_parse_relative (GUri *base_uri,
                                     const gchar *uri_ref,
                                     GUriFlags flags,
                                     GError **error);

extern
gchar * g_uri_resolve_relative (const gchar *base_uri_string,
                                     const gchar *uri_ref,
                                     GUriFlags flags,
                                     GError **error);

extern
GUri * g_uri_build (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *userinfo,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
extern
GUri * g_uri_build_with_user (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *user,
                                     const gchar *password,
                                     const gchar *auth_params,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
# 204 "/usr/include/glib-2.0/glib/guri.h"

typedef enum {
  G_URI_HIDE_NONE = 0,
  G_URI_HIDE_USERINFO = 1 << 0,
  G_URI_HIDE_PASSWORD = 1 << 1,
  G_URI_HIDE_AUTH_PARAMS = 1 << 2,
  G_URI_HIDE_QUERY = 1 << 3,
  G_URI_HIDE_FRAGMENT = 1 << 4,
} GUriHideFlags;

extern
char * g_uri_to_string (GUri *uri);
extern
char * g_uri_to_string_partial (GUri *uri,
                                      GUriHideFlags flags);

extern
const gchar *g_uri_get_scheme (GUri *uri);
extern
const gchar *g_uri_get_userinfo (GUri *uri);
extern
const gchar *g_uri_get_user (GUri *uri);
extern
const gchar *g_uri_get_password (GUri *uri);
extern
const gchar *g_uri_get_auth_params (GUri *uri);
extern
const gchar *g_uri_get_host (GUri *uri);
extern
gint g_uri_get_port (GUri *uri);
extern
const gchar *g_uri_get_path (GUri *uri);
extern
const gchar *g_uri_get_query (GUri *uri);
extern
const gchar *g_uri_get_fragment (GUri *uri);
extern
GUriFlags g_uri_get_flags (GUri *uri);
# 256 "/usr/include/glib-2.0/glib/guri.h"

typedef enum {
  G_URI_PARAMS_NONE = 0,
  G_URI_PARAMS_CASE_INSENSITIVE = 1 << 0,
  G_URI_PARAMS_WWW_FORM = 1 << 1,
  G_URI_PARAMS_PARSE_RELAXED = 1 << 2,
} GUriParamsFlags;

extern
GHashTable *g_uri_parse_params (const gchar *params,
                                      gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags,
                                      GError **error);

typedef struct _GUriParamsIter GUriParamsIter;

struct _GUriParamsIter
{

  gint dummy0;
  gpointer dummy1;
  gpointer dummy2;
  guint8 dummy3[256];
};

extern
void g_uri_params_iter_init (GUriParamsIter *iter,
                                      const gchar *params,
                                      gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags);

extern
gboolean g_uri_params_iter_next (GUriParamsIter *iter,
                                      gchar **attribute,
                                      gchar **value,
                                      GError **error);
# 305 "/usr/include/glib-2.0/glib/guri.h"
extern
GQuark g_uri_error_quark (void);
# 326 "/usr/include/glib-2.0/glib/guri.h"
typedef enum {
  G_URI_ERROR_FAILED,
  G_URI_ERROR_BAD_SCHEME,
  G_URI_ERROR_BAD_USER,
  G_URI_ERROR_BAD_PASSWORD,
  G_URI_ERROR_BAD_AUTH_PARAMS,
  G_URI_ERROR_BAD_HOST,
  G_URI_ERROR_BAD_PORT,
  G_URI_ERROR_BAD_PATH,
  G_URI_ERROR_BAD_QUERY,
  G_URI_ERROR_BAD_FRAGMENT,
} GUriError;
# 387 "/usr/include/glib-2.0/glib/guri.h"
extern
char * g_uri_unescape_string (const char *escaped_string,
                                    const char *illegal_characters);
extern
char * g_uri_unescape_segment (const char *escaped_string,
                                    const char *escaped_string_end,
                                    const char *illegal_characters);

extern
char * g_uri_parse_scheme (const char *uri);
extern
const char *g_uri_peek_scheme (const char *uri);

extern
char * g_uri_escape_string (const char *unescaped,
                                    const char *reserved_chars_allowed,
                                    gboolean allow_utf8);

extern
GBytes * g_uri_unescape_bytes (const char *escaped_string,
                                    gssize length,
                                    const char *illegal_characters,
                                    GError **error);

extern
char * g_uri_escape_bytes (const guint8 *unescaped,
                                    gsize length,
                                    const char *reserved_chars_allowed);


# 416 "/usr/include/glib-2.0/glib/guri.h"
#pragma GCC diagnostic pop
# 416 "/usr/include/glib-2.0/glib/guri.h"



# 96 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/guuid.h" 1
# 32 "/usr/include/glib-2.0/glib/guuid.h"


extern
gboolean g_uuid_string_is_valid (const gchar *str);

extern
gchar * g_uuid_string_random (void);


# 98 "/usr/include/glib-2.0/glib.h" 2


# 1 "/usr/include/glib-2.0/glib/gversion.h" 1
# 34 "/usr/include/glib-2.0/glib/gversion.h"


extern const guint glib_major_version;
extern const guint glib_minor_version;
extern const guint glib_micro_version;
extern const guint glib_interface_age;
extern const guint glib_binary_age;

extern
const gchar * glib_check_version (guint required_major,
                                  guint required_minor,
                                  guint required_micro);








# 101 "/usr/include/glib-2.0/glib.h" 2






# 1 "/usr/include/glib-2.0/glib/deprecated/gallocator.h" 1
# 25 "/usr/include/glib-2.0/glib/deprecated/gallocator.h"


typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
# 42 "/usr/include/glib-2.0/glib/deprecated/gallocator.h"
__attribute__((__deprecated__)) extern
GMemChunk * g_mem_chunk_new (const gchar *name,
                                         gint atom_size,
                                         gsize area_size,
                                         gint type);
__attribute__((__deprecated__)) extern
void g_mem_chunk_destroy (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_free (GMemChunk *mem_chunk,
                                         gpointer mem);
__attribute__((__deprecated__)) extern
void g_mem_chunk_clean (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_reset (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_print (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_info (void);
__attribute__((__deprecated__)) extern
void g_blow_chunks (void);


__attribute__((__deprecated__)) extern
GAllocator * g_allocator_new (const gchar *name,
                                         guint n_preallocs);
__attribute__((__deprecated__)) extern
void g_allocator_free (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_list_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_list_pop_allocator (void);
__attribute__((__deprecated__)) extern
void g_slist_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_slist_pop_allocator (void);
__attribute__((__deprecated__)) extern
void g_node_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_node_pop_allocator (void);


# 108 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gcache.h" 1
# 34 "/usr/include/glib-2.0/glib/deprecated/gcache.h"


typedef struct _GCache GCache __attribute__((__deprecated__("Use '" "GHashTable" "' instead")));

typedef gpointer (*GCacheNewFunc) (gpointer key) __attribute__((__deprecated__));
typedef gpointer (*GCacheDupFunc) (gpointer value) __attribute__((__deprecated__));
typedef void (*GCacheDestroyFunc) (gpointer value) __attribute__((__deprecated__));


# 42 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma GCC diagnostic push
# 42 "/usr/include/glib-2.0/glib/deprecated/gcache.h"

# 42 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/glib-2.0/glib/deprecated/gcache.h"




__attribute__((__deprecated__)) extern
GCache* g_cache_new (GCacheNewFunc value_new_func,
                                GCacheDestroyFunc value_destroy_func,
                                GCacheDupFunc key_dup_func,
                                GCacheDestroyFunc key_destroy_func,
                                GHashFunc hash_key_func,
                                GHashFunc hash_value_func,
                                GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern
void g_cache_destroy (GCache *cache);
__attribute__((__deprecated__)) extern
gpointer g_cache_insert (GCache *cache,
                                gpointer key);
__attribute__((__deprecated__)) extern
void g_cache_remove (GCache *cache,
                                gconstpointer value);
__attribute__((__deprecated__)) extern
void g_cache_key_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
__attribute__((__deprecated__)) extern
void g_cache_value_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);


# 71 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma GCC diagnostic pop
# 71 "/usr/include/glib-2.0/glib/deprecated/gcache.h"



# 109 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gcompletion.h" 1
# 34 "/usr/include/glib-2.0/glib/deprecated/gcompletion.h"


typedef struct _GCompletion GCompletion;

typedef gchar* (*GCompletionFunc) (gpointer);




typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
                                        const gchar *s2,
                                        gsize n);

struct _GCompletion
{
  GList* items;
  GCompletionFunc func;

  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};

__attribute__((__deprecated__)) extern
GCompletion* g_completion_new (GCompletionFunc func);
__attribute__((__deprecated__)) extern
void g_completion_add_items (GCompletion* cmp,
                                         GList* items);
__attribute__((__deprecated__)) extern
void g_completion_remove_items (GCompletion* cmp,
                                         GList* items);
__attribute__((__deprecated__)) extern
void g_completion_clear_items (GCompletion* cmp);
__attribute__((__deprecated__)) extern
GList* g_completion_complete (GCompletion* cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
__attribute__((__deprecated__)) extern
GList* g_completion_complete_utf8 (GCompletion *cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
__attribute__((__deprecated__)) extern
void g_completion_set_compare (GCompletion *cmp,
                                         GCompletionStrncmpFunc strncmp_func);
__attribute__((__deprecated__)) extern
void g_completion_free (GCompletion* cmp);


# 110 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gmain.h" 1
# 34 "/usr/include/glib-2.0/glib/deprecated/gmain.h"

# 133 "/usr/include/glib-2.0/glib/deprecated/gmain.h"

# 111 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/grel.h" 1
# 34 "/usr/include/glib-2.0/glib/deprecated/grel.h"


typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;

struct _GTuples
{
  guint len;
};
# 67 "/usr/include/glib-2.0/glib/deprecated/grel.h"
__attribute__((__deprecated__)) extern
GRelation* g_relation_new (gint fields);
__attribute__((__deprecated__)) extern
void g_relation_destroy (GRelation *relation);
__attribute__((__deprecated__)) extern
void g_relation_index (GRelation *relation,
                               gint field,
                               GHashFunc hash_func,
                               GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern
void g_relation_insert (GRelation *relation,
                               ...);
__attribute__((__deprecated__)) extern
gint g_relation_delete (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
GTuples* g_relation_select (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
gint g_relation_count (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
gboolean g_relation_exists (GRelation *relation,
                               ...);
__attribute__((__deprecated__)) extern
void g_relation_print (GRelation *relation);
__attribute__((__deprecated__)) extern
void g_tuples_destroy (GTuples *tuples);
__attribute__((__deprecated__)) extern
gpointer g_tuples_index (GTuples *tuples,
                               gint index_,
                               gint field);


# 112 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gthread.h" 1
# 34 "/usr/include/glib-2.0/glib/deprecated/gthread.h"



# 36 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/glib/deprecated/gthread.h"

# 36 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/glib/deprecated/gthread.h"


typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority __attribute__((__deprecated__));

struct _GThread
{

  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};

typedef struct _GThreadFunctions GThreadFunctions __attribute__((__deprecated__));
struct _GThreadFunctions
{
  GMutex* (*mutex_new) (void);
  void (*mutex_lock) (GMutex *mutex);
  gboolean (*mutex_trylock) (GMutex *mutex);
  void (*mutex_unlock) (GMutex *mutex);
  void (*mutex_free) (GMutex *mutex);
  GCond* (*cond_new) (void);
  void (*cond_signal) (GCond *cond);
  void (*cond_broadcast) (GCond *cond);
  void (*cond_wait) (GCond *cond,
                                   GMutex *mutex);
  gboolean (*cond_timed_wait) (GCond *cond,
                                   GMutex *mutex,
                                   GTimeVal *end_time);
  void (*cond_free) (GCond *cond);
  GPrivate* (*private_new) (GDestroyNotify destructor);
  gpointer (*private_get) (GPrivate *private_key);
  void (*private_set) (GPrivate *private_key,
                                   gpointer data);
  void (*thread_create) (GThreadFunc func,
                                   gpointer data,
                                   gulong stack_size,
                                   gboolean joinable,
                                   gboolean bound,
                                   GThreadPriority priority,
                                   gpointer thread,
                                   GError **error);
  void (*thread_yield) (void);
  void (*thread_join) (gpointer thread);
  void (*thread_exit) (void);
  void (*thread_set_priority)(gpointer thread,
                                   GThreadPriority priority);
  void (*thread_self) (gpointer thread);
  gboolean (*thread_equal) (gpointer thread1,
                                   gpointer thread2);
} __attribute__((__deprecated__));

extern GThreadFunctions g_thread_functions_for_glib_use;
extern gboolean g_thread_use_default_impl;

extern guint64 (*g_thread_gettime) (void);

__attribute__((__deprecated__("Use '" "g_thread_new" "' instead"))) extern
GThread *g_thread_create (GThreadFunc func,
                                gpointer data,
                                gboolean joinable,
                                GError **error);

__attribute__((__deprecated__("Use '" "g_thread_new" "' instead"))) extern
GThread *g_thread_create_full (GThreadFunc func,
                                gpointer data,
                                gulong stack_size,
                                gboolean joinable,
                                gboolean bound,
                                GThreadPriority priority,
                                GError **error);

__attribute__((__deprecated__)) extern
void g_thread_set_priority (GThread *thread,
                                GThreadPriority priority);

__attribute__((__deprecated__)) extern
void g_thread_foreach (GFunc thread_func,
                                gpointer user_data);



# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4

# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4


# 98 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 138 "/usr/include/sched.h" 3 4

# 23 "/usr/include/pthread.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4





enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 441 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 750 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 946 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}



# 125 "/usr/include/glib-2.0/glib/deprecated/gthread.h" 2
# 133 "/usr/include/glib-2.0/glib/deprecated/gthread.h"

# 133 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
typedef struct
{
  GMutex *mutex;


  pthread_mutex_t unused;

} GStaticMutex __attribute__((__deprecated__("Use '" "GMutex" "' instead")));
# 149 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
__attribute__((__deprecated__("Use '" "g_mutex_init" "' instead"))) extern
void g_static_mutex_init (GStaticMutex *mutex);
__attribute__((__deprecated__("Use '" "g_mutex_clear" "' instead"))) extern
void g_static_mutex_free (GStaticMutex *mutex);
__attribute__((__deprecated__("Use '" "GMutex" "' instead"))) extern
GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);

typedef struct _GStaticRecMutex GStaticRecMutex __attribute__((__deprecated__("Use '" "GRecMutex" "' instead")));
struct _GStaticRecMutex
{

  GStaticMutex mutex;
  guint depth;


  union {



    pthread_t owner;

    gdouble dummy;
  } unused;
} __attribute__((__deprecated__("Use '" "GRecMutex" "' instead")));


__attribute__((__deprecated__("Use '" "g_rec_mutex_init" "' instead"))) extern
void g_static_rec_mutex_init (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_lock" "' instead"))) extern
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_try_lock" "' instead"))) extern
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_unlock" "' instead"))) extern
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);

__attribute__((__deprecated__)) extern
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex,
                                         guint depth);

__attribute__((__deprecated__)) extern
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_free" "' instead"))) extern
void g_static_rec_mutex_free (GStaticRecMutex *mutex);

typedef struct _GStaticRWLock GStaticRWLock __attribute__((__deprecated__("Use '" "GRWLock" "' instead")));
struct _GStaticRWLock
{

  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
} __attribute__((__deprecated__("Use '" "GRWLock" "' instead")));



__attribute__((__deprecated__("Use '" "g_rw_lock_init" "' instead"))) extern
void g_static_rw_lock_init (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_reader_lock" "' instead"))) extern
void g_static_rw_lock_reader_lock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_reader_trylock" "' instead"))) extern
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_reader_unlock" "' instead"))) extern
void g_static_rw_lock_reader_unlock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_writer_lock" "' instead"))) extern
void g_static_rw_lock_writer_lock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_writer_trylock" "' instead"))) extern
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_writer_unlock" "' instead"))) extern
void g_static_rw_lock_writer_unlock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_free" "' instead"))) extern
void g_static_rw_lock_free (GStaticRWLock *lock);

__attribute__((__deprecated__)) extern
GPrivate * g_private_new (GDestroyNotify notify);

typedef struct _GStaticPrivate GStaticPrivate __attribute__((__deprecated__("Use '" "GPrivate" "' instead")));
struct _GStaticPrivate
{

  guint index;
} __attribute__((__deprecated__("Use '" "GPrivate" "' instead")));


__attribute__((__deprecated__)) extern
void g_static_private_init (GStaticPrivate *private_key);

__attribute__((__deprecated__("Use '" "g_private_get" "' instead"))) extern
gpointer g_static_private_get (GStaticPrivate *private_key);

__attribute__((__deprecated__("Use '" "g_private_set" "' instead"))) extern
void g_static_private_set (GStaticPrivate *private_key,
                                          gpointer data,
                                          GDestroyNotify notify);

__attribute__((__deprecated__)) extern
void g_static_private_free (GStaticPrivate *private_key);

__attribute__((__deprecated__)) extern
gboolean g_once_init_enter_impl (volatile gsize *location);

__attribute__((__deprecated__)) extern
void g_thread_init (gpointer vtable);
__attribute__((__deprecated__)) extern
void g_thread_init_with_errorcheck_mutexes (gpointer vtable);

__attribute__((__deprecated__)) extern
gboolean g_thread_get_initialized (void);

extern gboolean g_threads_got_initialized;



__attribute__((__deprecated__)) extern
GMutex * g_mutex_new (void);
__attribute__((__deprecated__)) extern
void g_mutex_free (GMutex *mutex);
__attribute__((__deprecated__)) extern
GCond * g_cond_new (void);
__attribute__((__deprecated__)) extern
void g_cond_free (GCond *cond);
__attribute__((__deprecated__)) extern
gboolean g_cond_timed_wait (GCond *cond,
                                         GMutex *mutex,
                                         GTimeVal *timeval);


# 289 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma GCC diagnostic pop
# 289 "/usr/include/glib-2.0/glib/deprecated/gthread.h"



# 113 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/glib-autocleanups.h" 1
# 24 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static inline void
g_autoptr_cleanup_generic_gfree (void *p)
{
  void **pp = (void**)p;
  g_free (*pp);
}

static inline void
g_autoptr_cleanup_gstring_free (GString *string)
{
  if (string)
    g_string_free (string, (!(0)));
}




# 40 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 40 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 40 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 40 "/usr/include/glib-2.0/glib/glib-autocleanups.h"





typedef GAsyncQueue *GAsyncQueue_autoptr; typedef GList *GAsyncQueue_listautoptr; typedef GSList *GAsyncQueue_slistautoptr; typedef GQueue *GAsyncQueue_queueautoptr;
# 45 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 45 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 45 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncQueue (GAsyncQueue *_ptr) { if (_ptr) (g_async_queue_unref) ((GAsyncQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncQueue (GAsyncQueue **_ptr) { glib_autoptr_clear_GAsyncQueue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncQueue (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_async_queue_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncQueue (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_async_queue_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncQueue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_async_queue_unref); }
# 45 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 45 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GBookmarkFile *GBookmarkFile_autoptr; typedef GList *GBookmarkFile_listautoptr; typedef GSList *GBookmarkFile_slistautoptr; typedef GQueue *GBookmarkFile_queueautoptr;
# 46 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 46 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 46 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBookmarkFile (GBookmarkFile *_ptr) { if (_ptr) (g_bookmark_file_free) ((GBookmarkFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBookmarkFile (GBookmarkFile **_ptr) { glib_autoptr_clear_GBookmarkFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBookmarkFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bookmark_file_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBookmarkFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bookmark_file_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBookmarkFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_bookmark_file_free); }
# 46 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 46 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GBytes *GBytes_autoptr; typedef GList *GBytes_listautoptr; typedef GSList *GBytes_slistautoptr; typedef GQueue *GBytes_queueautoptr;
# 47 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 47 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 47 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 47 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBytes (GBytes *_ptr) { if (_ptr) (g_bytes_unref) ((GBytes *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBytes (GBytes **_ptr) { glib_autoptr_clear_GBytes (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBytes (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bytes_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBytes (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_bytes_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBytes (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_bytes_unref); }
# 47 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 47 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GChecksum *GChecksum_autoptr; typedef GList *GChecksum_listautoptr; typedef GSList *GChecksum_slistautoptr; typedef GQueue *GChecksum_queueautoptr;
# 48 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 48 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 48 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 48 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GChecksum (GChecksum *_ptr) { if (_ptr) (g_checksum_free) ((GChecksum *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GChecksum (GChecksum **_ptr) { glib_autoptr_clear_GChecksum (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GChecksum (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_checksum_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GChecksum (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_checksum_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GChecksum (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_checksum_free); }
# 48 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 48 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GDateTime *GDateTime_autoptr; typedef GList *GDateTime_listautoptr; typedef GSList *GDateTime_slistautoptr; typedef GQueue *GDateTime_queueautoptr;
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDateTime (GDateTime *_ptr) { if (_ptr) (g_date_time_unref) ((GDateTime *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDateTime (GDateTime **_ptr) { glib_autoptr_clear_GDateTime (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDateTime (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_time_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDateTime (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_time_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDateTime (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_date_time_unref); }
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GDate *GDate_autoptr; typedef GList *GDate_listautoptr; typedef GSList *GDate_slistautoptr; typedef GQueue *GDate_queueautoptr;
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDate (GDate *_ptr) { if (_ptr) (g_date_free) ((GDate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDate (GDate **_ptr) { glib_autoptr_clear_GDate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDate (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDate (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_date_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_date_free); }
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GDir *GDir_autoptr; typedef GList *GDir_listautoptr; typedef GSList *GDir_slistautoptr; typedef GQueue *GDir_queueautoptr;
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDir (GDir *_ptr) { if (_ptr) (g_dir_close) ((GDir *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDir (GDir **_ptr) { glib_autoptr_clear_GDir (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDir (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dir_close); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDir (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dir_close); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDir (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_dir_close); }
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GError *GError_autoptr; typedef GList *GError_listautoptr; typedef GSList *GError_slistautoptr; typedef GQueue *GError_queueautoptr;
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GError (GError *_ptr) { if (_ptr) (g_error_free) ((GError *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GError (GError **_ptr) { glib_autoptr_clear_GError (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GError (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_error_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GError (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_error_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GError (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_error_free); }
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GHashTable *GHashTable_autoptr; typedef GList *GHashTable_listautoptr; typedef GSList *GHashTable_slistautoptr; typedef GQueue *GHashTable_queueautoptr;
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GHashTable (GHashTable *_ptr) { if (_ptr) (g_hash_table_unref) ((GHashTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GHashTable (GHashTable **_ptr) { glib_autoptr_clear_GHashTable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GHashTable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hash_table_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GHashTable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hash_table_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GHashTable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_hash_table_unref); }
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GHmac *GHmac_autoptr; typedef GList *GHmac_listautoptr; typedef GSList *GHmac_slistautoptr; typedef GQueue *GHmac_queueautoptr;
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GHmac (GHmac *_ptr) { if (_ptr) (g_hmac_unref) ((GHmac *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GHmac (GHmac **_ptr) { glib_autoptr_clear_GHmac (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GHmac (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hmac_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GHmac (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_hmac_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GHmac (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_hmac_unref); }
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GIOChannel *GIOChannel_autoptr; typedef GList *GIOChannel_listautoptr; typedef GSList *GIOChannel_slistautoptr; typedef GQueue *GIOChannel_queueautoptr;
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOChannel (GIOChannel *_ptr) { if (_ptr) (g_io_channel_unref) ((GIOChannel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOChannel (GIOChannel **_ptr) { glib_autoptr_clear_GIOChannel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOChannel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_io_channel_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOChannel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_io_channel_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOChannel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_io_channel_unref); }
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GKeyFile *GKeyFile_autoptr; typedef GList *GKeyFile_listautoptr; typedef GSList *GKeyFile_slistautoptr; typedef GQueue *GKeyFile_queueautoptr;
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GKeyFile (GKeyFile *_ptr) { if (_ptr) (g_key_file_unref) ((GKeyFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GKeyFile (GKeyFile **_ptr) { glib_autoptr_clear_GKeyFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GKeyFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_key_file_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GKeyFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_key_file_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GKeyFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_key_file_unref); }
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GList *GList_autoptr; typedef GList *GList_listautoptr; typedef GSList *GList_slistautoptr; typedef GQueue *GList_queueautoptr;
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GList (GList *_ptr) { if (_ptr) (g_list_free) ((GList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GList (GList **_ptr) { glib_autoptr_clear_GList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_list_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_list_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_list_free); }
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GArray *GArray_autoptr; typedef GList *GArray_listautoptr; typedef GSList *GArray_slistautoptr; typedef GQueue *GArray_queueautoptr;
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GArray (GArray *_ptr) { if (_ptr) (g_array_unref) ((GArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GArray (GArray **_ptr) { glib_autoptr_clear_GArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_array_unref); }
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GPtrArray *GPtrArray_autoptr; typedef GList *GPtrArray_listautoptr; typedef GSList *GPtrArray_slistautoptr; typedef GQueue *GPtrArray_queueautoptr;
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPtrArray (GPtrArray *_ptr) { if (_ptr) (g_ptr_array_unref) ((GPtrArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPtrArray (GPtrArray **_ptr) { glib_autoptr_clear_GPtrArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPtrArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ptr_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPtrArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ptr_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPtrArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_ptr_array_unref); }
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GByteArray *GByteArray_autoptr; typedef GList *GByteArray_listautoptr; typedef GSList *GByteArray_slistautoptr; typedef GQueue *GByteArray_queueautoptr;
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GByteArray (GByteArray *_ptr) { if (_ptr) (g_byte_array_unref) ((GByteArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GByteArray (GByteArray **_ptr) { glib_autoptr_clear_GByteArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GByteArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_byte_array_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GByteArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_byte_array_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GByteArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_byte_array_unref); }
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMainContext *GMainContext_autoptr; typedef GList *GMainContext_listautoptr; typedef GSList *GMainContext_slistautoptr; typedef GQueue *GMainContext_queueautoptr;
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainContext (GMainContext *_ptr) { if (_ptr) (g_main_context_unref) ((GMainContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainContext (GMainContext **_ptr) { glib_autoptr_clear_GMainContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_main_context_unref); }
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMainContextPusher *GMainContextPusher_autoptr; typedef GList *GMainContextPusher_listautoptr; typedef GSList *GMainContextPusher_slistautoptr; typedef GQueue *GMainContextPusher_queueautoptr;
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainContextPusher (GMainContextPusher *_ptr) { if (_ptr) (g_main_context_pusher_free) ((GMainContextPusher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainContextPusher (GMainContextPusher **_ptr) { glib_autoptr_clear_GMainContextPusher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainContextPusher (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_pusher_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainContextPusher (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_context_pusher_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainContextPusher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_main_context_pusher_free); }
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMainLoop *GMainLoop_autoptr; typedef GList *GMainLoop_listautoptr; typedef GSList *GMainLoop_slistautoptr; typedef GQueue *GMainLoop_queueautoptr;
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainLoop (GMainLoop *_ptr) { if (_ptr) (g_main_loop_unref) ((GMainLoop *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainLoop (GMainLoop **_ptr) { glib_autoptr_clear_GMainLoop (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainLoop (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_loop_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainLoop (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_main_loop_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainLoop (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_main_loop_unref); }
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GSource *GSource_autoptr; typedef GList *GSource_listautoptr; typedef GSList *GSource_slistautoptr; typedef GQueue *GSource_queueautoptr;
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSource (GSource *_ptr) { if (_ptr) (g_source_unref) ((GSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSource (GSource **_ptr) { glib_autoptr_clear_GSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSource (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_source_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSource (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_source_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_source_unref); }
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMappedFile *GMappedFile_autoptr; typedef GList *GMappedFile_listautoptr; typedef GSList *GMappedFile_slistautoptr; typedef GQueue *GMappedFile_queueautoptr;
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMappedFile (GMappedFile *_ptr) { if (_ptr) (g_mapped_file_unref) ((GMappedFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMappedFile (GMappedFile **_ptr) { glib_autoptr_clear_GMappedFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMappedFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mapped_file_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMappedFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mapped_file_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMappedFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_mapped_file_unref); }
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMarkupParseContext *GMarkupParseContext_autoptr; typedef GList *GMarkupParseContext_listautoptr; typedef GSList *GMarkupParseContext_slistautoptr; typedef GQueue *GMarkupParseContext_queueautoptr;
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMarkupParseContext (GMarkupParseContext *_ptr) { if (_ptr) (g_markup_parse_context_unref) ((GMarkupParseContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMarkupParseContext (GMarkupParseContext **_ptr) { glib_autoptr_clear_GMarkupParseContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMarkupParseContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_markup_parse_context_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMarkupParseContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_markup_parse_context_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMarkupParseContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_markup_parse_context_unref); }
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GNode *GNode_autoptr; typedef GList *GNode_listautoptr; typedef GSList *GNode_slistautoptr; typedef GQueue *GNode_queueautoptr;
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNode (GNode *_ptr) { if (_ptr) (g_node_destroy) ((GNode *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNode (GNode **_ptr) { glib_autoptr_clear_GNode (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNode (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_node_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNode (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_node_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNode (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_node_destroy); }
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GOptionContext *GOptionContext_autoptr; typedef GList *GOptionContext_listautoptr; typedef GSList *GOptionContext_slistautoptr; typedef GQueue *GOptionContext_queueautoptr;
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOptionContext (GOptionContext *_ptr) { if (_ptr) (g_option_context_free) ((GOptionContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOptionContext (GOptionContext **_ptr) { glib_autoptr_clear_GOptionContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOptionContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_context_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOptionContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_context_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOptionContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_option_context_free); }
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GOptionGroup *GOptionGroup_autoptr; typedef GList *GOptionGroup_listautoptr; typedef GSList *GOptionGroup_slistautoptr; typedef GQueue *GOptionGroup_queueautoptr;
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOptionGroup (GOptionGroup *_ptr) { if (_ptr) (g_option_group_unref) ((GOptionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOptionGroup (GOptionGroup **_ptr) { glib_autoptr_clear_GOptionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOptionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_group_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOptionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_option_group_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOptionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_option_group_unref); }
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GPatternSpec *GPatternSpec_autoptr; typedef GList *GPatternSpec_listautoptr; typedef GSList *GPatternSpec_slistautoptr; typedef GQueue *GPatternSpec_queueautoptr;
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPatternSpec (GPatternSpec *_ptr) { if (_ptr) (g_pattern_spec_free) ((GPatternSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPatternSpec (GPatternSpec **_ptr) { glib_autoptr_clear_GPatternSpec (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPatternSpec (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_pattern_spec_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPatternSpec (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_pattern_spec_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPatternSpec (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_pattern_spec_free); }
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GQueue *GQueue_autoptr; typedef GList *GQueue_listautoptr; typedef GSList *GQueue_slistautoptr; typedef GQueue *GQueue_queueautoptr;
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GQueue (GQueue *_ptr) { if (_ptr) (g_queue_free) ((GQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GQueue (GQueue **_ptr) { glib_autoptr_clear_GQueue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GQueue (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_queue_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GQueue (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_queue_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GQueue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_queue_free); }
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"


# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GQueue (GQueue *_ptr) { (g_queue_clear) (_ptr); }
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GRand *GRand_autoptr; typedef GList *GRand_listautoptr; typedef GSList *GRand_slistautoptr; typedef GQueue *GRand_queueautoptr;
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRand (GRand *_ptr) { if (_ptr) (g_rand_free) ((GRand *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRand (GRand **_ptr) { glib_autoptr_clear_GRand (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRand (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rand_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRand (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rand_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRand (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rand_free); }
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GRegex *GRegex_autoptr; typedef GList *GRegex_listautoptr; typedef GSList *GRegex_slistautoptr; typedef GQueue *GRegex_queueautoptr;
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRegex (GRegex *_ptr) { if (_ptr) (g_regex_unref) ((GRegex *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRegex (GRegex **_ptr) { glib_autoptr_clear_GRegex (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRegex (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_regex_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRegex (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_regex_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRegex (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_regex_unref); }
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMatchInfo *GMatchInfo_autoptr; typedef GList *GMatchInfo_listautoptr; typedef GSList *GMatchInfo_slistautoptr; typedef GQueue *GMatchInfo_queueautoptr;
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMatchInfo (GMatchInfo *_ptr) { if (_ptr) (g_match_info_unref) ((GMatchInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMatchInfo (GMatchInfo **_ptr) { glib_autoptr_clear_GMatchInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMatchInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_match_info_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMatchInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_match_info_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMatchInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_match_info_unref); }
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GScanner *GScanner_autoptr; typedef GList *GScanner_listautoptr; typedef GSList *GScanner_slistautoptr; typedef GQueue *GScanner_queueautoptr;
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GScanner (GScanner *_ptr) { if (_ptr) (g_scanner_destroy) ((GScanner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GScanner (GScanner **_ptr) { glib_autoptr_clear_GScanner (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GScanner (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_scanner_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GScanner (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_scanner_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GScanner (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_scanner_destroy); }
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GSequence *GSequence_autoptr; typedef GList *GSequence_listautoptr; typedef GSList *GSequence_slistautoptr; typedef GQueue *GSequence_queueautoptr;
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSequence (GSequence *_ptr) { if (_ptr) (g_sequence_free) ((GSequence *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSequence (GSequence **_ptr) { glib_autoptr_clear_GSequence (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSequence (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_sequence_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSequence (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_sequence_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSequence (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_sequence_free); }
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GSList *GSList_autoptr; typedef GList *GSList_listautoptr; typedef GSList *GSList_slistautoptr; typedef GQueue *GSList_queueautoptr;
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSList (GSList *_ptr) { if (_ptr) (g_slist_free) ((GSList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSList (GSList **_ptr) { glib_autoptr_clear_GSList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_slist_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_slist_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_slist_free); }
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GString *GString_autoptr; typedef GList *GString_listautoptr; typedef GSList *GString_slistautoptr; typedef GQueue *GString_queueautoptr;
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GString (GString *_ptr) { if (_ptr) (g_autoptr_cleanup_gstring_free) ((GString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GString (GString **_ptr) { glib_autoptr_clear_GString (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GString (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_autoptr_cleanup_gstring_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GString (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_autoptr_cleanup_gstring_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GString (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_autoptr_cleanup_gstring_free); }
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GStringChunk *GStringChunk_autoptr; typedef GList *GStringChunk_listautoptr; typedef GSList *GStringChunk_slistautoptr; typedef GQueue *GStringChunk_queueautoptr;
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GStringChunk (GStringChunk *_ptr) { if (_ptr) (g_string_chunk_free) ((GStringChunk *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GStringChunk (GStringChunk **_ptr) { glib_autoptr_clear_GStringChunk (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GStringChunk (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_string_chunk_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GStringChunk (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_string_chunk_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GStringChunk (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_string_chunk_free); }
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GStrvBuilder *GStrvBuilder_autoptr; typedef GList *GStrvBuilder_listautoptr; typedef GSList *GStrvBuilder_slistautoptr; typedef GQueue *GStrvBuilder_queueautoptr;
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GStrvBuilder (GStrvBuilder *_ptr) { if (_ptr) (g_strv_builder_unref) ((GStrvBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GStrvBuilder (GStrvBuilder **_ptr) { glib_autoptr_clear_GStrvBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GStrvBuilder (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_strv_builder_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GStrvBuilder (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_strv_builder_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GStrvBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_strv_builder_unref); }
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GThread *GThread_autoptr; typedef GList *GThread_listautoptr; typedef GSList *GThread_slistautoptr; typedef GQueue *GThread_queueautoptr;
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThread (GThread *_ptr) { if (_ptr) (g_thread_unref) ((GThread *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThread (GThread **_ptr) { glib_autoptr_clear_GThread (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThread (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_thread_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThread (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_thread_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThread (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_thread_unref); }
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"


# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GMutex (GMutex *_ptr) { (g_mutex_clear) (_ptr); }
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GMutexLocker *GMutexLocker_autoptr; typedef GList *GMutexLocker_listautoptr; typedef GSList *GMutexLocker_slistautoptr; typedef GQueue *GMutexLocker_queueautoptr;
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMutexLocker (GMutexLocker *_ptr) { if (_ptr) (g_mutex_locker_free) ((GMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMutexLocker (GMutexLocker **_ptr) { glib_autoptr_clear_GMutexLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMutexLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMutexLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMutexLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_mutex_locker_free); }
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GRecMutexLocker *GRecMutexLocker_autoptr; typedef GList *GRecMutexLocker_listautoptr; typedef GSList *GRecMutexLocker_slistautoptr; typedef GQueue *GRecMutexLocker_queueautoptr;
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRecMutexLocker (GRecMutexLocker *_ptr) { if (_ptr) (g_rec_mutex_locker_free) ((GRecMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRecMutexLocker (GRecMutexLocker **_ptr) { glib_autoptr_clear_GRecMutexLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRecMutexLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rec_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRecMutexLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rec_mutex_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRecMutexLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rec_mutex_locker_free); }
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GRWLockWriterLocker *GRWLockWriterLocker_autoptr; typedef GList *GRWLockWriterLocker_listautoptr; typedef GSList *GRWLockWriterLocker_slistautoptr; typedef GQueue *GRWLockWriterLocker_queueautoptr;
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRWLockWriterLocker (GRWLockWriterLocker *_ptr) { if (_ptr) (g_rw_lock_writer_locker_free) ((GRWLockWriterLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRWLockWriterLocker (GRWLockWriterLocker **_ptr) { glib_autoptr_clear_GRWLockWriterLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRWLockWriterLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_writer_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRWLockWriterLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_writer_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRWLockWriterLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rw_lock_writer_locker_free); }
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GRWLockReaderLocker *GRWLockReaderLocker_autoptr; typedef GList *GRWLockReaderLocker_listautoptr; typedef GSList *GRWLockReaderLocker_slistautoptr; typedef GQueue *GRWLockReaderLocker_queueautoptr;
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRWLockReaderLocker (GRWLockReaderLocker *_ptr) { if (_ptr) (g_rw_lock_reader_locker_free) ((GRWLockReaderLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRWLockReaderLocker (GRWLockReaderLocker **_ptr) { glib_autoptr_clear_GRWLockReaderLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRWLockReaderLocker (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_reader_locker_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRWLockReaderLocker (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_rw_lock_reader_locker_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRWLockReaderLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_rw_lock_reader_locker_free); }
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"


# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GCond (GCond *_ptr) { (g_cond_clear) (_ptr); }
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GTimer *GTimer_autoptr; typedef GList *GTimer_listautoptr; typedef GSList *GTimer_slistautoptr; typedef GQueue *GTimer_queueautoptr;
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTimer (GTimer *_ptr) { if (_ptr) (g_timer_destroy) ((GTimer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTimer (GTimer **_ptr) { glib_autoptr_clear_GTimer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTimer (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_timer_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTimer (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_timer_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTimer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_timer_destroy); }
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GTimeZone *GTimeZone_autoptr; typedef GList *GTimeZone_listautoptr; typedef GSList *GTimeZone_slistautoptr; typedef GQueue *GTimeZone_queueautoptr;
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTimeZone (GTimeZone *_ptr) { if (_ptr) (g_time_zone_unref) ((GTimeZone *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTimeZone (GTimeZone **_ptr) { glib_autoptr_clear_GTimeZone (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTimeZone (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_time_zone_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTimeZone (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_time_zone_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTimeZone (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_time_zone_unref); }
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GTree *GTree_autoptr; typedef GList *GTree_listautoptr; typedef GSList *GTree_slistautoptr; typedef GQueue *GTree_queueautoptr;
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTree (GTree *_ptr) { if (_ptr) (g_tree_unref) ((GTree *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTree (GTree **_ptr) { glib_autoptr_clear_GTree (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTree (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_tree_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTree (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_tree_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTree (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_tree_unref); }
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GVariant *GVariant_autoptr; typedef GList *GVariant_listautoptr; typedef GSList *GVariant_slistautoptr; typedef GQueue *GVariant_queueautoptr;
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariant (GVariant *_ptr) { if (_ptr) (g_variant_unref) ((GVariant *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariant (GVariant **_ptr) { glib_autoptr_clear_GVariant (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariant (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariant (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariant (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_unref); }
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GVariantBuilder *GVariantBuilder_autoptr; typedef GList *GVariantBuilder_listautoptr; typedef GSList *GVariantBuilder_slistautoptr; typedef GQueue *GVariantBuilder_queueautoptr;
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantBuilder (GVariantBuilder *_ptr) { if (_ptr) (g_variant_builder_unref) ((GVariantBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantBuilder (GVariantBuilder **_ptr) { glib_autoptr_clear_GVariantBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantBuilder (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_builder_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantBuilder (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_builder_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_builder_unref); }
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"


# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GVariantBuilder (GVariantBuilder *_ptr) { (g_variant_builder_clear) (_ptr); }
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GVariantIter *GVariantIter_autoptr; typedef GList *GVariantIter_listautoptr; typedef GSList *GVariantIter_slistautoptr; typedef GQueue *GVariantIter_queueautoptr;
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantIter (GVariantIter *_ptr) { if (_ptr) (g_variant_iter_free) ((GVariantIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantIter (GVariantIter **_ptr) { glib_autoptr_clear_GVariantIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_iter_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_iter_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_iter_free); }
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GVariantDict *GVariantDict_autoptr; typedef GList *GVariantDict_listautoptr; typedef GSList *GVariantDict_slistautoptr; typedef GQueue *GVariantDict_queueautoptr;
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantDict (GVariantDict *_ptr) { if (_ptr) (g_variant_dict_unref) ((GVariantDict *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantDict (GVariantDict **_ptr) { glib_autoptr_clear_GVariantDict (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantDict (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_dict_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantDict (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_dict_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantDict (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_dict_unref); }
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"


# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GVariantDict (GVariantDict *_ptr) { (g_variant_dict_clear) (_ptr); }
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GVariantType *GVariantType_autoptr; typedef GList *GVariantType_listautoptr; typedef GSList *GVariantType_slistautoptr; typedef GQueue *GVariantType_queueautoptr;
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantType (GVariantType *_ptr) { if (_ptr) (g_variant_type_free) ((GVariantType *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantType (GVariantType **_ptr) { glib_autoptr_clear_GVariantType (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantType (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_type_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantType (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_variant_type_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantType (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_variant_type_free); }
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"


# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GStrv (GStrv *_ptr) { if (*_ptr != 
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h" 3 4
((void *)0)
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
) (g_strfreev) (*_ptr); }
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GRefString *GRefString_autoptr; typedef GList *GRefString_listautoptr; typedef GSList *GRefString_slistautoptr; typedef GQueue *GRefString_queueautoptr;
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRefString (GRefString *_ptr) { if (_ptr) (g_ref_string_release) ((GRefString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRefString (GRefString **_ptr) { glib_autoptr_clear_GRefString (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRefString (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ref_string_release); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRefString (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_ref_string_release); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRefString (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_ref_string_release); }
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

typedef GUri *GUri_autoptr; typedef GList *GUri_listautoptr; typedef GSList *GUri_slistautoptr; typedef GQueue *GUri_queueautoptr;
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUri (GUri *_ptr) { if (_ptr) (g_uri_unref) ((GUri *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUri (GUri **_ptr) { glib_autoptr_clear_GUri (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUri (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_uri_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUri (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_uri_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUri (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_uri_unref); }
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"



# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 115 "/usr/include/glib-2.0/glib.h" 2
# 23 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.h" 2

gboolean autosave_check_autosave(gpointer data);
# 34 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c" 2
# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h" 1
# 23 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h"
typedef struct _Diagram Diagram;

# 1 "../lib/geometry.h" 1
# 24 "../lib/geometry.h"
# 1 "../config.h" 1
# 25 "../lib/geometry.h" 2


# 1 "../lib/diatypes.h" 1
# 28 "../lib/diatypes.h"
typedef double real;


typedef struct _DiagramData DiagramData;
typedef struct _Layer Layer;
typedef struct _NewDiagramData NewDiagramData;


typedef struct _Arrow Arrow;


typedef struct _BezierConn BezierConn;


typedef struct _BezierShape BezierShape;


typedef struct _PolyBBExtras PolyBBExtras;
typedef struct _LineBBExtras LineBBExtras;
typedef struct _ElementBBExtras ElementBBExtras;


typedef struct _Color Color;


typedef struct _Connection Connection;


typedef struct _ConnectionPoint ConnectionPoint;


typedef struct _MultipointCreateData MultipointCreateData;
typedef struct _BezierCreateData BezierCreateData;


typedef struct _DiaImage DiaImage;


typedef struct _DiaGdkRenderer DiaGdkRenderer;
typedef struct _DiaGdkRendererClass DiaGdkRendererClass;


typedef struct _DiaMenuItem DiaMenuItem;
typedef struct _DiaMenu DiaMenu;


typedef struct _DiaContext DiaContext;


typedef struct _BezierApprox BezierApprox;
typedef struct _DiaRenderer DiaRenderer;
typedef struct _DiaRendererClass DiaRendererClass;
typedef struct _DiaInteractiveRendererInterface DiaInteractiveRendererInterface;


typedef struct _DiaCellRendererProperty DiaCellRendererProperty;


typedef struct _DiaSvgRenderer DiaSvgRenderer;
typedef struct _DiaSvgRendererClass DiaSvgRendererClass;


typedef struct _DiaTransform DiaTransform;


typedef struct _Element Element;


typedef struct _DiaExportFilter DiaExportFilter;
typedef struct _DiaImportFilter DiaImportFilter;
typedef struct _DiaCallbackFilter DiaCallbackFilter;


typedef struct _Focus Focus;


typedef struct _DiaFont DiaFont;
typedef struct _DiaFontClass DiaFontClass;


typedef struct _Point Point;
typedef struct _Rectangle Rectangle;
typedef struct _IntRectangle IntRectangle;
typedef struct _BezPoint BezPoint;
typedef struct _DiaMatrix DiaMatrix;


typedef struct _Group Group;


typedef struct _Handle Handle;


typedef struct _NewOrthConn NewOrthConn;


typedef struct _ObjectState ObjectState;
typedef struct _ObjectChange ObjectChange;


typedef struct _DiaObject DiaObject;
typedef struct _ObjectOps ObjectOps;
typedef struct _DiaObjectType DiaObjectType;
typedef struct _ObjectTypeOps ObjectTypeOps;


typedef struct _OrthConn OrthConn;


typedef struct _PaperInfo PaperInfo;


typedef struct _DiaPattern DiaPattern;


typedef struct _PluginInfo PluginInfo;


typedef struct _PolyConn PolyConn;


typedef struct _PolyShape PolyShape;


typedef struct _PropDescription PropDescription;
typedef struct _Property Property;
typedef struct _PropEventData PropEventData;
typedef struct _PropDialog PropDialog;
typedef struct _PropEventHandlerChain PropEventHandlerChain;
typedef struct _PropWidgetAssoc PropWidgetAssoc;
typedef struct _PropertyOps PropertyOps;
typedef struct _PropNumData PropNumData;
typedef struct _PropEnumData PropEnumData;
typedef struct _PropDescCommonArrayExtra PropDescCommonArrayExtra;
typedef struct _PropDescDArrayExtra PropDescDArrayExtra;
typedef struct _PropDescSArrayExtra PropDescSArrayExtra;
typedef struct _PropOffset PropOffset;


typedef struct _Sheet Sheet;
typedef struct _SheetObject SheetObject;


typedef struct _Text Text;


typedef struct _TextLine TextLine;


typedef struct _TextAttributes TextAttributes;


typedef struct _DiaSizeSelector DiaSizeSelector;
typedef struct _DiaSizeSelectorClass DiaSizeSelectorClass;
typedef struct _DiaFontSelector DiaFontSelector;
typedef struct _DiaFontSelectorClass DiaFontSelectorClass;
typedef struct _DiaLineStyleSelector DiaLineStyleSelector;
typedef struct _DiaLineStyleSelectorClass DiaLineStyleSelectorClass;
typedef struct _DiaColorSelector DiaColorSelector;
typedef struct _DiaColorSelectorClass DiaColorSelectorClass;
typedef struct _DiaArrowSelector DiaArrowSelector;
typedef struct _DiaArrowSelectorClass DiaArrowSelectorClass;
typedef struct _DiaFileSelector DiaFileSelector;
typedef struct _DiaFileSelectorClass DiaFileSelectorClass;


typedef void (*DiaObjectFunc) (const DiaObject *obj);

typedef enum {
  PATH_UNION = 1,
  PATH_DIFFERENCE,
  PATH_INTERSECTION,
  PATH_EXCLUSION
} PathCombineMode;
# 28 "../lib/geometry.h" 2


# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4












# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 163 "/usr/include/math.h" 3 4

# 163 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));
# 85 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 119 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




 extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));





 extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
 extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));




extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));







extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));
# 293 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));
# 435 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));
# 85 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));





 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 119 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));






 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




 extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));





 extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
 extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));




extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));







extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));
# 293 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));
# 435 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
# 85 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 119 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




 extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));





 extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
 extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));




extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));







extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
# 293 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));
# 435 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 400 "/usr/include/math.h" 2 3 4
# 481 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 482 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1423 "/usr/include/math.h" 3 4

# 31 "../lib/geometry.h" 2
# 71 "../lib/geometry.h"

# 81 "../lib/geometry.h"

# 81 "../lib/geometry.h"
typedef real coord;


struct _Point {
  coord x;
  coord y;
};


struct _Rectangle {
  coord left;
  coord top;
  coord right;
  coord bottom;
};


struct _IntRectangle {
  int left;
  int top;
  int right;
  int bottom;
};





struct _BezPoint {
  enum {
    BEZ_MOVE_TO,
    BEZ_LINE_TO,
    BEZ_CURVE_TO
  } type;
  Point p1;
  Point p2;
  Point p3;
};
# 127 "../lib/geometry.h"
struct _DiaMatrix {
  real xx; real yx;
  real xy; real yy;
  real x0; real y0;
};

gboolean dia_matrix_is_identity (const DiaMatrix *matix);
gboolean dia_matrix_get_angle_and_scales (const DiaMatrix *m,
                                          real *a,
       real *sx,
       real *sy);
void dia_matrix_set_angle_and_scales (DiaMatrix *m,
                                      real a,
          real sx,
          real sy);
void dia_matrix_multiply (DiaMatrix *result, const DiaMatrix *a, const DiaMatrix *b);
gboolean dia_matrix_is_invertible (const DiaMatrix *matrix);
void dia_matrix_set_rotate_around (DiaMatrix *result, real angle, const Point *around);





static inline
# 150 "../lib/geometry.h"

# 150 "../lib/geometry.h"
 void point_add(Point *p1, const Point *p2);

static inline
# 152 "../lib/geometry.h"

# 152 "../lib/geometry.h"
 void
point_add(Point *p1, const Point *p2)
{
  p1->x += p2->x;
  p1->y += p2->y;
}


static inline
# 160 "../lib/geometry.h"

# 160 "../lib/geometry.h"
 void point_sub(Point *p1, const Point *p2);

static inline
# 162 "../lib/geometry.h"

# 162 "../lib/geometry.h"
 void
point_sub(Point *p1, const Point *p2)
{
  p1->x -= p2->x;
  p1->y -= p2->y;
}


static inline
# 170 "../lib/geometry.h"

# 170 "../lib/geometry.h"
 real point_dot(const Point *p1, const Point *p2);

static inline
# 172 "../lib/geometry.h"

# 172 "../lib/geometry.h"
 real
point_dot(const Point *p1, const Point *p2)
{
  return p1->x*p2->x + p1->y*p2->y;
}


static inline
# 179 "../lib/geometry.h"

# 179 "../lib/geometry.h"
 real point_len(const Point *p);

static inline
# 181 "../lib/geometry.h"

# 181 "../lib/geometry.h"
 real
point_len(const Point *p)
{
  return sqrt(p->x*p->x + p->y*p->y);
}


static inline
# 188 "../lib/geometry.h"

# 188 "../lib/geometry.h"
 void point_scale(Point *p, real alpha);

static inline
# 190 "../lib/geometry.h"

# 190 "../lib/geometry.h"
 void
point_scale(Point *p, real alpha)
{
  p->x *= alpha;
  p->y *= alpha;
}


static inline
# 198 "../lib/geometry.h"

# 198 "../lib/geometry.h"
 void point_normalize(Point *p);

static inline
# 200 "../lib/geometry.h"

# 200 "../lib/geometry.h"
 void
point_normalize(Point *p)
{
  real len;

  len = sqrt(p->x*p->x + p->y*p->y);






  if (len > 0.0) {
    p->x /= len;
    p->y /= len;
  } else {
    p->x = 0.0;
    p->y = 0.0;
  }

}


static inline
# 223 "../lib/geometry.h"

# 223 "../lib/geometry.h"
 void point_rotate(Point *p1, const Point *p2);

static inline
# 225 "../lib/geometry.h"

# 225 "../lib/geometry.h"
 void
point_rotate(Point *p1, const Point *p2)
{
  p1->x = p1->x*p2->x - p1->y*p2->y;
  p1->y = p1->x*p2->y + p1->y*p2->x;
}


static inline
# 233 "../lib/geometry.h"

# 233 "../lib/geometry.h"
 void point_get_normed(Point *dst, const Point *src);

static inline
# 235 "../lib/geometry.h"

# 235 "../lib/geometry.h"
 void
point_get_normed(Point *dst, const Point *src)
{
  real len;

  len = sqrt(src->x*src->x + src->y*src->y);

  dst->x = src->x / len;
  dst->y = src->y / len;
}


static inline
# 247 "../lib/geometry.h"

# 247 "../lib/geometry.h"
 void point_get_perp(Point *dst, const Point *src);

static inline
# 249 "../lib/geometry.h"

# 249 "../lib/geometry.h"
 void
point_get_perp(Point *dst, const Point *src)
{


  dst->y = src->x;
  dst->x = -src->y;
}


static inline
# 259 "../lib/geometry.h"

# 259 "../lib/geometry.h"
 void point_copy(Point *dst, const Point *src);

static inline
# 261 "../lib/geometry.h"

# 261 "../lib/geometry.h"
 void
point_copy(Point *dst, const Point *src)
{





  dst->x = src->x;
  dst->y = src->y;
}


static inline
# 274 "../lib/geometry.h"

# 274 "../lib/geometry.h"
 void point_add_scaled(Point *dst, const Point *src, real alpha);

static inline
# 276 "../lib/geometry.h"

# 276 "../lib/geometry.h"
 void
point_add_scaled(Point *dst, const Point *src, real alpha)
{

  dst->x += alpha * src->x;
  dst->y += alpha * src->y;
}


static inline
# 285 "../lib/geometry.h"

# 285 "../lib/geometry.h"
 void point_copy_add_scaled(Point *dst, const Point *src,
                                         const Point *vct,
      real alpha);

static inline
# 289 "../lib/geometry.h"

# 289 "../lib/geometry.h"
 void
point_copy_add_scaled(Point *dst, const Point *src,
                      const Point *vct, real alpha)
{

  dst->x = src->x + (alpha * vct->x);
  dst->y = src->y + (alpha * vct->y);
}


void point_convex(Point *dst, const Point *src1, const Point *src2, real alpha);

void rectangle_union(Rectangle *r1, const Rectangle *r2);
void int_rectangle_union(IntRectangle *r1, const IntRectangle *r2);
void rectangle_intersection(Rectangle *r1, const Rectangle *r2);
int rectangle_intersects(const Rectangle *r1, const Rectangle *r2);
int point_in_rectangle(const Rectangle* r, const Point *p);
int rectangle_in_rectangle(const Rectangle* outer, const Rectangle *inner);
void rectangle_add_point(Rectangle *r, const Point *p);

static inline
# 309 "../lib/geometry.h"

# 309 "../lib/geometry.h"
 gboolean rectangle_equals(const Rectangle *old_extents,
                                         const Rectangle *new_extents);

static inline
# 312 "../lib/geometry.h"

# 312 "../lib/geometry.h"
 gboolean
rectangle_equals(const Rectangle *r1, const Rectangle *r2)
{
  return ( (r2->left == r1->left) &&
           (r2->right == r1->right) &&
           (r2->top == r1->top) &&
           (r2->bottom == r1->bottom) );
}


static inline
# 322 "../lib/geometry.h"

# 322 "../lib/geometry.h"
 real distance_point_point(const Point *p1, const Point *p2);

static inline
# 324 "../lib/geometry.h"

# 324 "../lib/geometry.h"
 real
distance_point_point(const Point *p1, const Point *p2)
{
  real dx = p1->x - p2->x;
  real dy = p1->y - p2->y;
  return sqrt(dx*dx + dy*dy);
}


static inline
# 333 "../lib/geometry.h"

# 333 "../lib/geometry.h"
 real distance_point_point_manhattan(const Point *p1,
                                                  const Point *p2);

static inline
# 336 "../lib/geometry.h"

# 336 "../lib/geometry.h"
 real
distance_point_point_manhattan(const Point *p1, const Point *p2)
{
  real dx = p1->x - p2->x;
  real dy = p1->y - p2->y;
  return (((dx) < 0) ? -(dx) : (dx)) + (((dy) < 0) ? -(dy) : (dy));
}


real distance_rectangle_point(const Rectangle *rect, const Point *point);
real distance_line_point(const Point *line_start, const Point *line_end,
    real line_width, const Point *point);

real distance_polygon_point(const Point *poly, guint npoints,
       real line_width, const Point *point);


real distance_bez_seg_point(const Point *b1, const BezPoint *b2,
       real line_width, const Point *point);
real distance_bez_line_point(const BezPoint *b, guint npoints,
        real line_width, const Point *point);
real distance_bez_shape_point(const BezPoint *b, guint npoints,
         real line_width, const Point *point);

real distance_ellipse_point(const Point *centre, real width, real height,
       real line_width, const Point *point);

void transform_length (real *length, const DiaMatrix *m);
void transform_point (Point *pt, const DiaMatrix *m);
void transform_bezpoint (BezPoint *bpt, const DiaMatrix *m);

real dot2(Point *p1, Point *p2);
void line_coef(real *a, real *b, real *c, Point *p1, Point *p2);
real line_to_point(real a, real b , real c, Point *p);
gboolean line_line_intersection (Point *crossing,
     const Point *p1, const Point *p2,
     const Point *p3, const Point *p4);
void point_perp(Point *p, real a, real b, real c, Point *perp);
gboolean fillet(Point *p1, Point *p2, Point *p3, Point *p4,
  real r, Point *c, real *pa, real *aa);
int three_point_circle(const Point *p1, const Point *p2, const Point *p3,
                        Point* center, real* radius);
real point_cross(Point *p1, Point *p2);
Point calculate_object_edge(Point *objmid, Point *end, DiaObject *obj);

real dia_asin (real x);
real dia_acos (real x);


# 26 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h" 2
# 1 "../lib/diagramdata.h" 1
# 26 "../lib/diagramdata.h"
# 1 "../lib/color.h" 1
# 23 "../lib/color.h"
# 1 "/usr/include/gtk-2.0/gdk/gdk.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdk.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h" 1
# 30 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 26 "/usr/include/glib-2.0/gio/gio.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 28 "/usr/include/glib-2.0/gio/giotypes.h"
# 1 "/usr/include/glib-2.0/gio/gioenums.h" 1
# 28 "/usr/include/glib-2.0/gio/gioenums.h"
# 1 "/usr/include/glib-2.0/glib-object.h" 1
# 22 "/usr/include/glib-2.0/glib-object.h"
# 1 "/usr/include/glib-2.0/gobject/gbinding.h" 1
# 29 "/usr/include/glib-2.0/gobject/gbinding.h"
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 24 "/usr/include/glib-2.0/gobject/gobject.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtype.h"

# 400 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gsize GType;



typedef struct _GValue GValue;
typedef union _GTypeCValue GTypeCValue;
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypeClass GTypeClass;
typedef struct _GTypeInterface GTypeInterface;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeInfo GTypeInfo;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
typedef struct _GInterfaceInfo GInterfaceInfo;
typedef struct _GTypeValueTable GTypeValueTable;
typedef struct _GTypeQuery GTypeQuery;
# 424 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeClass
{

  GType g_type;
};





struct _GTypeInstance
{

  GTypeClass *g_class;
};





struct _GTypeInterface
{

  GType g_type;
  GType g_instance_type;
};
# 461 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeQuery
{
  GType type;
  const gchar *type_name;
  guint class_size;
  guint instance_size;
};
# 697 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 << 0,
  G_TYPE_DEBUG_SIGNALS = 1 << 1,
  G_TYPE_DEBUG_INSTANCE_COUNT = 1 << 2,
  G_TYPE_DEBUG_MASK = 0x07
} GTypeDebugFlags __attribute__((__deprecated__));




# 708 "/usr/include/glib-2.0/gobject/gtype.h"
#pragma GCC diagnostic push
# 708 "/usr/include/glib-2.0/gobject/gtype.h"

# 708 "/usr/include/glib-2.0/gobject/gtype.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 708 "/usr/include/glib-2.0/gobject/gtype.h"

__attribute__((__deprecated__)) extern
void g_type_init (void);
__attribute__((__deprecated__)) extern
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);

# 713 "/usr/include/glib-2.0/gobject/gtype.h"
#pragma GCC diagnostic pop
# 713 "/usr/include/glib-2.0/gobject/gtype.h"


extern
const gchar * g_type_name (GType type);
extern
GQuark g_type_qname (GType type);
extern
GType g_type_from_name (const gchar *name);
extern
GType g_type_parent (GType type);
extern
guint g_type_depth (GType type);
extern
GType g_type_next_base (GType leaf_type,
            GType root_type);
extern
gboolean g_type_is_a (GType type,
            GType is_a_type);
extern
gpointer g_type_class_ref (GType type);
extern
gpointer g_type_class_peek (GType type);
extern
gpointer g_type_class_peek_static (GType type);
extern
void g_type_class_unref (gpointer g_class);
extern
gpointer g_type_class_peek_parent (gpointer g_class);
extern
gpointer g_type_interface_peek (gpointer instance_class,
            GType iface_type);
extern
gpointer g_type_interface_peek_parent (gpointer g_iface);

extern
gpointer g_type_default_interface_ref (GType g_type);
extern
gpointer g_type_default_interface_peek (GType g_type);
extern
void g_type_default_interface_unref (gpointer g_iface);


extern
GType* g_type_children (GType type,
            guint *n_children);
extern
GType* g_type_interfaces (GType type,
            guint *n_interfaces);


extern
void g_type_set_qdata (GType type,
            GQuark quark,
            gpointer data);
extern
gpointer g_type_get_qdata (GType type,
            GQuark quark);
extern
void g_type_query (GType type,
            GTypeQuery *query);

extern
int g_type_get_instance_count (GType type);
# 794 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GBaseInitFunc) (gpointer g_class);
# 808 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GBaseFinalizeFunc) (gpointer g_class);
# 912 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GClassInitFunc) (gpointer g_class,
           gpointer class_data);
# 929 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GClassFinalizeFunc) (gpointer g_class,
           gpointer class_data);
# 951 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInstanceInitFunc) (GTypeInstance *instance,
           gpointer g_class);
# 967 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInterfaceInitFunc) (gpointer g_iface,
           gpointer iface_data);
# 979 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInterfaceFinalizeFunc) (gpointer g_iface,
           gpointer iface_data);
# 1001 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gboolean (*GTypeClassCacheFunc) (gpointer cache_data,
           GTypeClass *g_class);
# 1015 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GTypeInterfaceCheckFunc) (gpointer check_data,
           gpointer g_iface);
# 1027 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_FLAG_CLASSED = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE = (1 << 1),
  G_TYPE_FLAG_DERIVABLE = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE = (1 << 3)
} GTypeFundamentalFlags;
# 1046 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_FLAG_ABSTRACT = (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 << 5),
  G_TYPE_FLAG_FINAL = (1 << 6)
} GTypeFlags;
# 1083 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeInfo
{

  guint16 class_size;

  GBaseInitFunc base_init;
  GBaseFinalizeFunc base_finalize;


  GClassInitFunc class_init;
  GClassFinalizeFunc class_finalize;
  gconstpointer class_data;


  guint16 instance_size;
  guint16 n_preallocs;
  GInstanceInitFunc instance_init;


  const GTypeValueTable *value_table;
};







struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags type_flags;
};
# 1124 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GInterfaceInfo
{
  GInterfaceInitFunc interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer interface_data;
};
# 1284 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeValueTable
{
  void (*value_init) (GValue *value);
  void (*value_free) (GValue *value);
  void (*value_copy) (const GValue *src_value,
      GValue *dest_value);

  gpointer (*value_peek_pointer) (const GValue *value);
  const gchar *collect_format;
  gchar* (*collect_value) (GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
  const gchar *lcopy_format;
  gchar* (*lcopy_value) (const GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
};
extern
GType g_type_register_static (GType parent_type,
      const gchar *type_name,
      const GTypeInfo *info,
      GTypeFlags flags);
extern
GType g_type_register_static_simple (GType parent_type,
      const gchar *type_name,
      guint class_size,
      GClassInitFunc class_init,
      guint instance_size,
      GInstanceInitFunc instance_init,
      GTypeFlags flags);

extern
GType g_type_register_dynamic (GType parent_type,
      const gchar *type_name,
      GTypePlugin *plugin,
      GTypeFlags flags);
extern
GType g_type_register_fundamental (GType type_id,
      const gchar *type_name,
      const GTypeInfo *info,
      const GTypeFundamentalInfo *finfo,
      GTypeFlags flags);
extern
void g_type_add_interface_static (GType instance_type,
      GType interface_type,
      const GInterfaceInfo *info);
extern
void g_type_add_interface_dynamic (GType instance_type,
      GType interface_type,
      GTypePlugin *plugin);
extern
void g_type_interface_add_prerequisite (GType interface_type,
      GType prerequisite_type);
extern
GType*g_type_interface_prerequisites (GType interface_type,
      guint *n_prerequisites);
extern
GType g_type_interface_instantiatable_prerequisite
                                        (GType interface_type);
__attribute__((__deprecated__)) extern
void g_type_class_add_private (gpointer g_class,
                                         gsize private_size);
extern
gint g_type_add_instance_private (GType class_type,
                                         gsize private_size);
extern
gpointer g_type_instance_get_private (GTypeInstance *instance,
                                         GType private_type);
extern
void g_type_class_adjust_private_offset (gpointer g_class,
                                             gint *private_size_or_offset);

extern
void g_type_add_class_private (GType class_type,
      gsize private_size);
extern
gpointer g_type_class_get_private (GTypeClass *klass,
      GType private_type);
extern
gint g_type_class_get_instance_private_offset (gpointer g_class);

extern
void g_type_ensure (GType type);
extern
guint g_type_get_type_registration_serial (void);
# 2384 "/usr/include/glib-2.0/gobject/gtype.h"
extern
GTypePlugin* g_type_get_plugin (GType type);
extern
GTypePlugin* g_type_interface_get_plugin (GType instance_type,
       GType interface_type);
extern
GType g_type_fundamental_next (void);
extern
GType g_type_fundamental (GType type_id);
extern
GTypeInstance* g_type_create_instance (GType type);
extern
void g_type_free_instance (GTypeInstance *instance);

extern
void g_type_add_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
extern
void g_type_remove_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
extern
void g_type_class_unref_uncached (gpointer g_class);

extern
void g_type_add_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
extern
void g_type_remove_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);

extern
GTypeValueTable* g_type_value_table_peek (GType type);



extern
gboolean g_type_check_instance (GTypeInstance *instance) __attribute__((__pure__));
extern
GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance,
       GType iface_type);
extern
gboolean g_type_check_instance_is_a (GTypeInstance *instance,
       GType iface_type) __attribute__((__pure__));
extern
gboolean g_type_check_instance_is_fundamentally_a (GTypeInstance *instance,
                                                           GType fundamental_type) __attribute__((__pure__));
extern
GTypeClass* g_type_check_class_cast (GTypeClass *g_class,
       GType is_a_type);
extern
gboolean g_type_check_class_is_a (GTypeClass *g_class,
       GType is_a_type) __attribute__((__pure__));
extern
gboolean g_type_check_is_value_type (GType type) __attribute__ ((__const__));
extern
gboolean g_type_check_value (const GValue *value) __attribute__((__pure__));
extern
gboolean g_type_check_value_holds (const GValue *value,
       GType type) __attribute__((__pure__));
extern
gboolean g_type_test_flags (GType type,
       guint flags) __attribute__ ((__const__));



extern
const gchar * g_type_name_from_instance (GTypeInstance *instance);
extern
const gchar * g_type_name_from_class (GTypeClass *g_class);
# 2513 "/usr/include/glib-2.0/gobject/gtype.h"

# 25 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvalue.h"

# 95 "/usr/include/glib-2.0/gobject/gvalue.h"
typedef void (*GValueTransform) (const GValue *src_value,
     GValue *dest_value);
# 111 "/usr/include/glib-2.0/gobject/gvalue.h"
struct _GValue
{

  GType g_type;


  union {
    gint v_int;
    guint v_uint;
    glong v_long;
    gulong v_ulong;
    gint64 v_int64;
    guint64 v_uint64;
    gfloat v_float;
    gdouble v_double;
    gpointer v_pointer;
  } data[2];
};



extern
GValue* g_value_init (GValue *value,
      GType g_type);
extern
void g_value_copy (const GValue *src_value,
      GValue *dest_value);
extern
GValue* g_value_reset (GValue *value);
extern
void g_value_unset (GValue *value);
extern
void g_value_set_instance (GValue *value,
      gpointer instance);
extern
void g_value_init_from_instance (GValue *value,
                                              gpointer instance);



extern
gboolean g_value_fits_pointer (const GValue *value);
extern
gpointer g_value_peek_pointer (const GValue *value);



extern
gboolean g_value_type_compatible (GType src_type,
      GType dest_type);
extern
gboolean g_value_type_transformable (GType src_type,
      GType dest_type);
extern
gboolean g_value_transform (const GValue *src_value,
      GValue *dest_value);
extern
void g_value_register_transform_func (GType src_type,
      GType dest_type,
      GValueTransform transform_func);
# 208 "/usr/include/glib-2.0/gobject/gvalue.h"

# 26 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 28 "/usr/include/glib-2.0/gobject/gparam.h"

# 152 "/usr/include/glib-2.0/gobject/gparam.h"
typedef enum
{
  G_PARAM_READABLE = 1 << 0,
  G_PARAM_WRITABLE = 1 << 1,
  G_PARAM_READWRITE = (G_PARAM_READABLE | G_PARAM_WRITABLE),
  G_PARAM_CONSTRUCT = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY = 1 << 3,
  G_PARAM_LAX_VALIDATION = 1 << 4,
  G_PARAM_STATIC_NAME = 1 << 5,
  G_PARAM_PRIVATE __attribute__((__deprecated__)) = G_PARAM_STATIC_NAME,
  G_PARAM_STATIC_NICK = 1 << 6,
  G_PARAM_STATIC_BLURB = 1 << 7,

  G_PARAM_EXPLICIT_NOTIFY = 1 << 30,

  G_PARAM_DEPRECATED = (gint)(1u << 31)
} GParamFlags;
# 194 "/usr/include/glib-2.0/gobject/gparam.h"
typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter GParameter __attribute__((__deprecated__));
typedef struct _GParamSpecPool GParamSpecPool;
# 209 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpec
{
  GTypeInstance g_type_instance;

  const gchar *name;
  GParamFlags flags;
  GType value_type;
  GType owner_type;


  gchar *_nick;
  gchar *_blurb;
  GData *qdata;
  guint ref_count;
  guint param_id;
};
# 244 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpecClass
{
  GTypeClass g_type_class;

  GType value_type;

  void (*finalize) (GParamSpec *pspec);


  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);

  gpointer dummy[4];
};
# 273 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParameter
{
  const gchar *name;
  GValue value;
} __attribute__((__deprecated__));



extern
GParamSpec* g_param_spec_ref (GParamSpec *pspec);
extern
void g_param_spec_unref (GParamSpec *pspec);
extern
void g_param_spec_sink (GParamSpec *pspec);
extern
GParamSpec* g_param_spec_ref_sink (GParamSpec *pspec);
extern
gpointer g_param_spec_get_qdata (GParamSpec *pspec,
       GQuark quark);
extern
void g_param_spec_set_qdata (GParamSpec *pspec,
       GQuark quark,
       gpointer data);
extern
void g_param_spec_set_qdata_full (GParamSpec *pspec,
       GQuark quark,
       gpointer data,
       GDestroyNotify destroy);
extern
gpointer g_param_spec_steal_qdata (GParamSpec *pspec,
       GQuark quark);
extern
GParamSpec* g_param_spec_get_redirect_target (GParamSpec *pspec);

extern
void g_param_value_set_default (GParamSpec *pspec,
       GValue *value);
extern
gboolean g_param_value_defaults (GParamSpec *pspec,
       const GValue *value);
extern
gboolean g_param_value_validate (GParamSpec *pspec,
       GValue *value);
extern
gboolean g_param_value_convert (GParamSpec *pspec,
       const GValue *src_value,
       GValue *dest_value,
       gboolean strict_validation);
extern
gint g_param_values_cmp (GParamSpec *pspec,
       const GValue *value1,
       const GValue *value2);
extern
const gchar * g_param_spec_get_name (GParamSpec *pspec);
extern
const gchar * g_param_spec_get_nick (GParamSpec *pspec);
extern
const gchar * g_param_spec_get_blurb (GParamSpec *pspec);
extern
void g_value_set_param (GValue *value,
       GParamSpec *param);
extern
GParamSpec* g_value_get_param (const GValue *value);
extern
GParamSpec* g_value_dup_param (const GValue *value);


extern
void g_value_take_param (GValue *value,
              GParamSpec *param);
__attribute__((__deprecated__("Use '" "g_value_take_param" "' instead"))) extern
void g_value_set_param_take_ownership (GValue *value,
                                                 GParamSpec *param);
extern
const GValue * g_param_spec_get_default_value (GParamSpec *pspec);

extern
GQuark g_param_spec_get_name_quark (GParamSpec *pspec);


typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
# 379 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpecTypeInfo
{

  guint16 instance_size;
  guint16 n_preallocs;
  void (*instance_init) (GParamSpec *pspec);


  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
};
extern
GType g_param_type_register_static (const gchar *name,
      const GParamSpecTypeInfo *pspec_info);

extern
gboolean g_param_spec_is_valid_name (const gchar *name);


GType _g_param_type_register_static_constant (const gchar *name,
            const GParamSpecTypeInfo *pspec_info,
            GType opt_type);



extern
gpointer g_param_spec_internal (GType param_type,
       const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
extern
GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);
extern
void g_param_spec_pool_insert (GParamSpecPool *pool,
       GParamSpec *pspec,
       GType owner_type);
extern
void g_param_spec_pool_remove (GParamSpecPool *pool,
       GParamSpec *pspec);
extern
GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool,
       const gchar *param_name,
       GType owner_type,
       gboolean walk_ancestors);
extern
GList* g_param_spec_pool_list_owned (GParamSpecPool *pool,
       GType owner_type);
extern
GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool,
       GType owner_type,
       guint *n_pspecs_p);
# 456 "/usr/include/glib-2.0/gobject/gparam.h"

# 27 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 27 "/usr/include/glib-2.0/gobject/gclosure.h"

# 75 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef struct _GClosure GClosure;
typedef struct _GClosureNotifyData GClosureNotifyData;
# 90 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GCallback) (void);
# 99 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GClosureNotify) (gpointer data,
      GClosure *closure);
# 119 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GClosureMarshal) (GClosure *closure,
      GValue *return_value,
      guint n_param_values,
      const GValue *param_values,
      gpointer invocation_hint,
      gpointer marshal_data);
# 146 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (* GVaClosureMarshal) (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
# 161 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef struct _GCClosure GCClosure;



struct _GClosureNotifyData
{
  gpointer data;
  GClosureNotify notify;
};
# 179 "/usr/include/glib-2.0/gobject/gclosure.h"
struct _GClosure
{

  guint ref_count : 15;


  guint meta_marshal_nouse : 1;
  guint n_guards : 1;
  guint n_fnotifiers : 2;
  guint n_inotifiers : 8;
  guint in_inotify : 1;
  guint floating : 1;

  guint derivative_flag : 1;

  guint in_marshal : 1;
  guint is_invalid : 1;

                  void (*marshal) (GClosure *closure,
         GValue *return_value,
         guint n_param_values,
         const GValue *param_values,
         gpointer invocation_hint,
         gpointer marshal_data);
                    gpointer data;

                  GClosureNotifyData *notifiers;
# 217 "/usr/include/glib-2.0/gobject/gclosure.h"
};


struct _GCClosure
{
  GClosure closure;
  gpointer callback;
};



extern
GClosure* g_cclosure_new (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
extern
GClosure* g_cclosure_new_swap (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
extern
GClosure* g_signal_type_cclosure_new (GType itype,
       guint struct_offset);



extern
GClosure* g_closure_ref (GClosure *closure);
extern
void g_closure_sink (GClosure *closure);
extern
void g_closure_unref (GClosure *closure);

extern
GClosure* g_closure_new_simple (guint sizeof_closure,
       gpointer data);
extern
void g_closure_add_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_remove_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_add_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_remove_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
extern
void g_closure_add_marshal_guards (GClosure *closure,
       gpointer pre_marshal_data,
       GClosureNotify pre_marshal_notify,
       gpointer post_marshal_data,
       GClosureNotify post_marshal_notify);
extern
void g_closure_set_marshal (GClosure *closure,
       GClosureMarshal marshal);
extern
void g_closure_set_meta_marshal (GClosure *closure,
       gpointer marshal_data,
       GClosureMarshal meta_marshal);
extern
void g_closure_invalidate (GClosure *closure);
extern
void g_closure_invoke (GClosure *closure,
       GValue *return_value,
       guint n_param_values,
       const GValue *param_values,
       gpointer invocation_hint);
# 301 "/usr/include/glib-2.0/gobject/gclosure.h"
extern
void g_cclosure_marshal_generic (GClosure *closure,
                                 GValue *return_gvalue,
                                 guint n_param_values,
                                 const GValue *param_values,
                                 gpointer invocation_hint,
                                 gpointer marshal_data);

extern
void g_cclosure_marshal_generic_va (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args_list,
        gpointer marshal_data,
        int n_params,
        GType *param_types);



# 28 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsignal.h" 1
# 27 "/usr/include/glib-2.0/gobject/gsignal.h"
# 1 "/usr/include/glib-2.0/gobject/gmarshal.h" 1
# 20 "/usr/include/glib-2.0/gobject/gmarshal.h"



extern
void g_cclosure_marshal_VOID__VOID (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__VOIDv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


extern
void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);


extern
void g_cclosure_marshal_VOID__CHAR (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__CHARv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


extern
void g_cclosure_marshal_VOID__UCHAR (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__UCHARv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


extern
void g_cclosure_marshal_VOID__INT (GClosure *closure,
                                   GValue *return_value,
                                   guint n_param_values,
                                   const GValue *param_values,
                                   gpointer invocation_hint,
                                   gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__INTv (GClosure *closure,
                                    GValue *return_value,
                                    gpointer instance,
                                    va_list args,
                                    gpointer marshal_data,
                                    int n_params,
                                    GType *param_types);


extern
void g_cclosure_marshal_VOID__UINT (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__UINTv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


extern
void g_cclosure_marshal_VOID__LONG (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__LONGv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


extern
void g_cclosure_marshal_VOID__ULONG (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__ULONGv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


extern
void g_cclosure_marshal_VOID__ENUM (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__ENUMv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


extern
void g_cclosure_marshal_VOID__FLAGS (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


extern
void g_cclosure_marshal_VOID__FLOAT (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__FLOATv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


extern
void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);


extern
void g_cclosure_marshal_VOID__STRING (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__STRINGv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);


extern
void g_cclosure_marshal_VOID__PARAM (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__PARAMv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


extern
void g_cclosure_marshal_VOID__BOXED (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


extern
void g_cclosure_marshal_VOID__POINTER (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__POINTERv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);


extern
void g_cclosure_marshal_VOID__OBJECT (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);


extern
void g_cclosure_marshal_VOID__VARIANT (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);


extern
void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
extern
void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure,
                                             GValue *return_value,
                                             gpointer instance,
                                             va_list args,
                                             gpointer marshal_data,
                                             int n_params,
                                             GType *param_types);


extern
void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure,
                                        GValue *return_value,
                                        guint n_param_values,
                                        const GValue *param_values,
                                        gpointer invocation_hint,
                                        gpointer marshal_data);
extern
void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure,
                                         GValue *return_value,
                                         gpointer instance,
                                         va_list args,
                                         gpointer marshal_data,
                                         int n_params,
                                         GType *param_types);
# 381 "/usr/include/glib-2.0/gobject/gmarshal.h"
extern
void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure,
                                                GValue *return_value,
                                                guint n_param_values,
                                                const GValue *param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
extern
void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure,
                                                 GValue *return_value,
                                                 gpointer instance,
                                                 va_list args,
                                                 gpointer marshal_data,
                                                 int n_params,
                                                 GType *param_types);


extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);
extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure,
                                               GValue *return_value,
                                               gpointer instance,
                                               va_list args,
                                               gpointer marshal_data,
                                               int n_params,
                                               GType *param_types);
# 432 "/usr/include/glib-2.0/gobject/gmarshal.h"

# 28 "/usr/include/glib-2.0/gobject/gsignal.h" 2




typedef struct _GSignalQuery GSignalQuery;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
# 45 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef GClosureMarshal GSignalCMarshaller;







typedef GVaClosureMarshal GSignalCVaMarshaller;
# 73 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
      guint n_param_values,
      const GValue *param_values,
      gpointer data);
# 101 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef gboolean (*GSignalAccumulator) (GSignalInvocationHint *ihint,
      GValue *return_accu,
      const GValue *handler_return,
      gpointer data);
# 136 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_SIGNAL_RUN_FIRST = 1 << 0,
  G_SIGNAL_RUN_LAST = 1 << 1,
  G_SIGNAL_RUN_CLEANUP = 1 << 2,
  G_SIGNAL_NO_RECURSE = 1 << 3,
  G_SIGNAL_DETAILED = 1 << 4,
  G_SIGNAL_ACTION = 1 << 5,
  G_SIGNAL_NO_HOOKS = 1 << 6,
  G_SIGNAL_MUST_COLLECT = 1 << 7,
  G_SIGNAL_DEPRECATED = 1 << 8,

  G_SIGNAL_ACCUMULATOR_FIRST_RUN = 1 << 17,
} GSignalFlags;
# 166 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_CONNECT_AFTER = 1 << 0,
  G_CONNECT_SWAPPED = 1 << 1
} GConnectFlags;
# 184 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_SIGNAL_MATCH_ID = 1 << 0,
  G_SIGNAL_MATCH_DETAIL = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE = 1 << 2,
  G_SIGNAL_MATCH_FUNC = 1 << 3,
  G_SIGNAL_MATCH_DATA = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;
# 236 "/usr/include/glib-2.0/gobject/gsignal.h"
struct _GSignalInvocationHint
{
  guint signal_id;
  GQuark detail;
  GSignalFlags run_type;
};
# 263 "/usr/include/glib-2.0/gobject/gsignal.h"
struct _GSignalQuery
{
  guint signal_id;
  const gchar *signal_name;
  GType itype;
  GSignalFlags signal_flags;
  GType return_type;
  guint n_params;
  const GType *param_types;
};



extern
guint g_signal_newv (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          GType *param_types);
extern
guint g_signal_new_valist (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          va_list args);
extern
guint g_signal_new (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          guint class_offset,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          ...);
extern
guint g_signal_new_class_handler (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GCallback class_handler,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             ...);
extern
void g_signal_set_va_marshaller (guint signal_id,
          GType instance_type,
          GSignalCVaMarshaller va_marshaller);

extern
void g_signal_emitv (const GValue *instance_and_params,
          guint signal_id,
          GQuark detail,
          GValue *return_value);
extern
void g_signal_emit_valist (gpointer instance,
          guint signal_id,
          GQuark detail,
          va_list var_args);
extern
void g_signal_emit (gpointer instance,
          guint signal_id,
          GQuark detail,
          ...);
extern
void g_signal_emit_by_name (gpointer instance,
          const gchar *detailed_signal,
          ...);
extern
guint g_signal_lookup (const gchar *name,
          GType itype);
extern
const gchar * g_signal_name (guint signal_id);
extern
void g_signal_query (guint signal_id,
          GSignalQuery *query);
extern
guint* g_signal_list_ids (GType itype,
          guint *n_ids);
extern
gboolean g_signal_is_valid_name (const gchar *name);
extern
gboolean g_signal_parse_name (const gchar *detailed_signal,
          GType itype,
          guint *signal_id_p,
          GQuark *detail_p,
          gboolean force_detail_quark);
extern
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);



extern
void g_signal_stop_emission (gpointer instance,
          guint signal_id,
          GQuark detail);
extern
void g_signal_stop_emission_by_name (gpointer instance,
          const gchar *detailed_signal);
extern
gulong g_signal_add_emission_hook (guint signal_id,
          GQuark detail,
          GSignalEmissionHook hook_func,
          gpointer hook_data,
          GDestroyNotify data_destroy);
extern
void g_signal_remove_emission_hook (guint signal_id,
          gulong hook_id);



extern
gboolean g_signal_has_handler_pending (gpointer instance,
            guint signal_id,
            GQuark detail,
            gboolean may_be_blocked);
extern
gulong g_signal_connect_closure_by_id (gpointer instance,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gboolean after);
extern
gulong g_signal_connect_closure (gpointer instance,
            const gchar *detailed_signal,
            GClosure *closure,
            gboolean after);
extern
gulong g_signal_connect_data (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer data,
            GClosureNotify destroy_data,
            GConnectFlags connect_flags);
extern
void g_signal_handler_block (gpointer instance,
            gulong handler_id);
extern
void g_signal_handler_unblock (gpointer instance,
            gulong handler_id);
extern
void g_signal_handler_disconnect (gpointer instance,
            gulong handler_id);
extern
gboolean g_signal_handler_is_connected (gpointer instance,
            gulong handler_id);
extern
gulong g_signal_handler_find (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
guint g_signal_handlers_block_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
guint g_signal_handlers_unblock_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
extern
guint g_signal_handlers_disconnect_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);

extern
void g_clear_signal_handler (gulong *handler_id_ptr,
            gpointer instance);
# 474 "/usr/include/glib-2.0/gobject/gsignal.h"
extern
void g_signal_override_class_closure (guint signal_id,
                                               GType instance_type,
                                               GClosure *class_closure);
extern
void g_signal_override_class_handler (const gchar *signal_name,
                                               GType instance_type,
                                               GCallback class_handler);
extern
void g_signal_chain_from_overridden (const GValue *instance_and_params,
                                               GValue *return_value);
extern
void g_signal_chain_from_overridden_handler (gpointer instance,
                                               ...);
# 621 "/usr/include/glib-2.0/gobject/gsignal.h"
extern
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
         GValue *return_accu,
         const GValue *handler_return,
         gpointer dummy);

extern
gboolean g_signal_accumulator_first_wins (GSignalInvocationHint *ihint,
                                            GValue *return_accu,
                                            const GValue *handler_return,
                                            gpointer dummy);


extern
void g_signal_handlers_destroy (gpointer instance);
void _g_signals_destroy (GType itype);


# 29 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gboxed.h" 1
# 27 "/usr/include/glib-2.0/gobject/gboxed.h"
# 1 "/usr/include/glib-2.0/gobject/glib-types.h" 1
# 26 "/usr/include/glib-2.0/gobject/glib-types.h"

# 327 "/usr/include/glib-2.0/gobject/glib-types.h"
extern
GType g_date_get_type (void) __attribute__ ((__const__));
extern
GType g_strv_get_type (void) __attribute__ ((__const__));
extern
GType g_gstring_get_type (void) __attribute__ ((__const__));
extern
GType g_hash_table_get_type (void) __attribute__ ((__const__));
extern
GType g_array_get_type (void) __attribute__ ((__const__));
extern
GType g_byte_array_get_type (void) __attribute__ ((__const__));
extern
GType g_ptr_array_get_type (void) __attribute__ ((__const__));
extern
GType g_bytes_get_type (void) __attribute__ ((__const__));
extern
GType g_variant_type_get_gtype (void) __attribute__ ((__const__));
extern
GType g_regex_get_type (void) __attribute__ ((__const__));
extern
GType g_match_info_get_type (void) __attribute__ ((__const__));
extern
GType g_error_get_type (void) __attribute__ ((__const__));
extern
GType g_date_time_get_type (void) __attribute__ ((__const__));
extern
GType g_time_zone_get_type (void) __attribute__ ((__const__));
extern
GType g_io_channel_get_type (void) __attribute__ ((__const__));
extern
GType g_io_condition_get_type (void) __attribute__ ((__const__));
extern
GType g_variant_builder_get_type (void) __attribute__ ((__const__));
extern
GType g_variant_dict_get_type (void) __attribute__ ((__const__));
extern
GType g_key_file_get_type (void) __attribute__ ((__const__));
extern
GType g_main_loop_get_type (void) __attribute__ ((__const__));
extern
GType g_main_context_get_type (void) __attribute__ ((__const__));
extern
GType g_source_get_type (void) __attribute__ ((__const__));
extern
GType g_pollfd_get_type (void) __attribute__ ((__const__));
extern
GType g_thread_get_type (void) __attribute__ ((__const__));
extern
GType g_checksum_get_type (void) __attribute__ ((__const__));
extern
GType g_markup_parse_context_get_type (void) __attribute__ ((__const__));
extern
GType g_mapped_file_get_type (void) __attribute__ ((__const__));
extern
GType g_option_group_get_type (void) __attribute__ ((__const__));
extern
GType g_uri_get_type (void) __attribute__ ((__const__));
extern
GType g_tree_get_type (void) __attribute__ ((__const__));
extern
GType g_pattern_spec_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "'G_TYPE_VARIANT'" "' instead"))) extern
GType g_variant_get_gtype (void) __attribute__ ((__const__));


# 28 "/usr/include/glib-2.0/gobject/gboxed.h" 2



# 56 "/usr/include/glib-2.0/gobject/gboxed.h"
typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);
# 65 "/usr/include/glib-2.0/gobject/gboxed.h"
typedef void (*GBoxedFreeFunc) (gpointer boxed);



extern
gpointer g_boxed_copy (GType boxed_type,
                                           gconstpointer src_boxed);
extern
void g_boxed_free (GType boxed_type,
                                           gpointer boxed);
extern
void g_value_set_boxed (GValue *value,
                                           gconstpointer v_boxed);
extern
void g_value_set_static_boxed (GValue *value,
                                           gconstpointer v_boxed);
extern
void g_value_take_boxed (GValue *value,
                                           gconstpointer v_boxed);
__attribute__((__deprecated__("Use '" "g_value_take_boxed" "' instead"))) extern
void g_value_set_boxed_take_ownership (GValue *value,
                                           gconstpointer v_boxed);
extern
gpointer g_value_get_boxed (const GValue *value);
extern
gpointer g_value_dup_boxed (const GValue *value);



extern
GType g_boxed_type_register_static (const gchar *name,
                                           GBoxedCopyFunc boxed_copy,
                                           GBoxedFreeFunc boxed_free);
# 115 "/usr/include/glib-2.0/gobject/gboxed.h"
extern
GType g_closure_get_type (void) __attribute__ ((__const__));
extern
GType g_value_get_type (void) __attribute__ ((__const__));


# 30 "/usr/include/glib-2.0/gobject/gobject.h" 2


# 190 "/usr/include/glib-2.0/gobject/gobject.h"
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
# 205 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GObjectGetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
# 219 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GObjectSetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);






typedef void (*GObjectFinalizeFunc) (GObject *object);
# 247 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GWeakNotify) (gpointer data,
      GObject *where_the_object_was);
# 265 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObject
{
  GTypeInstance g_type_instance;


  guint ref_count;
  GData *qdata;
};
# 335 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObjectClass
{
  GTypeClass g_type_class;


  GSList *construct_properties;



  GObject* (*constructor) (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam *construct_properties);

  void (*set_property) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
  void (*get_property) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
  void (*dispose) (GObject *object);
  void (*finalize) (GObject *object);

  void (*dispatch_properties_changed) (GObject *object,
          guint n_pspecs,
          GParamSpec **pspecs);

  void (*notify) (GObject *object,
      GParamSpec *pspec);


  void (*constructed) (GObject *object);


  gsize flags;


  gpointer pdummy[6];
};
# 384 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue *value;
};
# 406 "/usr/include/glib-2.0/gobject/gobject.h"
extern
GType g_initially_unowned_get_type (void);
extern
void g_object_class_install_property (GObjectClass *oclass,
            guint property_id,
            GParamSpec *pspec);
extern
GParamSpec* g_object_class_find_property (GObjectClass *oclass,
            const gchar *property_name);
extern
GParamSpec**g_object_class_list_properties (GObjectClass *oclass,
            guint *n_properties);
extern
void g_object_class_override_property (GObjectClass *oclass,
            guint property_id,
            const gchar *name);
extern
void g_object_class_install_properties (GObjectClass *oclass,
                                               guint n_pspecs,
                                               GParamSpec **pspecs);

extern
void g_object_interface_install_property (gpointer g_iface,
       GParamSpec *pspec);
extern
GParamSpec* g_object_interface_find_property (gpointer g_iface,
       const gchar *property_name);
extern
GParamSpec**g_object_interface_list_properties (gpointer g_iface,
       guint *n_properties_p);

extern
GType g_object_get_type (void) __attribute__ ((__const__));
extern
gpointer g_object_new (GType object_type,
            const gchar *first_property_name,
            ...);
extern
GObject* g_object_new_with_properties (GType object_type,
                                               guint n_properties,
                                               const char *names[],
                                               const GValue values[]);


# 449 "/usr/include/glib-2.0/gobject/gobject.h"
#pragma GCC diagnostic push
# 449 "/usr/include/glib-2.0/gobject/gobject.h"

# 449 "/usr/include/glib-2.0/gobject/gobject.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 449 "/usr/include/glib-2.0/gobject/gobject.h"


__attribute__((__deprecated__("Use '" "g_object_new_with_properties" "' instead"))) extern
gpointer g_object_newv (GType object_type,
            guint n_parameters,
            GParameter *parameters);


# 456 "/usr/include/glib-2.0/gobject/gobject.h"
#pragma GCC diagnostic pop
# 456 "/usr/include/glib-2.0/gobject/gobject.h"


extern
GObject* g_object_new_valist (GType object_type,
            const gchar *first_property_name,
            va_list var_args);
extern
void g_object_set (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
extern
void g_object_get (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
extern
gpointer g_object_connect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
extern
void g_object_disconnect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
extern
void g_object_setv (GObject *object,
                                               guint n_properties,
                                               const gchar *names[],
                                               const GValue values[]);
extern
void g_object_set_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
extern
void g_object_getv (GObject *object,
                                               guint n_properties,
                                               const gchar *names[],
                                               GValue values[]);
extern
void g_object_get_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
extern
void g_object_set_property (GObject *object,
            const gchar *property_name,
            const GValue *value);
extern
void g_object_get_property (GObject *object,
            const gchar *property_name,
            GValue *value);
extern
void g_object_freeze_notify (GObject *object);
extern
void g_object_notify (GObject *object,
            const gchar *property_name);
extern
void g_object_notify_by_pspec (GObject *object,
            GParamSpec *pspec);
extern
void g_object_thaw_notify (GObject *object);
extern
gboolean g_object_is_floating (gpointer object);
extern
gpointer g_object_ref_sink (gpointer object);
extern
gpointer g_object_take_ref (gpointer object);
extern
gpointer g_object_ref (gpointer object);
extern
void g_object_unref (gpointer object);
extern
void g_object_weak_ref (GObject *object,
            GWeakNotify notify,
            gpointer data);
extern
void g_object_weak_unref (GObject *object,
            GWeakNotify notify,
            gpointer data);
extern
void g_object_add_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
extern
void g_object_remove_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
# 559 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GToggleNotify) (gpointer data,
          GObject *object,
          gboolean is_last_ref);

extern
void g_object_add_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
extern
void g_object_remove_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);

extern
gpointer g_object_get_qdata (GObject *object,
            GQuark quark);
extern
void g_object_set_qdata (GObject *object,
            GQuark quark,
            gpointer data);
extern
void g_object_set_qdata_full (GObject *object,
            GQuark quark,
            gpointer data,
            GDestroyNotify destroy);
extern
gpointer g_object_steal_qdata (GObject *object,
            GQuark quark);

extern
gpointer g_object_dup_qdata (GObject *object,
                                               GQuark quark,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
extern
gboolean g_object_replace_qdata (GObject *object,
                                               GQuark quark,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);

extern
gpointer g_object_get_data (GObject *object,
            const gchar *key);
extern
void g_object_set_data (GObject *object,
            const gchar *key,
            gpointer data);
extern
void g_object_set_data_full (GObject *object,
            const gchar *key,
            gpointer data,
            GDestroyNotify destroy);
extern
gpointer g_object_steal_data (GObject *object,
            const gchar *key);

extern
gpointer g_object_dup_data (GObject *object,
                                               const gchar *key,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
extern
gboolean g_object_replace_data (GObject *object,
                                               const gchar *key,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);


extern
void g_object_watch_closure (GObject *object,
            GClosure *closure);
extern
GClosure* g_cclosure_new_object (GCallback callback_func,
            GObject *object);
extern
GClosure* g_cclosure_new_object_swap (GCallback callback_func,
            GObject *object);
extern
GClosure* g_closure_new_object (guint sizeof_closure,
            GObject *object);
extern
void g_value_set_object (GValue *value,
            gpointer v_object);
extern
gpointer g_value_get_object (const GValue *value);
extern
gpointer g_value_dup_object (const GValue *value);
extern
gulong g_signal_connect_object (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer gobject,
            GConnectFlags connect_flags);


extern
void g_object_force_floating (GObject *object);
extern
void g_object_run_dispose (GObject *object);


extern
void g_value_take_object (GValue *value,
            gpointer v_object);
__attribute__((__deprecated__("Use '" "g_value_take_object" "' instead"))) extern
void g_value_set_object_take_ownership (GValue *value,
                                               gpointer v_object);

__attribute__((__deprecated__)) extern
gsize g_object_compat_control (gsize what,
            gpointer data);
# 701 "/usr/include/glib-2.0/gobject/gobject.h"
extern
void g_clear_object (GObject **object_ptr);
# 741 "/usr/include/glib-2.0/gobject/gobject.h"
static inline gboolean
(g_set_object) (GObject **object_ptr,
                GObject *new_object)
{
  GObject *old_object = *object_ptr;







  if (old_object == new_object)
    return (0);

  if (new_object != 
# 756 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
                   ((void *)0)
# 756 "/usr/include/glib-2.0/gobject/gobject.h"
                       )
    ((__typeof__ (new_object)) (g_object_ref) (new_object));

  *object_ptr = new_object;

  if (old_object != 
# 761 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
                   ((void *)0)
# 761 "/usr/include/glib-2.0/gobject/gobject.h"
                       )
    g_object_unref (old_object);

  return (!(0));
}
# 807 "/usr/include/glib-2.0/gobject/gobject.h"
static inline void
(g_assert_finalize_object) (GObject *object)
{
  gpointer weak_pointer = object;

  do { if (__builtin_expect (__extension__ ({ int _g_boolean_var_; if ((((g_type_check_instance_is_fundamentally_a ((GTypeInstance*) ((weak_pointer)), (((GType) ((20) << (2))))))))) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 1)) ; else g_assertion_message (((gchar*) 0), "/usr/include/glib-2.0/gobject/gobject.h", 812, ((const char*) (__func__)), "'" "G_IS_OBJECT (weak_pointer)" "' should be TRUE"); } while (0);
  g_object_add_weak_pointer (object, &weak_pointer);
  g_object_unref (weak_pointer);
  do { if (__builtin_expect (__extension__ ({ int _g_boolean_var_; if ((weak_pointer) == 
# 815 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
 ((void *)0)
# 815 "/usr/include/glib-2.0/gobject/gobject.h"
 ) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 1)) ; else g_assertion_message (((gchar*) 0), "/usr/include/glib-2.0/gobject/gobject.h", 815, ((const char*) (__func__)), "'" "weak_pointer" "' should be NULL"); } while (0);
}
# 842 "/usr/include/glib-2.0/gobject/gobject.h"
static inline void
(g_clear_weak_pointer) (gpointer *weak_pointer_location)
{
  GObject *object = (GObject *) *weak_pointer_location;

  if (object != 
# 847 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
               ((void *)0)
# 847 "/usr/include/glib-2.0/gobject/gobject.h"
                   )
    {
      g_object_remove_weak_pointer (object, weak_pointer_location);
      *weak_pointer_location = 
# 850 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
                              ((void *)0)
# 850 "/usr/include/glib-2.0/gobject/gobject.h"
                                  ;
    }
}
# 897 "/usr/include/glib-2.0/gobject/gobject.h"
static inline gboolean
(g_set_weak_pointer) (gpointer *weak_pointer_location,
                      GObject *new_object)
{
  GObject *old_object = (GObject *) *weak_pointer_location;






  if (old_object == new_object)
    return (0);

  if (old_object != 
# 911 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
                   ((void *)0)
# 911 "/usr/include/glib-2.0/gobject/gobject.h"
                       )
    g_object_remove_weak_pointer (old_object, weak_pointer_location);

  *weak_pointer_location = new_object;

  if (new_object != 
# 916 "/usr/include/glib-2.0/gobject/gobject.h" 3 4
                   ((void *)0)
# 916 "/usr/include/glib-2.0/gobject/gobject.h"
                       )
    g_object_add_weak_pointer (new_object, weak_pointer_location);

  return (!(0));
}







typedef struct {

    union { gpointer p; } priv;
} GWeakRef;

extern
void g_weak_ref_init (GWeakRef *weak_ref,
                                gpointer object);
extern
void g_weak_ref_clear (GWeakRef *weak_ref);
extern
gpointer g_weak_ref_get (GWeakRef *weak_ref);
extern
void g_weak_ref_set (GWeakRef *weak_ref,
                                gpointer object);


# 30 "/usr/include/glib-2.0/gobject/gbinding.h" 2


# 47 "/usr/include/glib-2.0/gobject/gbinding.h"
typedef struct _GBinding GBinding;
# 69 "/usr/include/glib-2.0/gobject/gbinding.h"
typedef gboolean (* GBindingTransformFunc) (GBinding *binding,
                                            const GValue *from_value,
                                            GValue *to_value,
                                            gpointer user_data);
# 97 "/usr/include/glib-2.0/gobject/gbinding.h"
typedef enum {
  G_BINDING_DEFAULT = 0,

  G_BINDING_BIDIRECTIONAL = 1 << 0,
  G_BINDING_SYNC_CREATE = 1 << 1,
  G_BINDING_INVERT_BOOLEAN = 1 << 2
} GBindingFlags;

extern
GType g_binding_flags_get_type (void) __attribute__ ((__const__));
extern
GType g_binding_get_type (void) __attribute__ ((__const__));

extern
GBindingFlags g_binding_get_flags (GBinding *binding);
__attribute__((__deprecated__("Use '" "g_binding_dup_source" "' instead"))) extern
GObject * g_binding_get_source (GBinding *binding);
extern
GObject * g_binding_dup_source (GBinding *binding);
__attribute__((__deprecated__("Use '" "g_binding_dup_target" "' instead"))) extern
GObject * g_binding_get_target (GBinding *binding);
extern
GObject * g_binding_dup_target (GBinding *binding);
extern
const gchar * g_binding_get_source_property (GBinding *binding);
extern
const gchar * g_binding_get_target_property (GBinding *binding);
extern
void g_binding_unbind (GBinding *binding);

extern
GBinding *g_object_bind_property (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags);
extern
GBinding *g_object_bind_property_full (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GBindingTransformFunc transform_to,
                                                GBindingTransformFunc transform_from,
                                                gpointer user_data,
                                                GDestroyNotify notify);
extern
GBinding *g_object_bind_property_with_closures (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GClosure *transform_to,
                                                GClosure *transform_from);


# 23 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gbindinggroup.h" 1
# 33 "/usr/include/glib-2.0/gobject/gbindinggroup.h"

# 47 "/usr/include/glib-2.0/gobject/gbindinggroup.h"
typedef struct _GBindingGroup GBindingGroup;

extern
GType g_binding_group_get_type (void) __attribute__ ((__const__));
extern
GBindingGroup *g_binding_group_new (void);
extern
gpointer g_binding_group_dup_source (GBindingGroup *self);
extern
void g_binding_group_set_source (GBindingGroup *self,
                                                   gpointer source);
extern
void g_binding_group_bind (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags);
extern
void g_binding_group_bind_full (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags,
                                                   GBindingTransformFunc transform_to,
                                                   GBindingTransformFunc transform_from,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_destroy);
extern
void g_binding_group_bind_with_closures (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags,
                                                   GClosure *transform_to,
                                                   GClosure *transform_from);


# 24 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 26 "/usr/include/glib-2.0/gobject/genums.h"

# 138 "/usr/include/glib-2.0/gobject/genums.h"
typedef struct _GEnumClass GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue GEnumValue;
typedef struct _GFlagsValue GFlagsValue;
# 155 "/usr/include/glib-2.0/gobject/genums.h"
struct _GEnumClass
{
  GTypeClass g_type_class;


  gint minimum;
  gint maximum;
  guint n_values;
  GEnumValue *values;
};
# 176 "/usr/include/glib-2.0/gobject/genums.h"
struct _GFlagsClass
{
  GTypeClass g_type_class;


  guint mask;
  guint n_values;
  GFlagsValue *values;
};
# 194 "/usr/include/glib-2.0/gobject/genums.h"
struct _GEnumValue
{
  gint value;
  const gchar *value_name;
  const gchar *value_nick;
};
# 209 "/usr/include/glib-2.0/gobject/genums.h"
struct _GFlagsValue
{
  guint value;
  const gchar *value_name;
  const gchar *value_nick;
};



extern
GEnumValue* g_enum_get_value (GEnumClass *enum_class,
       gint value);
extern
GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class,
       const gchar *name);
extern
GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class,
       const gchar *nick);
extern
GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class,
       guint value);
extern
GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class,
       const gchar *name);
extern
GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class,
       const gchar *nick);
extern
gchar *g_enum_to_string (GType g_enum_type,
                                                 gint value);
extern
gchar *g_flags_to_string (GType flags_type,
                                                 guint value);
extern
void g_value_set_enum (GValue *value,
       gint v_enum);
extern
gint g_value_get_enum (const GValue *value);
extern
void g_value_set_flags (GValue *value,
       guint v_flags);
extern
guint g_value_get_flags (const GValue *value);







extern
GType g_enum_register_static (const gchar *name,
        const GEnumValue *const_static_values);
extern
GType g_flags_register_static (const gchar *name,
        const GFlagsValue *const_static_values);



extern
void g_enum_complete_type_info (GType g_enum_type,
        GTypeInfo *info,
        const GEnumValue *const_values);
extern
void g_flags_complete_type_info (GType g_flags_type,
        GTypeInfo *info,
        const GFlagsValue *const_values);


# 26 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/glib-enumtypes.h" 1






# 1 "/usr/include/glib-2.0/glib-object.h" 1
# 8 "/usr/include/glib-2.0/gobject/glib-enumtypes.h" 2




extern GType g_unicode_type_get_type (void) __attribute__ ((__const__));

extern GType g_unicode_break_type_get_type (void) __attribute__ ((__const__));

extern GType g_unicode_script_get_type (void) __attribute__ ((__const__));

extern GType g_normalize_mode_get_type (void) __attribute__ ((__const__));


# 27 "/usr/include/glib-2.0/glib-object.h" 2


# 1 "/usr/include/glib-2.0/gobject/gparamspecs.h" 1
# 31 "/usr/include/glib-2.0/gobject/gparamspecs.h"

# 586 "/usr/include/glib-2.0/gobject/gparamspecs.h"
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecGType GParamSpecGType;
typedef struct _GParamSpecVariant GParamSpecVariant;
# 619 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecChar
{
  GParamSpec parent_instance;

  gint8 minimum;
  gint8 maximum;
  gint8 default_value;
};
# 636 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUChar
{
  GParamSpec parent_instance;

  guint8 minimum;
  guint8 maximum;
  guint8 default_value;
};







struct _GParamSpecBoolean
{
  GParamSpec parent_instance;

  gboolean default_value;
};
# 666 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecInt
{
  GParamSpec parent_instance;

  gint minimum;
  gint maximum;
  gint default_value;
};
# 683 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUInt
{
  GParamSpec parent_instance;

  guint minimum;
  guint maximum;
  guint default_value;
};
# 700 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecLong
{
  GParamSpec parent_instance;

  glong minimum;
  glong maximum;
  glong default_value;
};
# 717 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecULong
{
  GParamSpec parent_instance;

  gulong minimum;
  gulong maximum;
  gulong default_value;
};
# 734 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecInt64
{
  GParamSpec parent_instance;

  gint64 minimum;
  gint64 maximum;
  gint64 default_value;
};
# 751 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUInt64
{
  GParamSpec parent_instance;

  guint64 minimum;
  guint64 maximum;
  guint64 default_value;
};







struct _GParamSpecUnichar
{
  GParamSpec parent_instance;

  gunichar default_value;
};
# 781 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecEnum
{
  GParamSpec parent_instance;

  GEnumClass *enum_class;
  gint default_value;
};
# 797 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecFlags
{
  GParamSpec parent_instance;

  GFlagsClass *flags_class;
  guint default_value;
};
# 815 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecFloat
{
  GParamSpec parent_instance;

  gfloat minimum;
  gfloat maximum;
  gfloat default_value;
  gfloat epsilon;
};
# 835 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecDouble
{
  GParamSpec parent_instance;

  gdouble minimum;
  gdouble maximum;
  gdouble default_value;
  gdouble epsilon;
};
# 857 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecString
{
  GParamSpec parent_instance;

  gchar *default_value;
  gchar *cset_first;
  gchar *cset_nth;
  gchar substitutor;
  guint null_fold_if_empty : 1;
  guint ensure_non_null : 1;
};







struct _GParamSpecParam
{
  GParamSpec parent_instance;
};






struct _GParamSpecBoxed
{
  GParamSpec parent_instance;
};






struct _GParamSpecPointer
{
  GParamSpec parent_instance;
};
# 907 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecValueArray
{
  GParamSpec parent_instance;
  GParamSpec *element_spec;
  guint fixed_n_elements;
};






struct _GParamSpecObject
{
  GParamSpec parent_instance;
};
# 940 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecOverride
{

  GParamSpec parent_instance;
  GParamSpec *overridden;
};
# 955 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecGType
{
  GParamSpec parent_instance;
  GType is_a_type;
};
# 976 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecVariant
{
  GParamSpec parent_instance;
  GVariantType *type;
  GVariant *default_value;


  gpointer padding[4];
};


extern
GParamSpec* g_param_spec_char (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint8 minimum,
       gint8 maximum,
       gint8 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_uchar (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint8 minimum,
       guint8 maximum,
       guint8 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_boolean (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gboolean default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_int (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint minimum,
       gint maximum,
       gint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_uint (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint minimum,
       guint maximum,
       guint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_long (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       glong minimum,
       glong maximum,
       glong default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_ulong (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gulong minimum,
       gulong maximum,
       gulong default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_int64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint64 minimum,
       gint64 maximum,
       gint64 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_uint64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint64 minimum,
       guint64 maximum,
       guint64 default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_unichar (const gchar *name,
              const gchar *nick,
              const gchar *blurb,
              gunichar default_value,
              GParamFlags flags);
extern
GParamSpec* g_param_spec_enum (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType enum_type,
       gint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_flags (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType flags_type,
       guint default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_float (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gfloat minimum,
       gfloat maximum,
       gfloat default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_double (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gdouble minimum,
       gdouble maximum,
       gdouble default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_string (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const gchar *default_value,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_param (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType param_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_boxed (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType boxed_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_pointer (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_value_array (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamSpec *element_spec,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_object (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType object_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_override (const gchar *name,
       GParamSpec *overridden);
extern
GParamSpec* g_param_spec_gtype (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType is_a_type,
       GParamFlags flags);
extern
GParamSpec* g_param_spec_variant (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const GVariantType *type,
       GVariant *default_value,
       GParamFlags flags);
# 1169 "/usr/include/glib-2.0/gobject/gparamspecs.h"
extern GType *g_param_spec_types;


# 30 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gsignalgroup.h" 1
# 33 "/usr/include/glib-2.0/gobject/gsignalgroup.h"

# 47 "/usr/include/glib-2.0/gobject/gsignalgroup.h"
typedef struct _GSignalGroup GSignalGroup;

extern
GType g_signal_group_get_type (void) __attribute__ ((__const__));
extern
GSignalGroup *g_signal_group_new (GType target_type);
extern
void g_signal_group_set_target (GSignalGroup *self,
                                              gpointer target);
extern
gpointer g_signal_group_dup_target (GSignalGroup *self);
extern
void g_signal_group_block (GSignalGroup *self);
extern
void g_signal_group_unblock (GSignalGroup *self);
extern
void g_signal_group_connect_object (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer object,
                                              GConnectFlags flags);
extern
void g_signal_group_connect_data (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data,
                                              GClosureNotify notify,
                                              GConnectFlags flags);
extern
void g_signal_group_connect (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
extern
void g_signal_group_connect_after (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
extern
void g_signal_group_connect_swapped (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);


# 32 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsourceclosure.h" 1
# 27 "/usr/include/glib-2.0/gobject/gsourceclosure.h"


extern
void g_source_set_closure (GSource *source,
      GClosure *closure);

extern
void g_source_set_dummy_callback (GSource *source);


# 33 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gtypemodule.h" 1
# 27 "/usr/include/glib-2.0/gobject/gtypemodule.h"


typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"
typedef GTypeModule *GTypeModule_autoptr; typedef GList *GTypeModule_listautoptr; typedef GSList *GTypeModule_slistautoptr; typedef GQueue *GTypeModule_queueautoptr;
# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"
#pragma GCC diagnostic push
# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"

# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTypeModule (GTypeModule *_ptr) { if (_ptr) (g_object_unref) ((GTypeModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTypeModule (GTypeModule **_ptr) { glib_autoptr_clear_GTypeModule (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTypeModule (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTypeModule (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTypeModule (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"
#pragma GCC diagnostic pop
# 39 "/usr/include/glib-2.0/gobject/gtypemodule.h"

# 48 "/usr/include/glib-2.0/gobject/gtypemodule.h"
struct _GTypeModule
{
  GObject parent_instance;

  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;


  gchar *name;
};
# 70 "/usr/include/glib-2.0/gobject/gtypemodule.h"
struct _GTypeModuleClass
{
  GObjectClass parent_class;


  gboolean (* load) (GTypeModule *module);
  void (* unload) (GTypeModule *module);



  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
# 269 "/usr/include/glib-2.0/gobject/gtypemodule.h"
extern
GType g_type_module_get_type (void) __attribute__ ((__const__));
extern
gboolean g_type_module_use (GTypeModule *module);
extern
void g_type_module_unuse (GTypeModule *module);
extern
void g_type_module_set_name (GTypeModule *module,
                                       const gchar *name);
extern
GType g_type_module_register_type (GTypeModule *module,
                                       GType parent_type,
                                       const gchar *type_name,
                                       const GTypeInfo *type_info,
                                       GTypeFlags flags);
extern
void g_type_module_add_interface (GTypeModule *module,
                                       GType instance_type,
                                       GType interface_type,
                                       const GInterfaceInfo *interface_info);
extern
GType g_type_module_register_enum (GTypeModule *module,
                                       const gchar *name,
                                       const GEnumValue *const_static_values);
extern
GType g_type_module_register_flags (GTypeModule *module,
                                       const gchar *name,
                                       const GFlagsValue *const_static_values);


# 35 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtypeplugin.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtypeplugin.h"

# 38 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef struct _GTypePluginClass GTypePluginClass;







typedef void (*GTypePluginUse) (GTypePlugin *plugin);






typedef void (*GTypePluginUnuse) (GTypePlugin *plugin);
# 63 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef void (*GTypePluginCompleteTypeInfo) (GTypePlugin *plugin,
         GType g_type,
         GTypeInfo *info,
         GTypeValueTable *value_table);
# 77 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef void (*GTypePluginCompleteInterfaceInfo) (GTypePlugin *plugin,
         GType instance_type,
         GType interface_type,
         GInterfaceInfo *info);
# 101 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
struct _GTypePluginClass
{

  GTypeInterface base_iface;


  GTypePluginUse use_plugin;
  GTypePluginUnuse unuse_plugin;
  GTypePluginCompleteTypeInfo complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};



extern
GType g_type_plugin_get_type (void) __attribute__ ((__const__));
extern
void g_type_plugin_use (GTypePlugin *plugin);
extern
void g_type_plugin_unuse (GTypePlugin *plugin);
extern
void g_type_plugin_complete_type_info (GTypePlugin *plugin,
       GType g_type,
       GTypeInfo *info,
       GTypeValueTable *value_table);
extern
void g_type_plugin_complete_interface_info (GTypePlugin *plugin,
       GType instance_type,
       GType interface_type,
       GInterfaceInfo *info);


# 36 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvaluearray.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvaluearray.h"

# 41 "/usr/include/glib-2.0/gobject/gvaluearray.h"
typedef struct _GValueArray GValueArray;







struct _GValueArray
{
  guint n_values;
  GValue *values;


  guint n_prealloced;
};


__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GType g_value_array_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValue* g_value_array_get_nth (GValueArray *value_array,
           guint index_);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_new (guint n_prealloced);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
void g_value_array_free (GValueArray *value_array);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_copy (const GValueArray *value_array);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_prepend (GValueArray *value_array,
           const GValue *value);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_append (GValueArray *value_array,
           const GValue *value);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_insert (GValueArray *value_array,
           guint index_,
           const GValue *value);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_remove (GValueArray *value_array,
           guint index_);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_sort (GValueArray *value_array,
           GCompareFunc compare_func);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_sort_with_data (GValueArray *value_array,
           GCompareDataFunc compare_func,
           gpointer user_data);



# 37 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gvaluetypes.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvaluetypes.h"

# 191 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
__attribute__((__deprecated__("Use '" "g_value_set_schar" "' instead"))) extern
void g_value_set_char (GValue *value,
                                                 gchar v_char);
__attribute__((__deprecated__("Use '" "g_value_get_schar" "' instead"))) extern
gchar g_value_get_char (const GValue *value);
extern
void g_value_set_schar (GValue *value,
       gint8 v_char);
extern
gint8 g_value_get_schar (const GValue *value);
extern
void g_value_set_uchar (GValue *value,
       guchar v_uchar);
extern
guchar g_value_get_uchar (const GValue *value);
extern
void g_value_set_boolean (GValue *value,
       gboolean v_boolean);
extern
gboolean g_value_get_boolean (const GValue *value);
extern
void g_value_set_int (GValue *value,
       gint v_int);
extern
gint g_value_get_int (const GValue *value);
extern
void g_value_set_uint (GValue *value,
       guint v_uint);
extern
guint g_value_get_uint (const GValue *value);
extern
void g_value_set_long (GValue *value,
       glong v_long);
extern
glong g_value_get_long (const GValue *value);
extern
void g_value_set_ulong (GValue *value,
       gulong v_ulong);
extern
gulong g_value_get_ulong (const GValue *value);
extern
void g_value_set_int64 (GValue *value,
       gint64 v_int64);
extern
gint64 g_value_get_int64 (const GValue *value);
extern
void g_value_set_uint64 (GValue *value,
       guint64 v_uint64);
extern
guint64 g_value_get_uint64 (const GValue *value);
extern
void g_value_set_float (GValue *value,
       gfloat v_float);
extern
gfloat g_value_get_float (const GValue *value);
extern
void g_value_set_double (GValue *value,
       gdouble v_double);
extern
gdouble g_value_get_double (const GValue *value);
extern
void g_value_set_string (GValue *value,
       const gchar *v_string);
extern
void g_value_set_static_string (GValue *value,
       const gchar *v_string);
extern
void g_value_set_interned_string (GValue *value,
         const gchar *v_string);
extern
const gchar * g_value_get_string (const GValue *value);
extern
gchar* g_value_dup_string (const GValue *value);
extern
void g_value_set_pointer (GValue *value,
       gpointer v_pointer);
extern
gpointer g_value_get_pointer (const GValue *value);
extern
GType g_gtype_get_type (void);
extern
void g_value_set_gtype (GValue *value,
       GType v_gtype);
extern
GType g_value_get_gtype (const GValue *value);
extern
void g_value_set_variant (GValue *value,
       GVariant *variant);
extern
void g_value_take_variant (GValue *value,
       GVariant *variant);
extern
GVariant* g_value_get_variant (const GValue *value);
extern
GVariant* g_value_dup_variant (const GValue *value);



extern
GType g_pointer_type_register_static (const gchar *name);


extern
gchar* g_strdup_value_contents (const GValue *value);


extern
void g_value_take_string (GValue *value,
       gchar *v_string);
__attribute__((__deprecated__("Use '" "g_value_take_string" "' instead"))) extern
void g_value_set_string_take_ownership (GValue *value,
                                                 gchar *v_string);
# 311 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
typedef gchar* gchararray;



# 39 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h" 1
# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
typedef GClosure *GClosure_autoptr; typedef GList *GClosure_listautoptr; typedef GSList *GClosure_slistautoptr; typedef GQueue *GClosure_queueautoptr;
# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GClosure (GClosure *_ptr) { if (_ptr) (g_closure_unref) ((GClosure *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GClosure (GClosure **_ptr) { glib_autoptr_clear_GClosure (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GClosure (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_closure_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GClosure (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_closure_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GClosure (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_closure_unref); }
# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 24 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

typedef GEnumClass *GEnumClass_autoptr; typedef GList *GEnumClass_listautoptr; typedef GSList *GEnumClass_slistautoptr; typedef GQueue *GEnumClass_queueautoptr;
# 25 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 25 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 25 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 25 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEnumClass (GEnumClass *_ptr) { if (_ptr) (g_type_class_unref) ((GEnumClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEnumClass (GEnumClass **_ptr) { glib_autoptr_clear_GEnumClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEnumClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEnumClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEnumClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 25 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 25 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

typedef GFlagsClass *GFlagsClass_autoptr; typedef GList *GFlagsClass_listautoptr; typedef GSList *GFlagsClass_slistautoptr; typedef GQueue *GFlagsClass_queueautoptr;
# 26 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 26 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 26 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 26 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFlagsClass (GFlagsClass *_ptr) { if (_ptr) (g_type_class_unref) ((GFlagsClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFlagsClass (GFlagsClass **_ptr) { glib_autoptr_clear_GFlagsClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFlagsClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFlagsClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFlagsClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 26 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 26 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

typedef GObject *GObject_autoptr; typedef GList *GObject_listautoptr; typedef GSList *GObject_slistautoptr; typedef GQueue *GObject_queueautoptr;
# 27 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 27 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 27 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 27 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GObject (GObject *_ptr) { if (_ptr) (g_object_unref) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GObject (GObject **_ptr) { glib_autoptr_clear_GObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GObject (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GObject (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 27 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 27 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

typedef GInitiallyUnowned *GInitiallyUnowned_autoptr; typedef GList *GInitiallyUnowned_listautoptr; typedef GSList *GInitiallyUnowned_slistautoptr; typedef GQueue *GInitiallyUnowned_queueautoptr;
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInitiallyUnowned (GInitiallyUnowned *_ptr) { if (_ptr) (g_object_unref) ((GInitiallyUnowned *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInitiallyUnowned (GInitiallyUnowned **_ptr) { glib_autoptr_clear_GInitiallyUnowned (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInitiallyUnowned (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInitiallyUnowned (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInitiallyUnowned (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

typedef GParamSpec *GParamSpec_autoptr; typedef GList *GParamSpec_listautoptr; typedef GSList *GParamSpec_slistautoptr; typedef GQueue *GParamSpec_queueautoptr;
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GParamSpec (GParamSpec *_ptr) { if (_ptr) (g_param_spec_unref) ((GParamSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GParamSpec (GParamSpec **_ptr) { glib_autoptr_clear_GParamSpec (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GParamSpec (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_param_spec_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GParamSpec (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_param_spec_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GParamSpec (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_param_spec_unref); }
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

typedef GTypeClass *GTypeClass_autoptr; typedef GList *GTypeClass_listautoptr; typedef GSList *GTypeClass_slistautoptr; typedef GQueue *GTypeClass_queueautoptr;
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTypeClass (GTypeClass *_ptr) { if (_ptr) (g_type_class_unref) ((GTypeClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTypeClass (GTypeClass **_ptr) { glib_autoptr_clear_GTypeClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTypeClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTypeClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTypeClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"


# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic push
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GValue (GValue *_ptr) { (g_value_unset) (_ptr); }
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma GCC diagnostic pop
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"

# 41 "/usr/include/glib-2.0/glib-object.h" 2
# 29 "/usr/include/glib-2.0/gio/gioenums.h" 2


# 42 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_APP_INFO_CREATE_NONE = 0,
  G_APP_INFO_CREATE_NEEDS_TERMINAL = (1 << 0),
  G_APP_INFO_CREATE_SUPPORTS_URIS = (1 << 1),
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = (1 << 2)
} GAppInfoCreateFlags;
# 59 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_CONVERTER_NO_FLAGS = 0,
  G_CONVERTER_INPUT_AT_END = (1 << 0),
  G_CONVERTER_FLUSH = (1 << 1)
} GConverterFlags;
# 76 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_CONVERTER_ERROR = 0,
  G_CONVERTER_CONVERTED = 1,
  G_CONVERTER_FINISHED = 2,
  G_CONVERTER_FLUSHED = 3
} GConverterResult;
# 94 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;
# 110 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DATA_STREAM_NEWLINE_TYPE_LF,
  G_DATA_STREAM_NEWLINE_TYPE_CR,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
  G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;
# 133 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
  G_FILE_ATTRIBUTE_TYPE_UINT32,
  G_FILE_ATTRIBUTE_TYPE_INT32,
  G_FILE_ATTRIBUTE_TYPE_UINT64,
  G_FILE_ATTRIBUTE_TYPE_INT64,
  G_FILE_ATTRIBUTE_TYPE_OBJECT,
  G_FILE_ATTRIBUTE_TYPE_STRINGV
} GFileAttributeType;
# 155 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_INFO_NONE = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (1 << 0),
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;
# 170 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;
# 184 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_QUERY_INFO_NONE = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)
} GFileQueryInfoFlags;
# 208 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_CREATE_NONE = 0,
  G_FILE_CREATE_PRIVATE = (1 << 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;
# 231 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MEASURE_NONE = 0,
  G_FILE_MEASURE_REPORT_ANY_ERROR = (1 << 1),
  G_FILE_MEASURE_APPARENT_SIZE = (1 << 2),
  G_FILE_MEASURE_NO_XDEV = (1 << 3)
} GFileMeasureFlags;







typedef enum {
  G_MOUNT_MOUNT_NONE = 0
} GMountMountFlags;
# 257 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_UNMOUNT_NONE = 0,
  G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;
# 270 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DRIVE_START_NONE = 0
} GDriveStartFlags;
# 294 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DRIVE_START_STOP_TYPE_UNKNOWN,
  G_DRIVE_START_STOP_TYPE_SHUTDOWN,
  G_DRIVE_START_STOP_TYPE_NETWORK,
  G_DRIVE_START_STOP_TYPE_MULTIDISK,
  G_DRIVE_START_STOP_TYPE_PASSWORD
} GDriveStartStopType;
# 314 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_COPY_NONE = 0,
  G_FILE_COPY_OVERWRITE = (1 << 0),
  G_FILE_COPY_BACKUP = (1 << 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS = (1 << 2),
  G_FILE_COPY_ALL_METADATA = (1 << 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5)
} GFileCopyFlags;
# 344 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MONITOR_NONE = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = (1 << 0),
  G_FILE_MONITOR_SEND_MOVED = (1 << 1),
  G_FILE_MONITOR_WATCH_HARD_LINKS = (1 << 2),
  G_FILE_MONITOR_WATCH_MOVES = (1 << 3)
} GFileMonitorFlags;
# 376 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR,
  G_FILE_TYPE_DIRECTORY,
  G_FILE_TYPE_SYMBOLIC_LINK,
  G_FILE_TYPE_SPECIAL,
  G_FILE_TYPE_SHORTCUT,
  G_FILE_TYPE_MOUNTABLE
} GFileType;
# 397 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
# 427 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MONITOR_EVENT_CHANGED,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
  G_FILE_MONITOR_EVENT_DELETED,
  G_FILE_MONITOR_EVENT_CREATED,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
  G_FILE_MONITOR_EVENT_UNMOUNTED,
  G_FILE_MONITOR_EVENT_MOVED,
  G_FILE_MONITOR_EVENT_RENAMED,
  G_FILE_MONITOR_EVENT_MOVED_IN,
  G_FILE_MONITOR_EVENT_MOVED_OUT
} GFileMonitorEvent;
# 530 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_ERROR_FAILED,
  G_IO_ERROR_NOT_FOUND,
  G_IO_ERROR_EXISTS,
  G_IO_ERROR_IS_DIRECTORY,
  G_IO_ERROR_NOT_DIRECTORY,
  G_IO_ERROR_NOT_EMPTY,
  G_IO_ERROR_NOT_REGULAR_FILE,
  G_IO_ERROR_NOT_SYMBOLIC_LINK,
  G_IO_ERROR_NOT_MOUNTABLE_FILE,
  G_IO_ERROR_FILENAME_TOO_LONG,
  G_IO_ERROR_INVALID_FILENAME,
  G_IO_ERROR_TOO_MANY_LINKS,
  G_IO_ERROR_NO_SPACE,
  G_IO_ERROR_INVALID_ARGUMENT,
  G_IO_ERROR_PERMISSION_DENIED,
  G_IO_ERROR_NOT_SUPPORTED,
  G_IO_ERROR_NOT_MOUNTED,
  G_IO_ERROR_ALREADY_MOUNTED,
  G_IO_ERROR_CLOSED,
  G_IO_ERROR_CANCELLED,
  G_IO_ERROR_PENDING,
  G_IO_ERROR_READ_ONLY,
  G_IO_ERROR_CANT_CREATE_BACKUP,
  G_IO_ERROR_WRONG_ETAG,
  G_IO_ERROR_TIMED_OUT,
  G_IO_ERROR_WOULD_RECURSE,
  G_IO_ERROR_BUSY,
  G_IO_ERROR_WOULD_BLOCK,
  G_IO_ERROR_HOST_NOT_FOUND,
  G_IO_ERROR_WOULD_MERGE,
  G_IO_ERROR_FAILED_HANDLED,
  G_IO_ERROR_TOO_MANY_OPEN_FILES,
  G_IO_ERROR_NOT_INITIALIZED,
  G_IO_ERROR_ADDRESS_IN_USE,
  G_IO_ERROR_PARTIAL_INPUT,
  G_IO_ERROR_INVALID_DATA,
  G_IO_ERROR_DBUS_ERROR,
  G_IO_ERROR_HOST_UNREACHABLE,
  G_IO_ERROR_NETWORK_UNREACHABLE,
  G_IO_ERROR_CONNECTION_REFUSED,
  G_IO_ERROR_PROXY_FAILED,
  G_IO_ERROR_PROXY_AUTH_FAILED,
  G_IO_ERROR_PROXY_NEED_AUTH,
  G_IO_ERROR_PROXY_NOT_ALLOWED,
  G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_NOT_CONNECTED,
  G_IO_ERROR_MESSAGE_TOO_LARGE
} GIOErrorEnum;
# 595 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_ASK_PASSWORD_NEED_PASSWORD = (1 << 0),
  G_ASK_PASSWORD_NEED_USERNAME = (1 << 1),
  G_ASK_PASSWORD_NEED_DOMAIN = (1 << 2),
  G_ASK_PASSWORD_SAVING_SUPPORTED = (1 << 3),
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4),
  G_ASK_PASSWORD_TCRYPT = (1 << 5),
} GAskPasswordFlags;
# 616 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_PASSWORD_SAVE_NEVER,
  G_PASSWORD_SAVE_FOR_SESSION,
  G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;
# 635 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_OPERATION_HANDLED,
  G_MOUNT_OPERATION_ABORTED,
  G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;
# 652 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_OUTPUT_STREAM_SPLICE_NONE = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
# 673 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_STREAM_SPLICE_NONE = 0,
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (1 << 0),
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (1 << 1),
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (1 << 2)
} GIOStreamSpliceFlags;
# 692 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_EMBLEM_ORIGIN_UNKNOWN,
  G_EMBLEM_ORIGIN_DEVICE,
  G_EMBLEM_ORIGIN_LIVEMETADATA,
  G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;
# 712 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOLVER_ERROR_NOT_FOUND,
  G_RESOLVER_ERROR_TEMPORARY_FAILURE,
  G_RESOLVER_ERROR_INTERNAL
} GResolverError;
# 759 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOLVER_RECORD_SRV = 1,
  G_RESOLVER_RECORD_MX,
  G_RESOLVER_RECORD_TXT,
  G_RESOLVER_RECORD_SOA,
  G_RESOLVER_RECORD_NS
} GResolverRecordType;
# 777 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOURCE_ERROR_NOT_FOUND,
  G_RESOURCE_ERROR_INTERNAL
} GResourceError;
# 792 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOURCE_FLAGS_NONE = 0,
  G_RESOURCE_FLAGS_COMPRESSED = (1<<0)
} GResourceFlags;
# 805 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOURCE_LOOKUP_FLAGS_NONE = 0
} GResourceLookupFlags;
# 822 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_FAMILY_INVALID,
  G_SOCKET_FAMILY_UNIX = 1,
  G_SOCKET_FAMILY_IPV4 = 2,
  G_SOCKET_FAMILY_IPV6 = 10
} GSocketFamily;
# 843 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_SOCKET_TYPE_INVALID,
  G_SOCKET_TYPE_STREAM,
  G_SOCKET_TYPE_DATAGRAM,
  G_SOCKET_TYPE_SEQPACKET
} GSocketType;
# 868 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_SOCKET_MSG_NONE,
  G_SOCKET_MSG_OOB = 1,
  G_SOCKET_MSG_PEEK = 2,
  G_SOCKET_MSG_DONTROUTE = 4
} GSocketMsgFlags;
# 894 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP = 6,
  G_SOCKET_PROTOCOL_UDP = 17,
  G_SOCKET_PROTOCOL_SCTP = 132
} GSocketProtocol;
# 913 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
  G_ZLIB_COMPRESSOR_FORMAT_GZIP,
  G_ZLIB_COMPRESSOR_FORMAT_RAW
} GZlibCompressorFormat;
# 944 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_UNIX_SOCKET_ADDRESS_INVALID,
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
  G_UNIX_SOCKET_ADDRESS_PATH,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
} GUnixSocketAddressType;
# 963 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_BUS_TYPE_STARTER = -1,
  G_BUS_TYPE_NONE = 0,
  G_BUS_TYPE_SYSTEM = 1,
  G_BUS_TYPE_SESSION = 2
} GBusType;
# 984 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_BUS_NAME_OWNER_FLAGS_NONE = 0,
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (1<<0),
  G_BUS_NAME_OWNER_FLAGS_REPLACE = (1<<1),
  G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = (1<<2)
} GBusNameOwnerFlags;
# 1005 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (1<<0)
} GBusNameWatcherFlags;
# 1032 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_PROXY_FLAGS_NONE = 0,
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (1<<0),
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (1<<1),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (1<<2),
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (1<<3),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = (1<<4),
  G_DBUS_PROXY_FLAGS_NO_MATCH_RULE = (1<<5)
} GDBusProxyFlags;
# 1150 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{

  G_DBUS_ERROR_FAILED,
  G_DBUS_ERROR_NO_MEMORY,
  G_DBUS_ERROR_SERVICE_UNKNOWN,
  G_DBUS_ERROR_NAME_HAS_NO_OWNER,
  G_DBUS_ERROR_NO_REPLY,
  G_DBUS_ERROR_IO_ERROR,
  G_DBUS_ERROR_BAD_ADDRESS,
  G_DBUS_ERROR_NOT_SUPPORTED,
  G_DBUS_ERROR_LIMITS_EXCEEDED,
  G_DBUS_ERROR_ACCESS_DENIED,
  G_DBUS_ERROR_AUTH_FAILED,
  G_DBUS_ERROR_NO_SERVER,
  G_DBUS_ERROR_TIMEOUT,
  G_DBUS_ERROR_NO_NETWORK,
  G_DBUS_ERROR_ADDRESS_IN_USE,
  G_DBUS_ERROR_DISCONNECTED,
  G_DBUS_ERROR_INVALID_ARGS,
  G_DBUS_ERROR_FILE_NOT_FOUND,
  G_DBUS_ERROR_FILE_EXISTS,
  G_DBUS_ERROR_UNKNOWN_METHOD,
  G_DBUS_ERROR_TIMED_OUT,
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
  G_DBUS_ERROR_MATCH_RULE_INVALID,
  G_DBUS_ERROR_SPAWN_EXEC_FAILED,
  G_DBUS_ERROR_SPAWN_FORK_FAILED,
  G_DBUS_ERROR_SPAWN_CHILD_EXITED,
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
  G_DBUS_ERROR_SPAWN_FAILED,
  G_DBUS_ERROR_SPAWN_SETUP_FAILED,
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
  G_DBUS_ERROR_SPAWN_FILE_INVALID,
  G_DBUS_ERROR_SPAWN_NO_MEMORY,
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
  G_DBUS_ERROR_INVALID_SIGNATURE,
  G_DBUS_ERROR_INVALID_FILE_CONTENT,
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
  G_DBUS_ERROR_OBJECT_PATH_IN_USE,
  G_DBUS_ERROR_UNKNOWN_OBJECT,
  G_DBUS_ERROR_UNKNOWN_INTERFACE,
  G_DBUS_ERROR_UNKNOWN_PROPERTY,
  G_DBUS_ERROR_PROPERTY_READ_ONLY
} GDBusError;
# 1220 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_CONNECTION_FLAGS_NONE = 0,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (1<<0),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (1<<1),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<2),
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (1<<3),
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (1<<4),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (1<<5)
} GDBusConnectionFlags;
# 1240 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_CAPABILITY_FLAGS_NONE = 0,
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (1<<0)
} GDBusCapabilityFlags;
# 1258 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_CALL_FLAGS_NONE = 0,
  G_DBUS_CALL_FLAGS_NO_AUTO_START = (1<<0),
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<1)
} GDBusCallFlags;
# 1277 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_MESSAGE_TYPE_INVALID,
  G_DBUS_MESSAGE_TYPE_METHOD_CALL,
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
  G_DBUS_MESSAGE_TYPE_ERROR,
  G_DBUS_MESSAGE_TYPE_SIGNAL
} GDBusMessageType;
# 1299 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (1<<0),
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (1<<1),
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<2)
} GDBusMessageFlags;
# 1323 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
  G_DBUS_MESSAGE_HEADER_FIELD_PATH,
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
} GDBusMessageHeaderField;
# 1346 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (1<<0),
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (1<<1)
} GDBusPropertyInfoFlags;
# 1364 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SUBTREE_FLAGS_NONE = 0,
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (1<<0)
} GDBusSubtreeFlags;
# 1385 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SERVER_FLAGS_NONE = 0,
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (1<<0),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<1),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (1<<2)
} GDBusServerFlags;
# 1409 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SIGNAL_FLAGS_NONE = 0,
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (1<<0),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = (1<<1),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = (1<<2)
} GDBusSignalFlags;
# 1428 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (1<<0)
} GDBusSendMessageFlags;
# 1450 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_CREDENTIALS_TYPE_INVALID,
  G_CREDENTIALS_TYPE_LINUX_UCRED,
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
  G_CREDENTIALS_TYPE_SOLARIS_UCRED,
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID,
  G_CREDENTIALS_TYPE_APPLE_XUCRED,
  G_CREDENTIALS_TYPE_WIN32_PID,
} GCredentialsType;
# 1471 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 'B',
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l'
} GDBusMessageByteOrder;
# 1521 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_APPLICATION_FLAGS_NONE,
  G_APPLICATION_IS_SERVICE = (1 << 0),
  G_APPLICATION_IS_LAUNCHER = (1 << 1),

  G_APPLICATION_HANDLES_OPEN = (1 << 2),
  G_APPLICATION_HANDLES_COMMAND_LINE = (1 << 3),
  G_APPLICATION_SEND_ENVIRONMENT = (1 << 4),

  G_APPLICATION_NON_UNIQUE = (1 << 5),

  G_APPLICATION_CAN_OVERRIDE_APP_ID = (1 << 6),
  G_APPLICATION_ALLOW_REPLACEMENT = (1 << 7),
  G_APPLICATION_REPLACE = (1 << 8)
} GApplicationFlags;
# 1565 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_ERROR_UNAVAILABLE,
  G_TLS_ERROR_MISC,
  G_TLS_ERROR_BAD_CERTIFICATE,
  G_TLS_ERROR_NOT_TLS,
  G_TLS_ERROR_HANDSHAKE,
  G_TLS_ERROR_CERTIFICATE_REQUIRED,
  G_TLS_ERROR_EOF,
  G_TLS_ERROR_INAPPROPRIATE_FALLBACK,
  G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD
} GTlsError;
# 1609 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_CERTIFICATE_UNKNOWN_CA = (1 << 0),
  G_TLS_CERTIFICATE_BAD_IDENTITY = (1 << 1),
  G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
  G_TLS_CERTIFICATE_EXPIRED = (1 << 3),
  G_TLS_CERTIFICATE_REVOKED = (1 << 4),
  G_TLS_CERTIFICATE_INSECURE = (1 << 5),
  G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),

  G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f
} GTlsCertificateFlags;
# 1631 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_AUTHENTICATION_NONE,
  G_TLS_AUTHENTICATION_REQUESTED,
  G_TLS_AUTHENTICATION_REQUIRED
} GTlsAuthenticationMode;
# 1653 "/usr/include/glib-2.0/gio/gioenums.h"

typedef enum {
  G_TLS_CHANNEL_BINDING_TLS_UNIQUE,
  G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT
} GTlsChannelBindingType;
# 1683 "/usr/include/glib-2.0/gio/gioenums.h"

typedef enum {
  G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED,
  G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED,
  G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR
} GTlsChannelBindingError;
# 1707 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_REHANDSHAKE_NEVER,
  G_TLS_REHANDSHAKE_SAFELY,
  G_TLS_REHANDSHAKE_UNSAFELY
} GTlsRehandshakeMode __attribute__((__deprecated__));
# 1733 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum _GTlsPasswordFlags
{
  G_TLS_PASSWORD_NONE = 0,
  G_TLS_PASSWORD_RETRY = 1 << 1,
  G_TLS_PASSWORD_MANY_TRIES = 1 << 2,
  G_TLS_PASSWORD_FINAL_TRY = 1 << 3,
  G_TLS_PASSWORD_PKCS11_USER = 1 << 4,
  G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 1 << 5,
  G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 1 << 6
} GTlsPasswordFlags;
# 1758 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_INTERACTION_UNHANDLED,
  G_TLS_INTERACTION_HANDLED,
  G_TLS_INTERACTION_FAILED
} GTlsInteractionResult;
# 1776 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = (1<<0)
} GDBusInterfaceSkeletonFlags;
# 1794 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (1<<0)
} GDBusObjectManagerClientFlags;
# 1808 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_DATABASE_VERIFY_NONE = 0
} GTlsDatabaseVerifyFlags;
# 1824 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_DATABASE_LOOKUP_NONE = 0,
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
} GTlsDatabaseLookupFlags;
# 1839 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
} GTlsCertificateRequestFlags;
# 1866 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_PROTOCOL_VERSION_UNKNOWN = 0,
  G_TLS_PROTOCOL_VERSION_SSL_3_0 = 1,
  G_TLS_PROTOCOL_VERSION_TLS_1_0 = 2,
  G_TLS_PROTOCOL_VERSION_TLS_1_1 = 3,
  G_TLS_PROTOCOL_VERSION_TLS_1_2 = 4,
  G_TLS_PROTOCOL_VERSION_TLS_1_3 = 5,
  G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201,
  G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202,
} GTlsProtocolVersion;
# 1888 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_MODULE_SCOPE_NONE,
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
} GIOModuleScopeFlags;
# 1919 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_CLIENT_RESOLVING,
  G_SOCKET_CLIENT_RESOLVED,
  G_SOCKET_CLIENT_CONNECTING,
  G_SOCKET_CLIENT_CONNECTED,
  G_SOCKET_CLIENT_PROXY_NEGOTIATING,
  G_SOCKET_CLIENT_PROXY_NEGOTIATED,
  G_SOCKET_CLIENT_TLS_HANDSHAKING,
  G_SOCKET_CLIENT_TLS_HANDSHAKED,
  G_SOCKET_CLIENT_COMPLETE
} GSocketClientEvent;
# 1947 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_LISTENER_BINDING,
  G_SOCKET_LISTENER_BOUND,
  G_SOCKET_LISTENER_LISTENING,
  G_SOCKET_LISTENER_LISTENED
} GSocketListenerEvent;
# 1962 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TEST_DBUS_NONE = 0
} GTestDBusFlags;
# 2007 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SUBPROCESS_FLAGS_NONE = 0,
  G_SUBPROCESS_FLAGS_STDIN_PIPE = (1u << 0),
  G_SUBPROCESS_FLAGS_STDIN_INHERIT = (1u << 1),
  G_SUBPROCESS_FLAGS_STDOUT_PIPE = (1u << 2),
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE = (1u << 3),
  G_SUBPROCESS_FLAGS_STDERR_PIPE = (1u << 4),
  G_SUBPROCESS_FLAGS_STDERR_SILENCE = (1u << 5),
  G_SUBPROCESS_FLAGS_STDERR_MERGE = (1u << 6),
  G_SUBPROCESS_FLAGS_INHERIT_FDS = (1u << 7),
  G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = (1u << 8)
} GSubprocessFlags;
# 2039 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_NOTIFICATION_PRIORITY_NORMAL,
  G_NOTIFICATION_PRIORITY_LOW,
  G_NOTIFICATION_PRIORITY_HIGH,
  G_NOTIFICATION_PRIORITY_URGENT
} GNotificationPriority;
# 2063 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_NETWORK_CONNECTIVITY_LOCAL = 1,
  G_NETWORK_CONNECTIVITY_LIMITED = 2,
  G_NETWORK_CONNECTIVITY_PORTAL = 3,
  G_NETWORK_CONNECTIVITY_FULL = 4
} GNetworkConnectivity;
# 2088 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_POLLABLE_RETURN_FAILED = 0,
  G_POLLABLE_RETURN_OK = 1,
  G_POLLABLE_RETURN_WOULD_BLOCK = -G_IO_ERROR_WOULD_BLOCK
} GPollableReturn;
# 2117 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50,
  G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100,
  G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255
} GMemoryMonitorWarningLevel;


# 29 "/usr/include/glib-2.0/gio/giotypes.h" 2



typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppInfo GAppInfo;
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GAsyncInitable GAsyncInitable;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GCancellable GCancellable;
typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GConverter GConverter;
typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GDatagramBased GDatagramBased;
typedef struct _GDataInputStream GDataInputStream;
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibDecompressor GZlibDecompressor;

typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GRemoteActionGroup GRemoteActionGroup;
typedef struct _GDBusActionGroup GDBusActionGroup;
typedef struct _GActionMap GActionMap;
typedef struct _GActionGroup GActionGroup;
typedef struct _GPropertyAction GPropertyAction;
typedef struct _GSimpleAction GSimpleAction;
typedef struct _GAction GAction;
typedef struct _GApplication GApplication;
typedef struct _GApplicationCommandLine GApplicationCommandLine;
typedef struct _GSettingsBackend GSettingsBackend;
typedef struct _GSettings GSettings;
typedef struct _GPermission GPermission;

typedef struct _GMenuModel GMenuModel;
typedef struct _GNotification GNotification;






typedef struct _GDrive GDrive;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterOutputStream GFilterOutputStream;
# 84 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GFile GFile;
typedef struct _GFileInfo GFileInfo;






typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
typedef struct _GFileDescriptorBased GFileDescriptorBased;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileIcon GFileIcon;
typedef struct _GFilenameCompleter GFilenameCompleter;


typedef struct _GIcon GIcon;
typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressMask GInetAddressMask;
typedef struct _GInetSocketAddress GInetSocketAddress;
typedef struct _GNativeSocketAddress GNativeSocketAddress;
typedef struct _GInputStream GInputStream;
typedef struct _GInitable GInitable;
typedef struct _GIOModule GIOModule;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GIOExtension GIOExtension;






typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef struct _GIOStreamAdapter GIOStreamAdapter;
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GBytesIcon GBytesIcon;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryOutputStream GMemoryOutputStream;






typedef struct _GMount GMount;
typedef struct _GMountOperation GMountOperation;
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkMonitor GNetworkMonitor;
typedef struct _GNetworkService GNetworkService;
typedef struct _GOutputStream GOutputStream;
typedef struct _GIOStream GIOStream;
typedef struct _GSimpleIOStream GSimpleIOStream;
typedef struct _GPollableInputStream GPollableInputStream;
typedef struct _GPollableOutputStream GPollableOutputStream;
typedef struct _GResolver GResolver;
# 150 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GResource GResource;
typedef struct _GSeekable GSeekable;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
# 161 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GSocket GSocket;







typedef struct _GSocketControlMessage GSocketControlMessage;







typedef struct _GSocketClient GSocketClient;







typedef struct _GSocketConnection GSocketConnection;







typedef struct _GSocketListener GSocketListener;
# 202 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GSocketService GSocketService;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GSocketConnectable GSocketConnectable;
typedef struct _GSrvTarget GSrvTarget;
typedef struct _GTask GTask;







typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
# 225 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GDtlsConnection GDtlsConnection;
typedef struct _GDtlsClientConnection GDtlsClientConnection;
typedef struct _GDtlsServerConnection GDtlsServerConnection;
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsClientConnection GTlsClientConnection;
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsDatabase GTlsDatabase;
typedef struct _GTlsFileDatabase GTlsFileDatabase;
typedef struct _GTlsInteraction GTlsInteraction;
typedef struct _GTlsPassword GTlsPassword;
typedef struct _GTlsServerConnection GTlsServerConnection;
typedef struct _GVfs GVfs;
# 247 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GProxyResolver GProxyResolver;
typedef struct _GProxy GProxy;
typedef struct _GProxyAddress GProxyAddress;
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;






typedef struct _GVolume GVolume;
typedef struct _GVolumeMonitor GVolumeMonitor;
# 279 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GAsyncReadyCallback) (GObject *source_object,
         GAsyncResult *res,
         gpointer user_data);
# 293 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GFileProgressCallback) (goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer user_data);
# 310 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (* GFileReadMoreCallback) (const char *file_contents,
                                            goffset file_size,
                                            gpointer callback_data);
# 352 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (* GFileMeasureProgressCallback) (gboolean reporting,
                                               guint64 current_size,
                                               guint64 num_dirs,
                                               guint64 num_files,
                                               gpointer user_data);
# 372 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GIOSchedulerJobFunc) (GIOSchedulerJob *job,
      GCancellable *cancellable,
      gpointer user_data);
# 385 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GSimpleAsyncThreadFunc) (GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable);
# 402 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GSocketSourceFunc) (GSocket *socket,
           GIOCondition condition,
           gpointer user_data);
# 420 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GDatagramBasedSourceFunc) (GDatagramBased *datagram_based,
                                              GIOCondition condition,
                                              gpointer user_data);
# 436 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GInputVector GInputVector;

struct _GInputVector {
  gpointer buffer;
  gsize size;
};
# 482 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GInputMessage GInputMessage;

struct _GInputMessage {
  GSocketAddress **address;

  GInputVector *vectors;
  guint num_vectors;

  gsize bytes_received;
  gint flags;

  GSocketControlMessage ***control_messages;
  guint *num_control_messages;
};
# 509 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GOutputVector GOutputVector;

struct _GOutputVector {
  gconstpointer buffer;
  gsize size;
};
# 537 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GOutputMessage GOutputMessage;

struct _GOutputMessage {
  GSocketAddress *address;

  GOutputVector *vectors;
  guint num_vectors;

  guint bytes_sent;

  GSocketControlMessage **control_messages;
  guint num_control_messages;
};

typedef struct _GCredentials GCredentials;
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
typedef struct _GUnixFDList GUnixFDList;
typedef struct _GDBusMessage GDBusMessage;
typedef struct _GDBusConnection GDBusConnection;
typedef struct _GDBusProxy GDBusProxy;
typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusServer GDBusServer;
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef struct _GDBusErrorEntry GDBusErrorEntry;
typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
typedef struct _GDBusArgInfo GDBusArgInfo;
typedef struct _GDBusMethodInfo GDBusMethodInfo;
typedef struct _GDBusSignalInfo GDBusSignalInfo;
typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
typedef struct _GDBusNodeInfo GDBusNodeInfo;
# 583 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GCancellableSourceFunc) (GCancellable *cancellable,
         gpointer user_data);
# 599 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GPollableSourceFunc) (GObject *pollable_stream,
      gpointer user_data);

typedef struct _GDBusInterface GDBusInterface;
typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
typedef struct _GDBusObject GDBusObject;
typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
typedef struct _GDBusObjectProxy GDBusObjectProxy;
typedef struct _GDBusObjectManager GDBusObjectManager;
typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
# 632 "/usr/include/glib-2.0/gio/giotypes.h"
typedef GType (*GDBusProxyTypeFunc) (GDBusObjectManagerClient *manager,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     gpointer user_data);

typedef struct _GTestDBus GTestDBus;
# 646 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GSubprocess GSubprocess;







typedef struct _GSubprocessLauncher GSubprocessLauncher;


# 27 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gaction.h" 1
# 29 "/usr/include/glib-2.0/gio/gaction.h"

# 38 "/usr/include/glib-2.0/gio/gaction.h"
typedef struct _GActionInterface GActionInterface;

struct _GActionInterface
{
  GTypeInterface g_iface;


  const gchar * (* get_name) (GAction *action);
  const GVariantType * (* get_parameter_type) (GAction *action);
  const GVariantType * (* get_state_type) (GAction *action);
  GVariant * (* get_state_hint) (GAction *action);

  gboolean (* get_enabled) (GAction *action);
  GVariant * (* get_state) (GAction *action);

  void (* change_state) (GAction *action,
                                                 GVariant *value);
  void (* activate) (GAction *action,
                                                 GVariant *parameter);
};

extern
GType g_action_get_type (void) __attribute__ ((__const__));

extern
const gchar * g_action_get_name (GAction *action);
extern
const GVariantType * g_action_get_parameter_type (GAction *action);
extern
const GVariantType * g_action_get_state_type (GAction *action);
extern
GVariant * g_action_get_state_hint (GAction *action);

extern
gboolean g_action_get_enabled (GAction *action);
extern
GVariant * g_action_get_state (GAction *action);

extern
void g_action_change_state (GAction *action,
                                                                         GVariant *value);
extern
void g_action_activate (GAction *action,
                                                                         GVariant *parameter);

extern
gboolean g_action_name_is_valid (const gchar *action_name);

extern
gboolean g_action_parse_detailed_name (const gchar *detailed_name,
                                                                         gchar **action_name,
                                                                         GVariant **target_value,
                                                                         GError **error);

extern
gchar * g_action_print_detailed_name (const gchar *action_name,
                                                                         GVariant *target_value);


# 29 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gactiongroup.h" 1
# 29 "/usr/include/glib-2.0/gio/gactiongroup.h"

# 40 "/usr/include/glib-2.0/gio/gactiongroup.h"
typedef struct _GActionGroupInterface GActionGroupInterface;

struct _GActionGroupInterface
{
  GTypeInterface g_iface;


  gboolean (* has_action) (GActionGroup *action_group,
                                                        const gchar *action_name);

  gchar ** (* list_actions) (GActionGroup *action_group);

  gboolean (* get_action_enabled) (GActionGroup *action_group,
                                                        const gchar *action_name);

  const GVariantType * (* get_action_parameter_type) (GActionGroup *action_group,
                                                        const gchar *action_name);

  const GVariantType * (* get_action_state_type) (GActionGroup *action_group,
                                                        const gchar *action_name);

  GVariant * (* get_action_state_hint) (GActionGroup *action_group,
                                                        const gchar *action_name);

  GVariant * (* get_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name);

  void (* change_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *value);

  void (* activate_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *parameter);


  void (* action_added) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_removed) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_enabled_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean enabled);
  void (* action_state_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *state);


  gboolean (* query_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean *enabled,
                                                        const GVariantType **parameter_type,
                                                        const GVariantType **state_type,
                                                        GVariant **state_hint,
                                                        GVariant **state);
};

extern
GType g_action_group_get_type (void) __attribute__ ((__const__));

extern
gboolean g_action_group_has_action (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
gchar ** g_action_group_list_actions (GActionGroup *action_group);

extern
const GVariantType * g_action_group_get_action_parameter_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
const GVariantType * g_action_group_get_action_state_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
GVariant * g_action_group_get_action_state_hint (GActionGroup *action_group,
                                                                         const gchar *action_name);

extern
gboolean g_action_group_get_action_enabled (GActionGroup *action_group,
                                                                         const gchar *action_name);

extern
GVariant * g_action_group_get_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
void g_action_group_change_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *value);

extern
void g_action_group_activate_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter);


extern
void g_action_group_action_added (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
void g_action_group_action_removed (GActionGroup *action_group,
                                                                         const gchar *action_name);
extern
void g_action_group_action_enabled_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean enabled);

extern
void g_action_group_action_state_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *state);

extern
gboolean g_action_group_query_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean *enabled,
                                                                         const GVariantType **parameter_type,
                                                                         const GVariantType **state_type,
                                                                         GVariant **state_hint,
                                                                         GVariant **state);


# 30 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gactiongroupexporter.h" 1
# 31 "/usr/include/glib-2.0/gio/gactiongroupexporter.h"


extern
guint g_dbus_connection_export_action_group (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GActionGroup *action_group,
                                                                         GError **error);

extern
void g_dbus_connection_unexport_action_group (GDBusConnection *connection,
                                                                         guint export_id);


# 31 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gactionmap.h" 1
# 29 "/usr/include/glib-2.0/gio/gactionmap.h"

# 40 "/usr/include/glib-2.0/gio/gactionmap.h"
typedef struct _GActionMapInterface GActionMapInterface;
typedef struct _GActionEntry GActionEntry;

struct _GActionMapInterface
{
  GTypeInterface g_iface;

  GAction * (* lookup_action) (GActionMap *action_map,
                               const gchar *action_name);
  void (* add_action) (GActionMap *action_map,
                               GAction *action);
  void (* remove_action) (GActionMap *action_map,
                               const gchar *action_name);
};

struct _GActionEntry
{
  const gchar *name;

  void (* activate) (GSimpleAction *action,
                     GVariant *parameter,
                     gpointer user_data);

  const gchar *parameter_type;

  const gchar *state;

  void (* change_state) (GSimpleAction *action,
                         GVariant *value,
                         gpointer user_data);


  gsize padding[3];
};

extern
GType g_action_map_get_type (void) __attribute__ ((__const__));

extern
GAction * g_action_map_lookup_action (GActionMap *action_map,
                                                                         const gchar *action_name);
extern
void g_action_map_add_action (GActionMap *action_map,
                                                                         GAction *action);
extern
void g_action_map_remove_action (GActionMap *action_map,
                                                                         const gchar *action_name);
extern
void g_action_map_add_action_entries (GActionMap *action_map,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);


# 32 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gappinfo.h" 1
# 30 "/usr/include/glib-2.0/gio/gappinfo.h"

# 44 "/usr/include/glib-2.0/gio/gappinfo.h"
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
# 86 "/usr/include/glib-2.0/gio/gappinfo.h"
typedef struct _GAppInfoIface GAppInfoIface;

struct _GAppInfoIface
{
  GTypeInterface g_iface;



  GAppInfo * (* dup) (GAppInfo *appinfo);
  gboolean (* equal) (GAppInfo *appinfo1,
                                                 GAppInfo *appinfo2);
  const char * (* get_id) (GAppInfo *appinfo);
  const char * (* get_name) (GAppInfo *appinfo);
  const char * (* get_description) (GAppInfo *appinfo);
  const char * (* get_executable) (GAppInfo *appinfo);
  GIcon * (* get_icon) (GAppInfo *appinfo);
  gboolean (* launch) (GAppInfo *appinfo,
                                                 GList *files,
                                                 GAppLaunchContext *context,
                                                 GError **error);
  gboolean (* supports_uris) (GAppInfo *appinfo);
  gboolean (* supports_files) (GAppInfo *appinfo);
  gboolean (* launch_uris) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *context,
                                                 GError **error);
  gboolean (* should_show) (GAppInfo *appinfo);


  gboolean (* set_as_default_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* set_as_default_for_extension) (GAppInfo *appinfo,
                                                 const char *extension,
                                                 GError **error);
  gboolean (* add_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_remove_supports_type) (GAppInfo *appinfo);
  gboolean (* remove_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_delete) (GAppInfo *appinfo);
  gboolean (* do_delete) (GAppInfo *appinfo);
  const char * (* get_commandline) (GAppInfo *appinfo);
  const char * (* get_display_name) (GAppInfo *appinfo);
  gboolean (* set_as_last_used_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  const char ** (* get_supported_types) (GAppInfo *appinfo);
  void (* launch_uris_async) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *context,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
  gboolean (* launch_uris_finish) (GAppInfo *appinfo,
                                                 GAsyncResult *result,
                                                 GError **error);
};

extern
GType g_app_info_get_type (void) __attribute__ ((__const__));
extern
GAppInfo * g_app_info_create_from_commandline (const char *commandline,
                                                     const char *application_name,
                                                     GAppInfoCreateFlags flags,
                                                     GError **error);
extern
GAppInfo * g_app_info_dup (GAppInfo *appinfo);
extern
gboolean g_app_info_equal (GAppInfo *appinfo1,
                                                     GAppInfo *appinfo2);
extern
const char *g_app_info_get_id (GAppInfo *appinfo);
extern
const char *g_app_info_get_name (GAppInfo *appinfo);
extern
const char *g_app_info_get_display_name (GAppInfo *appinfo);
extern
const char *g_app_info_get_description (GAppInfo *appinfo);
extern
const char *g_app_info_get_executable (GAppInfo *appinfo);
extern
const char *g_app_info_get_commandline (GAppInfo *appinfo);
extern
GIcon * g_app_info_get_icon (GAppInfo *appinfo);
extern
gboolean g_app_info_launch (GAppInfo *appinfo,
                                                     GList *files,
                                                     GAppLaunchContext *context,
                                                     GError **error);
extern
gboolean g_app_info_supports_uris (GAppInfo *appinfo);
extern
gboolean g_app_info_supports_files (GAppInfo *appinfo);
extern
gboolean g_app_info_launch_uris (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *context,
                                                     GError **error);
extern
void g_app_info_launch_uris_async (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *context,
                                                     GCancellable *cancellable,
                                                     GAsyncReadyCallback callback,
                                                     gpointer user_data);
extern
gboolean g_app_info_launch_uris_finish (GAppInfo *appinfo,
                                                     GAsyncResult *result,
                                                     GError **error);

extern
gboolean g_app_info_should_show (GAppInfo *appinfo);

extern
gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo,
                                                     const char *extension,
                                                     GError **error);
extern
gboolean g_app_info_add_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);
extern
gboolean g_app_info_remove_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
extern
const char **g_app_info_get_supported_types (GAppInfo *appinfo);

extern
gboolean g_app_info_can_delete (GAppInfo *appinfo);
extern
gboolean g_app_info_delete (GAppInfo *appinfo);

extern
gboolean g_app_info_set_as_last_used_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);

extern
GList * g_app_info_get_all (void);
extern
GList * g_app_info_get_all_for_type (const char *content_type);
extern
GList * g_app_info_get_recommended_for_type (const gchar *content_type);
extern
GList * g_app_info_get_fallback_for_type (const gchar *content_type);

extern
void g_app_info_reset_type_associations (const char *content_type);
extern
GAppInfo *g_app_info_get_default_for_type (const char *content_type,
                                                  gboolean must_support_uris);
extern
GAppInfo *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);

extern
gboolean g_app_info_launch_default_for_uri (const char *uri,
                                                  GAppLaunchContext *context,
                                                  GError **error);

extern
void g_app_info_launch_default_for_uri_async (const char *uri,
                                                    GAppLaunchContext *context,
                                                    GCancellable *cancellable,
                                                    GAsyncReadyCallback callback,
                                                    gpointer user_data);
extern
gboolean g_app_info_launch_default_for_uri_finish (GAsyncResult *result,
                                                    GError **error);
# 273 "/usr/include/glib-2.0/gio/gappinfo.h"
struct _GAppLaunchContext
{
  GObject parent_instance;


  GAppLaunchContextPrivate *priv;
};

struct _GAppLaunchContextClass
{
  GObjectClass parent_class;

  char * (* get_display) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  char * (* get_startup_notify_id) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  void (* launch_failed) (GAppLaunchContext *context,
                                    const char *startup_notify_id);
  void (* launched) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);
  void (* launch_started) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};

extern
GType g_app_launch_context_get_type (void) __attribute__ ((__const__));
extern
GAppLaunchContext *g_app_launch_context_new (void);

extern
void g_app_launch_context_setenv (GAppLaunchContext *context,
                                                               const char *variable,
                                                               const char *value);
extern
void g_app_launch_context_unsetenv (GAppLaunchContext *context,
                                                               const char *variable);
extern
char ** g_app_launch_context_get_environment (GAppLaunchContext *context);

extern
char * g_app_launch_context_get_display (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
extern
char * g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
extern
void g_app_launch_context_launch_failed (GAppLaunchContext *context,
                                                               const char * startup_notify_id);







typedef struct _GAppInfoMonitor GAppInfoMonitor;

extern
GType g_app_info_monitor_get_type (void);

extern
GAppInfoMonitor * g_app_info_monitor_get (void);


# 33 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gapplication.h" 1
# 29 "/usr/include/glib-2.0/gio/gapplication.h"

# 41 "/usr/include/glib-2.0/gio/gapplication.h"
typedef struct _GApplicationPrivate GApplicationPrivate;
typedef struct _GApplicationClass GApplicationClass;

struct _GApplication
{

  GObject parent_instance;

  GApplicationPrivate *priv;
};

struct _GApplicationClass
{

  GObjectClass parent_class;



  void (* startup) (GApplication *application);

  void (* activate) (GApplication *application);

  void (* open) (GApplication *application,
                                                     GFile **files,
                                                     gint n_files,
                                                     const gchar *hint);

  int (* command_line) (GApplication *application,
                                                     GApplicationCommandLine *command_line);
# 92 "/usr/include/glib-2.0/gio/gapplication.h"
  gboolean (* local_command_line) (GApplication *application,
                                                     gchar ***arguments,
                                                     int *exit_status);

  void (* before_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* after_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* add_platform_data) (GApplication *application,
                                                     GVariantBuilder *builder);
  void (* quit_mainloop) (GApplication *application);
  void (* run_mainloop) (GApplication *application);
  void (* shutdown) (GApplication *application);

  gboolean (* dbus_register) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path,
                                                     GError **error);
  void (* dbus_unregister) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path);
  gint (* handle_local_options)(GApplication *application,
                                                     GVariantDict *options);
  gboolean (* name_lost) (GApplication *application);


  gpointer padding[7];
};

extern
GType g_application_get_type (void) __attribute__ ((__const__));

extern
gboolean g_application_id_is_valid (const gchar *application_id);

extern
GApplication * g_application_new (const gchar *application_id,
                                                                         GApplicationFlags flags);

extern
const gchar * g_application_get_application_id (GApplication *application);
extern
void g_application_set_application_id (GApplication *application,
                                                                         const gchar *application_id);

extern
GDBusConnection * g_application_get_dbus_connection (GApplication *application);
extern
const gchar * g_application_get_dbus_object_path (GApplication *application);

extern
guint g_application_get_inactivity_timeout (GApplication *application);
extern
void g_application_set_inactivity_timeout (GApplication *application,
                                                                         guint inactivity_timeout);

extern
GApplicationFlags g_application_get_flags (GApplication *application);
extern
void g_application_set_flags (GApplication *application,
                                                                         GApplicationFlags flags);

extern
const gchar * g_application_get_resource_base_path (GApplication *application);
extern
void g_application_set_resource_base_path (GApplication *application,
                                                                         const gchar *resource_path);

__attribute__((__deprecated__)) extern
void g_application_set_action_group (GApplication *application,
                                                                         GActionGroup *action_group);

extern
void g_application_add_main_option_entries (GApplication *application,
                                                                         const GOptionEntry *entries);

extern
void g_application_add_main_option (GApplication *application,
                                                                         const char *long_name,
                                                                         char short_name,
                                                                         GOptionFlags flags,
                                                                         GOptionArg arg,
                                                                         const char *description,
                                                                         const char *arg_description);
extern
void g_application_add_option_group (GApplication *application,
                                                                         GOptionGroup *group);
extern
void g_application_set_option_context_parameter_string (GApplication *application,
                                                                           const gchar *parameter_string);
extern
void g_application_set_option_context_summary (GApplication *application,
                                                                         const gchar *summary);
extern
void g_application_set_option_context_description (GApplication *application,
                                                                         const gchar *description);
extern
gboolean g_application_get_is_registered (GApplication *application);
extern
gboolean g_application_get_is_remote (GApplication *application);

extern
gboolean g_application_register (GApplication *application,
                                                                         GCancellable *cancellable,
                                                                         GError **error);

extern
void g_application_hold (GApplication *application);
extern
void g_application_release (GApplication *application);

extern
void g_application_activate (GApplication *application);

extern
void g_application_open (GApplication *application,
                                                                         GFile **files,
                                                                         gint n_files,
                                                                         const gchar *hint);

extern
int g_application_run (GApplication *application,
                                                                         int argc,
                                                                         char **argv);

extern
void g_application_quit (GApplication *application);

extern
GApplication * g_application_get_default (void);
extern
void g_application_set_default (GApplication *application);

extern
void g_application_mark_busy (GApplication *application);
extern
void g_application_unmark_busy (GApplication *application);
extern
gboolean g_application_get_is_busy (GApplication *application);

extern
void g_application_send_notification (GApplication *application,
                                                                         const gchar *id,
                                                                         GNotification *notification);
extern
void g_application_withdraw_notification (GApplication *application,
                                                                         const gchar *id);

extern
void g_application_bind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);

extern
void g_application_unbind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);


# 34 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gapplicationcommandline.h" 1
# 30 "/usr/include/glib-2.0/gio/gapplicationcommandline.h"

# 47 "/usr/include/glib-2.0/gio/gapplicationcommandline.h"
typedef struct _GApplicationCommandLinePrivate GApplicationCommandLinePrivate;
typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;

struct _GApplicationCommandLine
{

  GObject parent_instance;

  GApplicationCommandLinePrivate *priv;
};

struct _GApplicationCommandLineClass
{

  GObjectClass parent_class;

  void (* print_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  void (* printerr_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  GInputStream * (* get_stdin) (GApplicationCommandLine *cmdline);

  gpointer padding[11];
};

extern
GType g_application_command_line_get_type (void) __attribute__ ((__const__));

extern
gchar ** g_application_command_line_get_arguments (GApplicationCommandLine *cmdline,
                                                                         int *argc);

extern
GVariantDict * g_application_command_line_get_options_dict (GApplicationCommandLine *cmdline);

extern
GInputStream * g_application_command_line_get_stdin (GApplicationCommandLine *cmdline);

extern
const gchar * const * g_application_command_line_get_environ (GApplicationCommandLine *cmdline);

extern
const gchar * g_application_command_line_getenv (GApplicationCommandLine *cmdline,
                                                                         const gchar *name);

extern
const gchar * g_application_command_line_get_cwd (GApplicationCommandLine *cmdline);

extern
gboolean g_application_command_line_get_is_remote (GApplicationCommandLine *cmdline);

extern
void g_application_command_line_print (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (gnu_printf, 2, 3)));
extern
void g_application_command_line_printerr (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (gnu_printf, 2, 3)));

extern
int g_application_command_line_get_exit_status (GApplicationCommandLine *cmdline);
extern
void g_application_command_line_set_exit_status (GApplicationCommandLine *cmdline,
                                                                         int exit_status);

extern
GVariant * g_application_command_line_get_platform_data (GApplicationCommandLine *cmdline);

extern
GFile * g_application_command_line_create_file_for_arg (GApplicationCommandLine *cmdline,
                                                                         const gchar *arg);


# 35 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gasyncinitable.h" 1
# 29 "/usr/include/glib-2.0/gio/gasyncinitable.h"
# 1 "/usr/include/glib-2.0/gio/ginitable.h" 1
# 30 "/usr/include/glib-2.0/gio/ginitable.h"

# 45 "/usr/include/glib-2.0/gio/ginitable.h"
typedef struct _GInitableIface GInitableIface;
# 57 "/usr/include/glib-2.0/gio/ginitable.h"
struct _GInitableIface
{
  GTypeInterface g_iface;



  gboolean (* init) (GInitable *initable,
   GCancellable *cancellable,
   GError **error);
};


extern
GType g_initable_get_type (void) __attribute__ ((__const__));

extern
gboolean g_initable_init (GInitable *initable,
    GCancellable *cancellable,
    GError **error);

extern
gpointer g_initable_new (GType object_type,
    GCancellable *cancellable,
    GError **error,
    const gchar *first_property_name,
    ...);


# 84 "/usr/include/glib-2.0/gio/ginitable.h"
#pragma GCC diagnostic push
# 84 "/usr/include/glib-2.0/gio/ginitable.h"

# 84 "/usr/include/glib-2.0/gio/ginitable.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/glib-2.0/gio/ginitable.h"


__attribute__((__deprecated__("Use '" "g_object_new_with_properties and g_initable_init" "' instead"))) extern
gpointer g_initable_newv (GType object_type,
    guint n_parameters,
    GParameter *parameters,
    GCancellable *cancellable,
    GError **error);


# 93 "/usr/include/glib-2.0/gio/ginitable.h"
#pragma GCC diagnostic pop
# 93 "/usr/include/glib-2.0/gio/ginitable.h"


extern
GObject* g_initable_new_valist (GType object_type,
    const gchar *first_property_name,
    va_list var_args,
    GCancellable *cancellable,
    GError **error);


# 30 "/usr/include/glib-2.0/gio/gasyncinitable.h" 2


# 46 "/usr/include/glib-2.0/gio/gasyncinitable.h"
typedef struct _GAsyncInitableIface GAsyncInitableIface;
# 59 "/usr/include/glib-2.0/gio/gasyncinitable.h"
struct _GAsyncInitableIface
{
  GTypeInterface g_iface;



  void (* init_async) (GAsyncInitable *initable,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gboolean (* init_finish) (GAsyncInitable *initable,
       GAsyncResult *res,
       GError **error);
};

extern
GType g_async_initable_get_type (void) __attribute__ ((__const__));


extern
void g_async_initable_init_async (GAsyncInitable *initable,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
gboolean g_async_initable_init_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);

extern
void g_async_initable_new_async (GType object_type,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data,
         const gchar *first_property_name,
         ...);


# 99 "/usr/include/glib-2.0/gio/gasyncinitable.h"
#pragma GCC diagnostic push
# 99 "/usr/include/glib-2.0/gio/gasyncinitable.h"

# 99 "/usr/include/glib-2.0/gio/gasyncinitable.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/glib-2.0/gio/gasyncinitable.h"


__attribute__((__deprecated__("Use '" "g_object_new_with_properties and g_async_initable_init_async" "' instead"))) extern
void g_async_initable_newv_async (GType object_type,
         guint n_parameters,
         GParameter *parameters,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);


# 110 "/usr/include/glib-2.0/gio/gasyncinitable.h"
#pragma GCC diagnostic pop
# 110 "/usr/include/glib-2.0/gio/gasyncinitable.h"


extern
void g_async_initable_new_valist_async (GType object_type,
         const gchar *first_property_name,
         va_list var_args,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
GObject *g_async_initable_new_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);




# 36 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gasyncresult.h" 1
# 30 "/usr/include/glib-2.0/gio/gasyncresult.h"

# 43 "/usr/include/glib-2.0/gio/gasyncresult.h"
typedef struct _GAsyncResultIface GAsyncResultIface;
# 55 "/usr/include/glib-2.0/gio/gasyncresult.h"
struct _GAsyncResultIface
{
  GTypeInterface g_iface;



  gpointer (* get_user_data) (GAsyncResult *res);
  GObject * (* get_source_object) (GAsyncResult *res);

  gboolean (* is_tagged) (GAsyncResult *res,
       gpointer source_tag);
};

extern
GType g_async_result_get_type (void) __attribute__ ((__const__));

extern
gpointer g_async_result_get_user_data (GAsyncResult *res);
extern
GObject *g_async_result_get_source_object (GAsyncResult *res);

extern
gboolean g_async_result_legacy_propagate_error (GAsyncResult *res,
      GError **error);
extern
gboolean g_async_result_is_tagged (GAsyncResult *res,
      gpointer source_tag);


# 37 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gbufferedinputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gfilterinputstream.h"
# 1 "/usr/include/glib-2.0/gio/ginputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/ginputstream.h"

# 44 "/usr/include/glib-2.0/gio/ginputstream.h"
typedef struct _GInputStreamClass GInputStreamClass;
typedef struct _GInputStreamPrivate GInputStreamPrivate;

struct _GInputStream
{
  GObject parent_instance;


  GInputStreamPrivate *priv;
};

struct _GInputStreamClass
{
  GObjectClass parent_class;



  gssize (* read_fn) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gssize (* skip) (GInputStream *stream,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gboolean (* close_fn) (GInputStream *stream,
                             GCancellable *cancellable,
                             GError **error);


  void (* read_async) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* read_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* skip_async) (GInputStream *stream,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* skip_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* close_async) (GInputStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_input_stream_get_type (void) __attribute__ ((__const__));

extern
gssize g_input_stream_read (GInputStream *stream,
           void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
gboolean g_input_stream_read_all (GInputStream *stream,
           void *buffer,
           gsize count,
           gsize *bytes_read,
           GCancellable *cancellable,
           GError **error);
extern
GBytes *g_input_stream_read_bytes (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
gssize g_input_stream_skip (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
extern
gboolean g_input_stream_close (GInputStream *stream,
           GCancellable *cancellable,
           GError **error);
extern
void g_input_stream_read_async (GInputStream *stream,
           void *buffer,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gssize g_input_stream_read_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);

extern
void g_input_stream_read_all_async (GInputStream *stream,
                                           void *buffer,
                                           gsize count,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_input_stream_read_all_finish (GInputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_read,
                                           GError **error);

extern
void g_input_stream_read_bytes_async (GInputStream *stream,
        gsize count,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GBytes *g_input_stream_read_bytes_finish (GInputStream *stream,
        GAsyncResult *result,
        GError **error);
extern
void g_input_stream_skip_async (GInputStream *stream,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gssize g_input_stream_skip_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
extern
void g_input_stream_close_async (GInputStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_input_stream_close_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);



extern
gboolean g_input_stream_is_closed (GInputStream *stream);
extern
gboolean g_input_stream_has_pending (GInputStream *stream);
extern
gboolean g_input_stream_set_pending (GInputStream *stream,
           GError **error);
extern
void g_input_stream_clear_pending (GInputStream *stream);


# 29 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 2


# 44 "/usr/include/glib-2.0/gio/gfilterinputstream.h"
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;

struct _GFilterInputStream
{
  GInputStream parent_instance;


  GInputStream *base_stream;
};

struct _GFilterInputStreamClass
{
  GInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


extern
GType g_filter_input_stream_get_type (void) __attribute__ ((__const__));
extern
GInputStream * g_filter_input_stream_get_base_stream (GFilterInputStream *stream);
extern
gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);
extern
void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream,
                                                            gboolean close_base);


# 29 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 2


# 44 "/usr/include/glib-2.0/gio/gbufferedinputstream.h"
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;

struct _GBufferedInputStream
{
  GFilterInputStream parent_instance;


  GBufferedInputStreamPrivate *priv;
};

struct _GBufferedInputStreamClass
{
  GFilterInputStreamClass parent_class;

  gssize (* fill) (GBufferedInputStream *stream,
       gssize count,
       GCancellable *cancellable,
       GError **error);


  void (* fill_async) (GBufferedInputStream *stream,
       gssize count,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gssize (* fill_finish) (GBufferedInputStream *stream,
       GAsyncResult *result,
       GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


extern
GType g_buffered_input_stream_get_type (void) __attribute__ ((__const__));
extern
GInputStream* g_buffered_input_stream_new (GInputStream *base_stream);
extern
GInputStream* g_buffered_input_stream_new_sized (GInputStream *base_stream,
             gsize size);

extern
gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);
extern
void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream,
             gsize size);
extern
gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);
extern
gsize g_buffered_input_stream_peek (GBufferedInputStream *stream,
             void *buffer,
             gsize offset,
             gsize count);
extern
const void* g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream,
             gsize *count);

extern
gssize g_buffered_input_stream_fill (GBufferedInputStream *stream,
             gssize count,
             GCancellable *cancellable,
             GError **error);
extern
void g_buffered_input_stream_fill_async (GBufferedInputStream *stream,
             gssize count,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
extern
gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream,
             GAsyncResult *result,
             GError **error);

extern
int g_buffered_input_stream_read_byte (GBufferedInputStream *stream,
             GCancellable *cancellable,
             GError **error);


# 38 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gfilteroutputstream.h"
# 1 "/usr/include/glib-2.0/gio/goutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/goutputstream.h"

# 48 "/usr/include/glib-2.0/gio/goutputstream.h"
typedef struct _GOutputStreamClass GOutputStreamClass;
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;

struct _GOutputStream
{
  GObject parent_instance;


  GOutputStreamPrivate *priv;
};


struct _GOutputStreamClass
{
  GObjectClass parent_class;



  gssize (* write_fn) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 GCancellable *cancellable,
                                 GError **error);
  gssize (* splice) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* flush) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* close_fn) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);



  void (* write_async) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* write_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* splice_async) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* splice_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* flush_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* flush_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* close_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* close_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);

  gboolean (* writev_fn) (GOutputStream *stream,
                                 const GOutputVector *vectors,
                                 gsize n_vectors,
                                 gsize *bytes_written,
                                 GCancellable *cancellable,
                                 GError **error);

  void (* writev_async) (GOutputStream *stream,
                                 const GOutputVector *vectors,
                                 gsize n_vectors,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);

  gboolean (* writev_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 gsize *bytes_written,
                                 GError **error);



  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
};

extern
GType g_output_stream_get_type (void) __attribute__ ((__const__));

extern
gssize g_output_stream_write (GOutputStream *stream,
     const void *buffer,
     gsize count,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_write_all (GOutputStream *stream,
     const void *buffer,
     gsize count,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);

extern
gboolean g_output_stream_writev (GOutputStream *stream,
     const GOutputVector *vectors,
     gsize n_vectors,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_writev_all (GOutputStream *stream,
     GOutputVector *vectors,
     gsize n_vectors,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);

extern
gboolean g_output_stream_printf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        ...) __attribute__((__format__ (gnu_printf, 5, 6)));
extern
gboolean g_output_stream_vprintf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        va_list args) __attribute__((__format__ (gnu_printf, 5, 0)));
extern
gssize g_output_stream_write_bytes (GOutputStream *stream,
     GBytes *bytes,
     GCancellable *cancellable,
     GError **error);
extern
gssize g_output_stream_splice (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_flush (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
extern
gboolean g_output_stream_close (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
extern
void g_output_stream_write_async (GOutputStream *stream,
     const void *buffer,
     gsize count,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gssize g_output_stream_write_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);

extern
void g_output_stream_write_all_async (GOutputStream *stream,
                                          const void *buffer,
                                          gsize count,
                                          int io_priority,
                                          GCancellable *cancellable,
                                          GAsyncReadyCallback callback,
                                          gpointer user_data);

extern
gboolean g_output_stream_write_all_finish (GOutputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_written,
                                           GError **error);

extern
void g_output_stream_writev_async (GOutputStream *stream,
     const GOutputVector *vectors,
     gsize n_vectors,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gboolean g_output_stream_writev_finish (GOutputStream *stream,
     GAsyncResult *result,
     gsize *bytes_written,
     GError **error);

extern
void g_output_stream_writev_all_async (GOutputStream *stream,
                                           GOutputVector *vectors,
                                           gsize n_vectors,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);

extern
gboolean g_output_stream_writev_all_finish (GOutputStream *stream,
                                            GAsyncResult *result,
                                            gsize *bytes_written,
                                            GError **error);

extern
void g_output_stream_write_bytes_async (GOutputStream *stream,
          GBytes *bytes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gssize g_output_stream_write_bytes_finish (GOutputStream *stream,
          GAsyncResult *result,
          GError **error);
extern
void g_output_stream_splice_async (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gssize g_output_stream_splice_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
extern
void g_output_stream_flush_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gboolean g_output_stream_flush_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
extern
void g_output_stream_close_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
extern
gboolean g_output_stream_close_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);

extern
gboolean g_output_stream_is_closed (GOutputStream *stream);
extern
gboolean g_output_stream_is_closing (GOutputStream *stream);
extern
gboolean g_output_stream_has_pending (GOutputStream *stream);
extern
gboolean g_output_stream_set_pending (GOutputStream *stream,
     GError **error);
extern
void g_output_stream_clear_pending (GOutputStream *stream);



# 29 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 2


# 44 "/usr/include/glib-2.0/gio/gfilteroutputstream.h"
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;

struct _GFilterOutputStream
{
  GOutputStream parent_instance;


  GOutputStream *base_stream;
};

struct _GFilterOutputStreamClass
{
  GOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


extern
GType g_filter_output_stream_get_type (void) __attribute__ ((__const__));
extern
GOutputStream * g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);
extern
gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);
extern
void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream,
                                                              gboolean close_base);


# 29 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h" 2


# 44 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h"
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;

struct _GBufferedOutputStream
{
  GFilterOutputStream parent_instance;


  GBufferedOutputStreamPrivate *priv;
};

struct _GBufferedOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};


extern
GType g_buffered_output_stream_get_type (void) __attribute__ ((__const__));
extern
GOutputStream* g_buffered_output_stream_new (GOutputStream *base_stream);
extern
GOutputStream* g_buffered_output_stream_new_sized (GOutputStream *base_stream,
        gsize size);
extern
gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);
extern
void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream,
        gsize size);
extern
gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);
extern
void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream,
        gboolean auto_grow);


# 39 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbytesicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gbytesicon.h"

# 41 "/usr/include/glib-2.0/gio/gbytesicon.h"
extern
GType g_bytes_icon_get_type (void) __attribute__ ((__const__));

extern
GIcon * g_bytes_icon_new (GBytes *bytes);

extern
GBytes * g_bytes_icon_get_bytes (GBytesIcon *icon);


# 40 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcancellable.h" 1
# 30 "/usr/include/glib-2.0/gio/gcancellable.h"

# 44 "/usr/include/glib-2.0/gio/gcancellable.h"
typedef struct _GCancellableClass GCancellableClass;
typedef struct _GCancellablePrivate GCancellablePrivate;

struct _GCancellable
{
  GObject parent_instance;


  GCancellablePrivate *priv;
};

struct _GCancellableClass
{
  GObjectClass parent_class;

  void (* cancelled) (GCancellable *cancellable);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_cancellable_get_type (void) __attribute__ ((__const__));

extern
GCancellable *g_cancellable_new (void);


extern
gboolean g_cancellable_is_cancelled (GCancellable *cancellable);
extern
gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable,
          GError **error);

extern
int g_cancellable_get_fd (GCancellable *cancellable);
extern
gboolean g_cancellable_make_pollfd (GCancellable *cancellable,
          GPollFD *pollfd);
extern
void g_cancellable_release_fd (GCancellable *cancellable);

extern
GSource * g_cancellable_source_new (GCancellable *cancellable);

extern
GCancellable *g_cancellable_get_current (void);
extern
void g_cancellable_push_current (GCancellable *cancellable);
extern
void g_cancellable_pop_current (GCancellable *cancellable);
extern
void g_cancellable_reset (GCancellable *cancellable);
extern
gulong g_cancellable_connect (GCancellable *cancellable,
          GCallback callback,
          gpointer data,
          GDestroyNotify data_destroy_func);
extern
void g_cancellable_disconnect (GCancellable *cancellable,
          gulong handler_id);



extern
void g_cancellable_cancel (GCancellable *cancellable);


# 41 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcharsetconverter.h" 1
# 28 "/usr/include/glib-2.0/gio/gcharsetconverter.h"
# 1 "/usr/include/glib-2.0/gio/gconverter.h" 1
# 30 "/usr/include/glib-2.0/gio/gconverter.h"

# 44 "/usr/include/glib-2.0/gio/gconverter.h"
typedef struct _GConverterIface GConverterIface;
# 58 "/usr/include/glib-2.0/gio/gconverter.h"
struct _GConverterIface
{
  GTypeInterface g_iface;



  GConverterResult (* convert) (GConverter *converter,
    const void *inbuf,
    gsize inbuf_size,
    void *outbuf,
    gsize outbuf_size,
    GConverterFlags flags,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error);
  void (* reset) (GConverter *converter);
};

extern
GType g_converter_get_type (void) __attribute__ ((__const__));

extern
GConverterResult g_converter_convert (GConverter *converter,
          const void *inbuf,
          gsize inbuf_size,
          void *outbuf,
          gsize outbuf_size,
          GConverterFlags flags,
          gsize *bytes_read,
          gsize *bytes_written,
          GError **error);
extern
void g_converter_reset (GConverter *converter);



# 29 "/usr/include/glib-2.0/gio/gcharsetconverter.h" 2


# 39 "/usr/include/glib-2.0/gio/gcharsetconverter.h"
typedef struct _GCharsetConverterClass GCharsetConverterClass;

struct _GCharsetConverterClass
{
  GObjectClass parent_class;
};

extern
GType g_charset_converter_get_type (void) __attribute__ ((__const__));

extern
GCharsetConverter *g_charset_converter_new (const gchar *to_charset,
             const gchar *from_charset,
             GError **error);
extern
void g_charset_converter_set_use_fallback (GCharsetConverter *converter,
        gboolean use_fallback);
extern
gboolean g_charset_converter_get_use_fallback (GCharsetConverter *converter);
extern
guint g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);


# 42 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcontenttype.h" 1
# 30 "/usr/include/glib-2.0/gio/gcontenttype.h"


extern
gboolean g_content_type_equals (const gchar *type1,
                                           const gchar *type2);
extern
gboolean g_content_type_is_a (const gchar *type,
                                           const gchar *supertype);
extern
gboolean g_content_type_is_mime_type (const gchar *type,
                                           const gchar *mime_type);
extern
gboolean g_content_type_is_unknown (const gchar *type);
extern
gchar * g_content_type_get_description (const gchar *type);
extern
gchar * g_content_type_get_mime_type (const gchar *type);
extern
GIcon * g_content_type_get_icon (const gchar *type);
extern
GIcon * g_content_type_get_symbolic_icon (const gchar *type);
extern
gchar * g_content_type_get_generic_icon_name (const gchar *type);

extern
gboolean g_content_type_can_be_executable (const gchar *type);

extern
gchar * g_content_type_from_mime_type (const gchar *mime_type);

extern
gchar * g_content_type_guess (const gchar *filename,
                                           const guchar *data,
                                           gsize data_size,
                                           gboolean *result_uncertain);

extern
gchar ** g_content_type_guess_for_tree (GFile *root);

extern
GList * g_content_types_get_registered (void);



extern
const gchar * const *g_content_type_get_mime_dirs (void);
extern
void g_content_type_set_mime_dirs (const gchar * const *dirs);



# 43 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gconverterinputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gconverterinputstream.h"

# 46 "/usr/include/glib-2.0/gio/gconverterinputstream.h"
typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;

struct _GConverterInputStream
{
  GFilterInputStream parent_instance;


  GConverterInputStreamPrivate *priv;
};

struct _GConverterInputStreamClass
{
  GFilterInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_converter_input_stream_get_type (void) __attribute__ ((__const__));
extern
GInputStream *g_converter_input_stream_new (GInputStream *base_stream,
                                                               GConverter *converter);
extern
GConverter *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);


# 45 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gconverteroutputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gconverteroutputstream.h"

# 46 "/usr/include/glib-2.0/gio/gconverteroutputstream.h"
typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate;

struct _GConverterOutputStream
{
  GFilterOutputStream parent_instance;


  GConverterOutputStreamPrivate *priv;
};

struct _GConverterOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_converter_output_stream_get_type (void) __attribute__ ((__const__));
extern
GOutputStream *g_converter_output_stream_new (GOutputStream *base_stream,
                                                                 GConverter *converter);
extern
GConverter *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);


# 46 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcredentials.h" 1
# 32 "/usr/include/glib-2.0/gio/gcredentials.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 255 "/usr/include/unistd.h" 3 4

# 255 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 309 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 358 "/usr/include/unistd.h" 3 4
extern int close (int __fd);




extern void closefrom (int __lowfd) __attribute__ ((__nothrow__ , __leaf__));







extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 437 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 545 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 564 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 619 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 1)));
# 722 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 778 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));
# 799 "/usr/include/unistd.h" 3 4
extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 1002 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) __attribute__ ((__warn_unused_result__));
# 1150 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1159 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1198 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1214 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")

  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  return ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && (((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __read_alias (__fd, __buf, __nbytes) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0)) : __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0))))

                           ;
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize)
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")


  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")


  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  return ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && (((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread_alias (__fd, __buf, __nbytes, __offset) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0)) : __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0))))

                                     ;
}
# 100 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlink") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlink_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlink_alias (__path, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                          ;
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 3, 4)));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) __asm__ ("" "readlinkat") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 3, 4)));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) __asm__ ("" "__readlinkat_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__nothrow__ , __leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len)

{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlinkat_alias (__fd, __path, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlinkat_chk_warn (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                                ;
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) __asm__ ("" "getcwd") __attribute__ ((__nothrow__ , __leaf__))
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) __asm__ ("" "__getcwd_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getcwd (char *__buf, size_t __size)
{
  return ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getcwd_alias (__buf, __size) : ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1)) : __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1))))

                   ;
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__getwd_warn (char *__buf) __asm__ ("" "getwd") __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) getwd (char *__buf)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 2, 3)));
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) __asm__ ("" "confstr") __attribute__ ((__nothrow__ , __leaf__))

   __attribute__ ((__access__ (__write_only__, 2, 3)));
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) __asm__ ("" "__confstr_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) confstr (int __name, char *__buf, size_t __len)
{
  return ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __confstr_alias (__name, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                          ;
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 1)));
extern int __getgroups_alias (int __size, __gid_t __list[]) __asm__ ("" "getgroups") __attribute__ ((__nothrow__ , __leaf__))
                 __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 1)));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) __asm__ ("" "__getgroups_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getgroups (int __size, __gid_t __list[])
{
  return ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) && (((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) ? __getgroups_alias (__size, __list) : ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) && !(((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) ? __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1)) : __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1))))

                    ;
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)))
   __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ttyname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ttyname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ttyname_r_alias (__fd, __buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                           ;
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getlogin_r_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __gethostname_alias (char *__buf, size_t __buflen) __asm__ ("" "gethostname") __attribute__ ((__nothrow__ , __leaf__))

  __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__gethostname_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) gethostname (char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __gethostname_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getdomainname_alias (char *__buf, size_t __buflen) __asm__ ("" "getdomainname") __attribute__ ((__nothrow__ , __leaf__))

                     __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getdomainname_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) getdomainname (char *__buf, size_t __buflen)
{
  return ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && (((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getdomainname_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}
# 1215 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 1219 "/usr/include/unistd.h" 2 3 4


# 33 "/usr/include/glib-2.0/gio/gcredentials.h" 2




# 45 "/usr/include/glib-2.0/gio/gcredentials.h"

# 45 "/usr/include/glib-2.0/gio/gcredentials.h"
typedef struct _GCredentialsClass GCredentialsClass;

extern
GType g_credentials_get_type (void) __attribute__ ((__const__));

extern
GCredentials *g_credentials_new (void);

extern
gchar *g_credentials_to_string (GCredentials *credentials);

extern
gpointer g_credentials_get_native (GCredentials *credentials,
                                                   GCredentialsType native_type);

extern
void g_credentials_set_native (GCredentials *credentials,
                                                   GCredentialsType native_type,
                                                   gpointer native);

extern
gboolean g_credentials_is_same_user (GCredentials *credentials,
                                                   GCredentials *other_credentials,
                                                   GError **error);


extern
pid_t g_credentials_get_unix_pid (GCredentials *credentials,
                                                   GError **error);
extern
uid_t g_credentials_get_unix_user (GCredentials *credentials,
                                                   GError **error);
extern
gboolean g_credentials_set_unix_user (GCredentials *credentials,
                                                   uid_t uid,
                                                   GError **error);



# 47 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdatagrambased.h" 1
# 29 "/usr/include/glib-2.0/gio/gdatagrambased.h"

# 49 "/usr/include/glib-2.0/gio/gdatagrambased.h"
typedef struct _GDatagramBasedInterface GDatagramBasedInterface;
# 69 "/usr/include/glib-2.0/gio/gdatagrambased.h"
struct _GDatagramBasedInterface
{
  GTypeInterface g_iface;


  gint (*receive_messages) (GDatagramBased *datagram_based,
                                         GInputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
  gint (*send_messages) (GDatagramBased *datagram_based,
                                         GOutputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);

  GSource *(*create_source) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         GCancellable *cancellable);
  GIOCondition (*condition_check) (GDatagramBased *datagram_based,
                                         GIOCondition condition);
  gboolean (*condition_wait) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
};

extern
GType
g_datagram_based_get_type (void);

extern
gint
g_datagram_based_receive_messages (GDatagramBased *datagram_based,
                                       GInputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);

extern
gint
g_datagram_based_send_messages (GDatagramBased *datagram_based,
                                       GOutputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);

extern
GSource *
g_datagram_based_create_source (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       GCancellable *cancellable);
extern
GIOCondition
g_datagram_based_condition_check (GDatagramBased *datagram_based,
                                       GIOCondition condition);
extern
gboolean
g_datagram_based_condition_wait (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);


# 48 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdatainputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gdatainputstream.h"

# 45 "/usr/include/glib-2.0/gio/gdatainputstream.h"
typedef struct _GDataInputStreamClass GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;

struct _GDataInputStream
{
  GBufferedInputStream parent_instance;


  GDataInputStreamPrivate *priv;
};

struct _GDataInputStreamClass
{
  GBufferedInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_data_input_stream_get_type (void) __attribute__ ((__const__));
extern
GDataInputStream * g_data_input_stream_new (GInputStream *base_stream);

extern
void g_data_input_stream_set_byte_order (GDataInputStream *stream,
                                                                 GDataStreamByteOrder order);
extern
GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);
extern
void g_data_input_stream_set_newline_type (GDataInputStream *stream,
                                                                 GDataStreamNewlineType type);
extern
GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);
extern
guchar g_data_input_stream_read_byte (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
gint16 g_data_input_stream_read_int16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
gint32 g_data_input_stream_read_int32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
gint64 g_data_input_stream_read_int64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
char * g_data_input_stream_read_line (GDataInputStream *stream,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
char * g_data_input_stream_read_line_utf8 (GDataInputStream *stream,
         gsize *length,
         GCancellable *cancellable,
         GError **error);
extern
void g_data_input_stream_read_line_async (GDataInputStream *stream,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
extern
char * g_data_input_stream_read_line_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
extern
char * g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto" "' instead"))) extern
char * g_data_input_stream_read_until (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto_async" "' instead"))) extern
void g_data_input_stream_read_until_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto_finish" "' instead"))) extern
char * g_data_input_stream_read_until_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);

extern
char * g_data_input_stream_read_upto (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
extern
void g_data_input_stream_read_upto_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
extern
char * g_data_input_stream_read_upto_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);


# 49 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdataoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gdataoutputstream.h"

# 45 "/usr/include/glib-2.0/gio/gdataoutputstream.h"
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;

struct _GDataOutputStream
{
  GFilterOutputStream parent_instance;


  GDataOutputStreamPrivate *priv;
};

struct _GDataOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


extern
GType g_data_output_stream_get_type (void) __attribute__ ((__const__));
extern
GDataOutputStream * g_data_output_stream_new (GOutputStream *base_stream);

extern
void g_data_output_stream_set_byte_order (GDataOutputStream *stream,
         GDataStreamByteOrder order);
extern
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);

extern
gboolean g_data_output_stream_put_byte (GDataOutputStream *stream,
         guchar data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream,
         gint16 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream,
         guint16 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream,
         gint32 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream,
         guint32 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream,
         gint64 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream,
         guint64 data,
         GCancellable *cancellable,
         GError **error);
extern
gboolean g_data_output_stream_put_string (GDataOutputStream *stream,
         const char *str,
         GCancellable *cancellable,
         GError **error);


# 50 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusactiongroup.h" 1
# 28 "/usr/include/glib-2.0/gio/gdbusactiongroup.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 29 "/usr/include/glib-2.0/gio/gdbusactiongroup.h" 2


# 44 "/usr/include/glib-2.0/gio/gdbusactiongroup.h"
extern
GType g_dbus_action_group_get_type (void) __attribute__ ((__const__));

extern
GDBusActionGroup * g_dbus_action_group_get (GDBusConnection *connection,
                                                                       const gchar *bus_name,
                                                                       const gchar *object_path);


# 51 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusaddress.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusaddress.h"


extern
gchar *g_dbus_address_escape_value (const gchar *string);

extern
gboolean g_dbus_is_address (const gchar *string);
extern
gboolean g_dbus_is_supported_address (const gchar *string,
                                      GError **error);

extern
void g_dbus_address_get_stream (const gchar *address,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);

extern
GIOStream *g_dbus_address_get_stream_finish (GAsyncResult *res,
                                                       gchar **out_guid,
                                                       GError **error);

extern
GIOStream *g_dbus_address_get_stream_sync (const gchar *address,
                                                       gchar **out_guid,
                                                       GCancellable *cancellable,
                                                       GError **error);

extern
gchar *g_dbus_address_get_for_bus_sync (GBusType bus_type,
                                                       GCancellable *cancellable,
                                                       GError **error);


# 52 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusauthobserver.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusauthobserver.h"






extern
GType g_dbus_auth_observer_get_type (void) __attribute__ ((__const__));
extern
GDBusAuthObserver *g_dbus_auth_observer_new (void);
extern
gboolean g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver *observer,
                                                                      GIOStream *stream,
                                                                      GCredentials *credentials);

extern
gboolean g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver *observer,
                                                         const gchar *mechanism);


# 53 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusconnection.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusconnection.h"






extern
GType g_dbus_connection_get_type (void) __attribute__ ((__const__));



extern
void g_bus_get (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
extern
GDBusConnection *g_bus_get_finish (GAsyncResult *res,
                                                GError **error);
extern
GDBusConnection *g_bus_get_sync (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GError **error);



extern
void g_dbus_connection_new (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GDBusConnection *g_dbus_connection_new_finish (GAsyncResult *res,
                                                               GError **error);
extern
GDBusConnection *g_dbus_connection_new_sync (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);

extern
void g_dbus_connection_new_for_address (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GDBusConnection *g_dbus_connection_new_for_address_finish (GAsyncResult *res,
                                                               GError **error);
extern
GDBusConnection *g_dbus_connection_new_for_address_sync (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);



extern
void g_dbus_connection_start_message_processing (GDBusConnection *connection);
extern
gboolean g_dbus_connection_is_closed (GDBusConnection *connection);
extern
GIOStream *g_dbus_connection_get_stream (GDBusConnection *connection);
extern
const gchar *g_dbus_connection_get_guid (GDBusConnection *connection);
extern
const gchar *g_dbus_connection_get_unique_name (GDBusConnection *connection);
extern
GCredentials *g_dbus_connection_get_peer_credentials (GDBusConnection *connection);

extern
guint32 g_dbus_connection_get_last_serial (GDBusConnection *connection);

extern
gboolean g_dbus_connection_get_exit_on_close (GDBusConnection *connection);
extern
void g_dbus_connection_set_exit_on_close (GDBusConnection *connection,
                                                               gboolean exit_on_close);
extern
GDBusCapabilityFlags g_dbus_connection_get_capabilities (GDBusConnection *connection);
extern
GDBusConnectionFlags g_dbus_connection_get_flags (GDBusConnection *connection);



extern
void g_dbus_connection_close (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
extern
gboolean g_dbus_connection_close_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
extern
gboolean g_dbus_connection_close_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);



extern
void g_dbus_connection_flush (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
extern
gboolean g_dbus_connection_flush_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
extern
gboolean g_dbus_connection_flush_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);



extern
gboolean g_dbus_connection_send_message (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   volatile guint32 *out_serial,
                                                                   GError **error);
extern
void g_dbus_connection_send_message_with_reply (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
extern
GDBusMessage *g_dbus_connection_send_message_with_reply_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
extern
GDBusMessage *g_dbus_connection_send_message_with_reply_sync (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GError **error);



extern
gboolean g_dbus_connection_emit_signal (GDBusConnection *connection,
                                                               const gchar *destination_bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *signal_name,
                                                               GVariant *parameters,
                                                               GError **error);
extern
void g_dbus_connection_call (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GVariant *g_dbus_connection_call_finish (GDBusConnection *connection,
                                                               GAsyncResult *res,
                                                               GError **error);
extern
GVariant *g_dbus_connection_call_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GError **error);
extern
void g_dbus_connection_call_with_unix_fd_list (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
GVariant *g_dbus_connection_call_with_unix_fd_list_finish (GDBusConnection *connection,
                                                               GUnixFDList **out_fd_list,
                                                               GAsyncResult *res,
                                                               GError **error);
extern
GVariant *g_dbus_connection_call_with_unix_fd_list_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GUnixFDList **out_fd_list,
                                                               GCancellable *cancellable,
                                                               GError **error);
# 273 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef void (*GDBusInterfaceMethodCallFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              const gchar *interface_name,
                                              const gchar *method_name,
                                              GVariant *parameters,
                                              GDBusMethodInvocation *invocation,
                                              gpointer user_data);
# 300 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef GVariant *(*GDBusInterfaceGetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GError **error,
                                                    gpointer user_data);
# 325 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef gboolean (*GDBusInterfaceSetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GVariant *value,
                                                    GError **error,
                                                    gpointer user_data);
# 384 "/usr/include/glib-2.0/gio/gdbusconnection.h"
struct _GDBusInterfaceVTable
{
  GDBusInterfaceMethodCallFunc method_call;
  GDBusInterfaceGetPropertyFunc get_property;
  GDBusInterfaceSetPropertyFunc set_property;






  gpointer padding[8];
};

extern
guint g_dbus_connection_register_object (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               GDBusInterfaceInfo *interface_info,
                                                               const GDBusInterfaceVTable *vtable,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
extern
guint g_dbus_connection_register_object_with_closures (GDBusConnection *connection,
                                                                  const gchar *object_path,
                                                                  GDBusInterfaceInfo *interface_info,
                                                                  GClosure *method_call_closure,
                                                                  GClosure *get_property_closure,
                                                                  GClosure *set_property_closure,
                                                                  GError **error);
extern
gboolean g_dbus_connection_unregister_object (GDBusConnection *connection,
                                                               guint registration_id);
# 443 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef gchar** (*GDBusSubtreeEnumerateFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              gpointer user_data);
# 479 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef GDBusInterfaceInfo ** (*GDBusSubtreeIntrospectFunc) (GDBusConnection *connection,
                                                             const gchar *sender,
                                                             const gchar *object_path,
                                                             const gchar *node,
                                                             gpointer user_data);
# 504 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef const GDBusInterfaceVTable * (*GDBusSubtreeDispatchFunc) (GDBusConnection *connection,
                                                                  const gchar *sender,
                                                                  const gchar *object_path,
                                                                  const gchar *interface_name,
                                                                  const gchar *node,
                                                                  gpointer *out_user_data,
                                                                  gpointer user_data);
# 522 "/usr/include/glib-2.0/gio/gdbusconnection.h"
struct _GDBusSubtreeVTable
{
  GDBusSubtreeEnumerateFunc enumerate;
  GDBusSubtreeIntrospectFunc introspect;
  GDBusSubtreeDispatchFunc dispatch;






  gpointer padding[8];
};

extern
guint g_dbus_connection_register_subtree (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               const GDBusSubtreeVTable *vtable,
                                                               GDBusSubtreeFlags flags,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
extern
gboolean g_dbus_connection_unregister_subtree (GDBusConnection *connection,
                                                               guint registration_id);
# 565 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef void (*GDBusSignalCallback) (GDBusConnection *connection,
                                     const gchar *sender_name,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     const gchar *signal_name,
                                     GVariant *parameters,
                                     gpointer user_data);

extern
guint g_dbus_connection_signal_subscribe (GDBusConnection *connection,
                                                               const gchar *sender,
                                                               const gchar *interface_name,
                                                               const gchar *member,
                                                               const gchar *object_path,
                                                               const gchar *arg0,
                                                               GDBusSignalFlags flags,
                                                               GDBusSignalCallback callback,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func);
extern
void g_dbus_connection_signal_unsubscribe (GDBusConnection *connection,
                                                               guint subscription_id);
# 664 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef GDBusMessage *(*GDBusMessageFilterFunction) (GDBusConnection *connection,
                                                     GDBusMessage *message,
                                                     gboolean incoming,
                                                     gpointer user_data);

extern
guint g_dbus_connection_add_filter (GDBusConnection *connection,
                                    GDBusMessageFilterFunction filter_function,
                                    gpointer user_data,
                                    GDestroyNotify user_data_free_func);

extern
void g_dbus_connection_remove_filter (GDBusConnection *connection,
                                       guint filter_id);





# 54 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbuserror.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbuserror.h"

# 48 "/usr/include/glib-2.0/gio/gdbuserror.h"
extern
GQuark g_dbus_error_quark (void);


extern
gboolean g_dbus_error_is_remote_error (const GError *error);
extern
gchar *g_dbus_error_get_remote_error (const GError *error);
extern
gboolean g_dbus_error_strip_remote_error (GError *error);
# 68 "/usr/include/glib-2.0/gio/gdbuserror.h"
struct _GDBusErrorEntry
{
  gint error_code;
  const gchar *dbus_error_name;
};

extern
gboolean g_dbus_error_register_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
extern
gboolean g_dbus_error_unregister_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
extern
void g_dbus_error_register_error_domain (const gchar *error_domain_quark_name,
                                             volatile gsize *quark_volatile,
                                             const GDBusErrorEntry *entries,
                                             guint num_entries);


extern
GError *g_dbus_error_new_for_dbus_error (const gchar *dbus_error_name,
                                             const gchar *dbus_error_message);
extern
void g_dbus_error_set_dbus_error (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             ...) __attribute__((__format__ (gnu_printf, 4, 5)));
extern
void g_dbus_error_set_dbus_error_valist (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             va_list var_args) __attribute__((__format__ (gnu_printf, 4, 0)));
extern
gchar *g_dbus_error_encode_gerror (const GError *error);


# 55 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusinterface.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusinterface.h"

# 41 "/usr/include/glib-2.0/gio/gdbusinterface.h"
typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
# 55 "/usr/include/glib-2.0/gio/gdbusinterface.h"
struct _GDBusInterfaceIface
{
  GTypeInterface parent_iface;


  GDBusInterfaceInfo *(*get_info) (GDBusInterface *interface_);
  GDBusObject *(*get_object) (GDBusInterface *interface_);
  void (*set_object) (GDBusInterface *interface_,
                                       GDBusObject *object);
  GDBusObject *(*dup_object) (GDBusInterface *interface_);
};

extern
GType g_dbus_interface_get_type (void) __attribute__ ((__const__));
extern
GDBusInterfaceInfo *g_dbus_interface_get_info (GDBusInterface *interface_);
extern
GDBusObject *g_dbus_interface_get_object (GDBusInterface *interface_);
extern
void g_dbus_interface_set_object (GDBusInterface *interface_,
                                                         GDBusObject *object);
extern
GDBusObject *g_dbus_interface_dup_object (GDBusInterface *interface_);


# 56 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h"

# 35 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h"
typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;
# 46 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h"
struct _GDBusInterfaceSkeleton
{

  GObject parent_instance;
  GDBusInterfaceSkeletonPrivate *priv;
};
# 66 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h"
struct _GDBusInterfaceSkeletonClass
{
  GObjectClass parent_class;


  GDBusInterfaceInfo *(*get_info) (GDBusInterfaceSkeleton *interface_);
  GDBusInterfaceVTable *(*get_vtable) (GDBusInterfaceSkeleton *interface_);
  GVariant *(*get_properties) (GDBusInterfaceSkeleton *interface_);
  void (*flush) (GDBusInterfaceSkeleton *interface_);


  gpointer vfunc_padding[8];



  gboolean (*g_authorize_method) (GDBusInterfaceSkeleton *interface_,
                                  GDBusMethodInvocation *invocation);


  gpointer signal_padding[8];
};

extern
GType g_dbus_interface_skeleton_get_type (void) __attribute__ ((__const__));
extern
GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags (GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_interface_skeleton_set_flags (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusInterfaceSkeletonFlags flags);
extern
GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info (GDBusInterfaceSkeleton *interface_);
extern
GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable (GDBusInterfaceSkeleton *interface_);
extern
GVariant *g_dbus_interface_skeleton_get_properties (GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_interface_skeleton_flush (GDBusInterfaceSkeleton *interface_);

extern
gboolean g_dbus_interface_skeleton_export (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection,
                                                                        const gchar *object_path,
                                                                        GError **error);
extern
void g_dbus_interface_skeleton_unexport (GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);

extern
GDBusConnection *g_dbus_interface_skeleton_get_connection (GDBusInterfaceSkeleton *interface_);
extern
GList *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton *interface_);
extern
gboolean g_dbus_interface_skeleton_has_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);
extern
const gchar *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton *interface_);


# 57 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusintrospection.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusintrospection.h"

# 43 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusAnnotationInfo
{

  gint ref_count;
  gchar *key;
  gchar *value;
  GDBusAnnotationInfo **annotations;
};
# 63 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusArgInfo
{

  gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusAnnotationInfo **annotations;
};
# 84 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusMethodInfo
{

  gint ref_count;
  gchar *name;
  GDBusArgInfo **in_args;
  GDBusArgInfo **out_args;
  GDBusAnnotationInfo **annotations;
};
# 105 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusSignalInfo
{

  gint ref_count;
  gchar *name;
  GDBusArgInfo **args;
  GDBusAnnotationInfo **annotations;
};
# 126 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusPropertyInfo
{

  gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusPropertyInfoFlags flags;
  GDBusAnnotationInfo **annotations;
};
# 149 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusInterfaceInfo
{

  gint ref_count;
  gchar *name;
  GDBusMethodInfo **methods;
  GDBusSignalInfo **signals;
  GDBusPropertyInfo **properties;
  GDBusAnnotationInfo **annotations;
};
# 172 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusNodeInfo
{

  gint ref_count;
  gchar *path;
  GDBusInterfaceInfo **interfaces;
  GDBusNodeInfo **nodes;
  GDBusAnnotationInfo **annotations;
};

extern
const gchar *g_dbus_annotation_info_lookup (GDBusAnnotationInfo **annotations,
                                                            const gchar *name);
extern
GDBusMethodInfo *g_dbus_interface_info_lookup_method (GDBusInterfaceInfo *info,
                                                            const gchar *name);
extern
GDBusSignalInfo *g_dbus_interface_info_lookup_signal (GDBusInterfaceInfo *info,
                                                            const gchar *name);
extern
GDBusPropertyInfo *g_dbus_interface_info_lookup_property (GDBusInterfaceInfo *info,
                                                            const gchar *name);
extern
void g_dbus_interface_info_cache_build (GDBusInterfaceInfo *info);
extern
void g_dbus_interface_info_cache_release (GDBusInterfaceInfo *info);

extern
void g_dbus_interface_info_generate_xml (GDBusInterfaceInfo *info,
                                                            guint indent,
                                                            GString *string_builder);

extern
GDBusNodeInfo *g_dbus_node_info_new_for_xml (const gchar *xml_data,
                                                            GError **error);
extern
GDBusInterfaceInfo *g_dbus_node_info_lookup_interface (GDBusNodeInfo *info,
                                                            const gchar *name);
extern
void g_dbus_node_info_generate_xml (GDBusNodeInfo *info,
                                                            guint indent,
                                                            GString *string_builder);

extern
GDBusNodeInfo *g_dbus_node_info_ref (GDBusNodeInfo *info);
extern
GDBusInterfaceInfo *g_dbus_interface_info_ref (GDBusInterfaceInfo *info);
extern
GDBusMethodInfo *g_dbus_method_info_ref (GDBusMethodInfo *info);
extern
GDBusSignalInfo *g_dbus_signal_info_ref (GDBusSignalInfo *info);
extern
GDBusPropertyInfo *g_dbus_property_info_ref (GDBusPropertyInfo *info);
extern
GDBusArgInfo *g_dbus_arg_info_ref (GDBusArgInfo *info);
extern
GDBusAnnotationInfo *g_dbus_annotation_info_ref (GDBusAnnotationInfo *info);

extern
void g_dbus_node_info_unref (GDBusNodeInfo *info);
extern
void g_dbus_interface_info_unref (GDBusInterfaceInfo *info);
extern
void g_dbus_method_info_unref (GDBusMethodInfo *info);
extern
void g_dbus_signal_info_unref (GDBusSignalInfo *info);
extern
void g_dbus_property_info_unref (GDBusPropertyInfo *info);
extern
void g_dbus_arg_info_unref (GDBusArgInfo *info);
extern
void g_dbus_annotation_info_unref (GDBusAnnotationInfo *info);
# 308 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
extern
GType g_dbus_node_info_get_type (void) __attribute__ ((__const__));
extern
GType g_dbus_interface_info_get_type (void) __attribute__ ((__const__));
extern
GType g_dbus_method_info_get_type (void) __attribute__ ((__const__));
extern
GType g_dbus_signal_info_get_type (void) __attribute__ ((__const__));
extern
GType g_dbus_property_info_get_type (void) __attribute__ ((__const__));
extern
GType g_dbus_arg_info_get_type (void) __attribute__ ((__const__));
extern
GType g_dbus_annotation_info_get_type (void) __attribute__ ((__const__));


# 58 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusmenumodel.h" 1
# 25 "/usr/include/glib-2.0/gio/gdbusmenumodel.h"








typedef struct _GDBusMenuModel GDBusMenuModel;

extern
GType g_dbus_menu_model_get_type (void) __attribute__ ((__const__));

extern
GDBusMenuModel * g_dbus_menu_model_get (GDBusConnection *connection,
                                                        const gchar *bus_name,
                                                        const gchar *object_path);


# 59 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusmessage.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusmessage.h"






extern
GType g_dbus_message_get_type (void) __attribute__ ((__const__));
extern
GDBusMessage *g_dbus_message_new (void);
extern
GDBusMessage *g_dbus_message_new_signal (const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *signal);
extern
GDBusMessage *g_dbus_message_new_method_call (const gchar *name,
                                                             const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *method);
extern
GDBusMessage *g_dbus_message_new_method_reply (GDBusMessage *method_call_message);
extern
GDBusMessage *g_dbus_message_new_method_error (GDBusMessage *method_call_message,
                                                             const gchar *error_name,
                                                             const gchar *error_message_format,
                                                             ...) __attribute__((__format__ (gnu_printf, 3, 4)));
extern
GDBusMessage *g_dbus_message_new_method_error_valist (GDBusMessage *method_call_message,
                                                                  const gchar *error_name,
                                                                  const gchar *error_message_format,
                                                                  va_list var_args);
extern
GDBusMessage *g_dbus_message_new_method_error_literal (GDBusMessage *method_call_message,
                                                                   const gchar *error_name,
                                                                   const gchar *error_message);
extern
gchar *g_dbus_message_print (GDBusMessage *message,
                                                             guint indent);
extern
gboolean g_dbus_message_get_locked (GDBusMessage *message);
extern
void g_dbus_message_lock (GDBusMessage *message);
extern
GDBusMessage *g_dbus_message_copy (GDBusMessage *message,
                                                             GError **error);
extern
GDBusMessageByteOrder g_dbus_message_get_byte_order (GDBusMessage *message);
extern
void g_dbus_message_set_byte_order (GDBusMessage *message,
                                                             GDBusMessageByteOrder byte_order);

extern
GDBusMessageType g_dbus_message_get_message_type (GDBusMessage *message);
extern
void g_dbus_message_set_message_type (GDBusMessage *message,
                                                             GDBusMessageType type);
extern
GDBusMessageFlags g_dbus_message_get_flags (GDBusMessage *message);
extern
void g_dbus_message_set_flags (GDBusMessage *message,
                                                             GDBusMessageFlags flags);
extern
guint32 g_dbus_message_get_serial (GDBusMessage *message);
extern
void g_dbus_message_set_serial (GDBusMessage *message,
                                                             guint32 serial);
extern
GVariant *g_dbus_message_get_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field);
extern
void g_dbus_message_set_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field,
                                                             GVariant *value);
extern
guchar *g_dbus_message_get_header_fields (GDBusMessage *message);
extern
GVariant *g_dbus_message_get_body (GDBusMessage *message);
extern
void g_dbus_message_set_body (GDBusMessage *message,
                                                             GVariant *body);
extern
GUnixFDList *g_dbus_message_get_unix_fd_list (GDBusMessage *message);
extern
void g_dbus_message_set_unix_fd_list (GDBusMessage *message,
                                                             GUnixFDList *fd_list);

extern
guint32 g_dbus_message_get_reply_serial (GDBusMessage *message);
extern
void g_dbus_message_set_reply_serial (GDBusMessage *message,
                                                             guint32 value);

extern
const gchar *g_dbus_message_get_interface (GDBusMessage *message);
extern
void g_dbus_message_set_interface (GDBusMessage *message,
                                                             const gchar *value);

extern
const gchar *g_dbus_message_get_member (GDBusMessage *message);
extern
void g_dbus_message_set_member (GDBusMessage *message,
                                                             const gchar *value);

extern
const gchar *g_dbus_message_get_path (GDBusMessage *message);
extern
void g_dbus_message_set_path (GDBusMessage *message,
                                                             const gchar *value);

extern
const gchar *g_dbus_message_get_sender (GDBusMessage *message);
extern
void g_dbus_message_set_sender (GDBusMessage *message,
                                                             const gchar *value);

extern
const gchar *g_dbus_message_get_destination (GDBusMessage *message);
extern
void g_dbus_message_set_destination (GDBusMessage *message,
                                                             const gchar *value);

extern
const gchar *g_dbus_message_get_error_name (GDBusMessage *message);
extern
void g_dbus_message_set_error_name (GDBusMessage *message,
                                                             const gchar *value);

extern
const gchar *g_dbus_message_get_signature (GDBusMessage *message);
extern
void g_dbus_message_set_signature (GDBusMessage *message,
                                                             const gchar *value);

extern
guint32 g_dbus_message_get_num_unix_fds (GDBusMessage *message);
extern
void g_dbus_message_set_num_unix_fds (GDBusMessage *message,
                                                             guint32 value);

extern
const gchar *g_dbus_message_get_arg0 (GDBusMessage *message);


extern
GDBusMessage *g_dbus_message_new_from_blob (guchar *blob,
                                                             gsize blob_len,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);

extern
gssize g_dbus_message_bytes_needed (guchar *blob,
                                                             gsize blob_len,
                                                             GError **error);

extern
guchar *g_dbus_message_to_blob (GDBusMessage *message,
                                                             gsize *out_size,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);

extern
gboolean g_dbus_message_to_gerror (GDBusMessage *message,
                                                             GError **error);


# 60 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusmethodinvocation.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusmethodinvocation.h"

# 71 "/usr/include/glib-2.0/gio/gdbusmethodinvocation.h"
extern
GType g_dbus_method_invocation_get_type (void) __attribute__ ((__const__));
extern
const gchar *g_dbus_method_invocation_get_sender (GDBusMethodInvocation *invocation);
extern
const gchar *g_dbus_method_invocation_get_object_path (GDBusMethodInvocation *invocation);
extern
const gchar *g_dbus_method_invocation_get_interface_name (GDBusMethodInvocation *invocation);
extern
const gchar *g_dbus_method_invocation_get_method_name (GDBusMethodInvocation *invocation);
extern
const GDBusMethodInfo *g_dbus_method_invocation_get_method_info (GDBusMethodInvocation *invocation);
extern
const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info (GDBusMethodInvocation *invocation);
extern
GDBusConnection *g_dbus_method_invocation_get_connection (GDBusMethodInvocation *invocation);
extern
GDBusMessage *g_dbus_method_invocation_get_message (GDBusMethodInvocation *invocation);
extern
GVariant *g_dbus_method_invocation_get_parameters (GDBusMethodInvocation *invocation);
extern
gpointer g_dbus_method_invocation_get_user_data (GDBusMethodInvocation *invocation);

extern
void g_dbus_method_invocation_return_value (GDBusMethodInvocation *invocation,
                                                                      GVariant *parameters);
extern
void g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation,
                                                                                GVariant *parameters,
                                                                                GUnixFDList *fd_list);
extern
void g_dbus_method_invocation_return_error (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      ...) __attribute__((__format__ (gnu_printf, 4, 5)));
extern
void g_dbus_method_invocation_return_error_valist (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      va_list var_args)
                                                                      __attribute__((__format__ (gnu_printf, 4, 0)));
extern
void g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *message);
extern
void g_dbus_method_invocation_return_gerror (GDBusMethodInvocation *invocation,
                                                                      const GError *error);
extern
void g_dbus_method_invocation_take_error (GDBusMethodInvocation *invocation,
                                                                      GError *error);
extern
void g_dbus_method_invocation_return_dbus_error (GDBusMethodInvocation *invocation,
                                                                      const gchar *error_name,
                                                                      const gchar *error_message);


# 61 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusnameowning.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusnameowning.h"

# 42 "/usr/include/glib-2.0/gio/gdbusnameowning.h"
typedef void (*GBusAcquiredCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);
# 56 "/usr/include/glib-2.0/gio/gdbusnameowning.h"
typedef void (*GBusNameAcquiredCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);
# 71 "/usr/include/glib-2.0/gio/gdbusnameowning.h"
typedef void (*GBusNameLostCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);

extern
guint g_bus_own_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusAcquiredCallback bus_acquired_handler,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);

extern
guint g_bus_own_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);

extern
guint g_bus_own_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *bus_acquired_closure,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);

extern
guint g_bus_own_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);

extern
void g_bus_unown_name (guint owner_id);


# 62 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusnamewatching.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusnamewatching.h"

# 43 "/usr/include/glib-2.0/gio/gdbusnamewatching.h"
typedef void (*GBusNameAppearedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          const gchar *name_owner,
                                          gpointer user_data);
# 63 "/usr/include/glib-2.0/gio/gdbusnamewatching.h"
typedef void (*GBusNameVanishedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);


extern
guint g_bus_watch_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
extern
guint g_bus_watch_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
extern
guint g_bus_watch_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
extern
guint g_bus_watch_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
extern
void g_bus_unwatch_name (guint watcher_id);


# 63 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobject.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusobject.h"







typedef struct _GDBusObjectIface GDBusObjectIface;
# 48 "/usr/include/glib-2.0/gio/gdbusobject.h"
struct _GDBusObjectIface
{
  GTypeInterface parent_iface;


  const gchar *(*get_object_path) (GDBusObject *object);
  GList *(*get_interfaces) (GDBusObject *object);
  GDBusInterface *(*get_interface) (GDBusObject *object,
                                       const gchar *interface_name);


  void (*interface_added) (GDBusObject *object,
                             GDBusInterface *interface_);
  void (*interface_removed) (GDBusObject *object,
                             GDBusInterface *interface_);

};

extern
GType g_dbus_object_get_type (void) __attribute__ ((__const__));
extern
const gchar *g_dbus_object_get_object_path (GDBusObject *object);
extern
GList *g_dbus_object_get_interfaces (GDBusObject *object);
extern
GDBusInterface *g_dbus_object_get_interface (GDBusObject *object,
                                                const gchar *interface_name);


# 64 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectmanager.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusobjectmanager.h"







typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
# 51 "/usr/include/glib-2.0/gio/gdbusobjectmanager.h"
struct _GDBusObjectManagerIface
{
  GTypeInterface parent_iface;


  const gchar *(*get_object_path) (GDBusObjectManager *manager);
  GList *(*get_objects) (GDBusObjectManager *manager);
  GDBusObject *(*get_object) (GDBusObjectManager *manager,
                                       const gchar *object_path);
  GDBusInterface *(*get_interface) (GDBusObjectManager *manager,
                                       const gchar *object_path,
                                       const gchar *interface_name);


  void (*object_added) (GDBusObjectManager *manager,
                                           GDBusObject *object);
  void (*object_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object);

  void (*interface_added) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
  void (*interface_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
};

extern
GType g_dbus_object_manager_get_type (void) __attribute__ ((__const__));
extern
const gchar *g_dbus_object_manager_get_object_path (GDBusObjectManager *manager);
extern
GList *g_dbus_object_manager_get_objects (GDBusObjectManager *manager);
extern
GDBusObject *g_dbus_object_manager_get_object (GDBusObjectManager *manager,
                                                        const gchar *object_path);
extern
GDBusInterface *g_dbus_object_manager_get_interface (GDBusObjectManager *manager,
                                                        const gchar *object_path,
                                                        const gchar *interface_name);


# 65 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h"

# 35 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h"
typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;
# 46 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h"
struct _GDBusObjectManagerClient
{

  GObject parent_instance;
  GDBusObjectManagerClientPrivate *priv;
};
# 63 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h"
struct _GDBusObjectManagerClientClass
{
  GObjectClass parent_class;


  void (*interface_proxy_signal) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 const gchar *sender_name,
                                                 const gchar *signal_name,
                                                 GVariant *parameters);

  void (*interface_proxy_properties_changed) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 GVariant *changed_properties,
                                                 const gchar* const *invalidated_properties);


  gpointer padding[8];
};

extern
GType g_dbus_object_manager_client_get_type (void) __attribute__ ((__const__));
extern
void g_dbus_object_manager_client_new (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_finish (GAsyncResult *res,
                                                                               GError **error);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_sync (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
extern
void g_dbus_object_manager_client_new_for_bus (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult *res,
                                                                               GError **error);
extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
extern
GDBusConnection *g_dbus_object_manager_client_get_connection (GDBusObjectManagerClient *manager);
extern
GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags (GDBusObjectManagerClient *manager);
extern
const gchar *g_dbus_object_manager_client_get_name (GDBusObjectManagerClient *manager);
extern
gchar *g_dbus_object_manager_client_get_name_owner (GDBusObjectManagerClient *manager);


# 66 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h"

# 35 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h"
typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass;
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;
# 46 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h"
struct _GDBusObjectManagerServer
{

  GObject parent_instance;
  GDBusObjectManagerServerPrivate *priv;
};
# 61 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h"
struct _GDBusObjectManagerServerClass
{
  GObjectClass parent_class;


  gpointer padding[8];
};

extern
GType g_dbus_object_manager_server_get_type (void) __attribute__ ((__const__));
extern
GDBusObjectManagerServer *g_dbus_object_manager_server_new (const gchar *object_path);
extern
GDBusConnection *g_dbus_object_manager_server_get_connection (GDBusObjectManagerServer *manager);
extern
void g_dbus_object_manager_server_set_connection (GDBusObjectManagerServer *manager,
                                                                            GDBusConnection *connection);
extern
void g_dbus_object_manager_server_export (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
extern
void g_dbus_object_manager_server_export_uniquely (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
extern
gboolean g_dbus_object_manager_server_is_exported (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
extern
gboolean g_dbus_object_manager_server_unexport (GDBusObjectManagerServer *manager,
                                                                            const gchar *object_path);


# 67 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h"

# 35 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h"
typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;
# 46 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h"
struct _GDBusObjectProxy
{

  GObject parent_instance;
  GDBusObjectProxyPrivate *priv;
};
# 61 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h"
struct _GDBusObjectProxyClass
{
  GObjectClass parent_class;


  gpointer padding[8];
};

extern
GType g_dbus_object_proxy_get_type (void) __attribute__ ((__const__));
extern
GDBusObjectProxy *g_dbus_object_proxy_new (GDBusConnection *connection,
                                                      const gchar *object_path);
extern
GDBusConnection *g_dbus_object_proxy_get_connection (GDBusObjectProxy *proxy);


# 68 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h" 1
# 26 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h"

# 35 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h"
typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;
# 46 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h"
struct _GDBusObjectSkeleton
{

  GObject parent_instance;
  GDBusObjectSkeletonPrivate *priv;
};
# 62 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h"
struct _GDBusObjectSkeletonClass
{
  GObjectClass parent_class;


  gboolean (*authorize_method) (GDBusObjectSkeleton *object,
                                GDBusInterfaceSkeleton *interface_,
                                GDBusMethodInvocation *invocation);


  gpointer padding[8];
};

extern
GType g_dbus_object_skeleton_get_type (void) __attribute__ ((__const__));
extern
GDBusObjectSkeleton *g_dbus_object_skeleton_new (const gchar *object_path);
extern
void g_dbus_object_skeleton_flush (GDBusObjectSkeleton *object);
extern
void g_dbus_object_skeleton_add_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_object_skeleton_remove_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
extern
void g_dbus_object_skeleton_remove_interface_by_name (GDBusObjectSkeleton *object,
                                                                       const gchar *interface_name);
extern
void g_dbus_object_skeleton_set_object_path (GDBusObjectSkeleton *object,
                                                                       const gchar *object_path);


# 69 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusproxy.h" 1
# 31 "/usr/include/glib-2.0/gio/gdbusproxy.h"

# 40 "/usr/include/glib-2.0/gio/gdbusproxy.h"
typedef struct _GDBusProxyClass GDBusProxyClass;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;
# 51 "/usr/include/glib-2.0/gio/gdbusproxy.h"
struct _GDBusProxy
{

  GObject parent_instance;
  GDBusProxyPrivate *priv;
};
# 67 "/usr/include/glib-2.0/gio/gdbusproxy.h"
struct _GDBusProxyClass
{

  GObjectClass parent_class;



  void (*g_properties_changed) (GDBusProxy *proxy,
                                GVariant *changed_properties,
                                const gchar* const *invalidated_properties);
  void (*g_signal) (GDBusProxy *proxy,
                                const gchar *sender_name,
                                const gchar *signal_name,
                                GVariant *parameters);



  gpointer padding[32];
};

extern
GType g_dbus_proxy_get_type (void) __attribute__ ((__const__));
extern
void g_dbus_proxy_new (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
GDBusProxy *g_dbus_proxy_new_finish (GAsyncResult *res,
                                                         GError **error);
extern
GDBusProxy *g_dbus_proxy_new_sync (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
void g_dbus_proxy_new_for_bus (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
GDBusProxy *g_dbus_proxy_new_for_bus_finish (GAsyncResult *res,
                                                         GError **error);
extern
GDBusProxy *g_dbus_proxy_new_for_bus_sync (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
GDBusConnection *g_dbus_proxy_get_connection (GDBusProxy *proxy);
extern
GDBusProxyFlags g_dbus_proxy_get_flags (GDBusProxy *proxy);
extern
const gchar *g_dbus_proxy_get_name (GDBusProxy *proxy);
extern
gchar *g_dbus_proxy_get_name_owner (GDBusProxy *proxy);
extern
const gchar *g_dbus_proxy_get_object_path (GDBusProxy *proxy);
extern
const gchar *g_dbus_proxy_get_interface_name (GDBusProxy *proxy);
extern
gint g_dbus_proxy_get_default_timeout (GDBusProxy *proxy);
extern
void g_dbus_proxy_set_default_timeout (GDBusProxy *proxy,
                                                         gint timeout_msec);
extern
GDBusInterfaceInfo *g_dbus_proxy_get_interface_info (GDBusProxy *proxy);
extern
void g_dbus_proxy_set_interface_info (GDBusProxy *proxy,
                                                         GDBusInterfaceInfo *info);
extern
GVariant *g_dbus_proxy_get_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name);
extern
void g_dbus_proxy_set_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name,
                                                         GVariant *value);
extern
gchar **g_dbus_proxy_get_cached_property_names (GDBusProxy *proxy);
extern
void g_dbus_proxy_call (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
extern
GVariant *g_dbus_proxy_call_finish (GDBusProxy *proxy,
                                                         GAsyncResult *res,
                                                         GError **error);
extern
GVariant *g_dbus_proxy_call_sync (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GError **error);

extern
void g_dbus_proxy_call_with_unix_fd_list (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GCancellable *cancellable,
                                                             GAsyncReadyCallback callback,
                                                             gpointer user_data);
extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy *proxy,
                                                             GUnixFDList **out_fd_list,
                                                             GAsyncResult *res,
                                                             GError **error);
extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_sync (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GUnixFDList **out_fd_list,
                                                             GCancellable *cancellable,
                                                             GError **error);


# 70 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusserver.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusserver.h"






extern
GType g_dbus_server_get_type (void) __attribute__ ((__const__));
extern
GDBusServer *g_dbus_server_new_sync (const gchar *address,
                                                    GDBusServerFlags flags,
                                                    const gchar *guid,
                                                    GDBusAuthObserver *observer,
                                                    GCancellable *cancellable,
                                                    GError **error);
extern
const gchar *g_dbus_server_get_client_address (GDBusServer *server);
extern
const gchar *g_dbus_server_get_guid (GDBusServer *server);
extern
GDBusServerFlags g_dbus_server_get_flags (GDBusServer *server);
extern
void g_dbus_server_start (GDBusServer *server);
extern
void g_dbus_server_stop (GDBusServer *server);
extern
gboolean g_dbus_server_is_active (GDBusServer *server);


# 71 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusutils.h" 1
# 30 "/usr/include/glib-2.0/gio/gdbusutils.h"


extern
gboolean g_dbus_is_guid (const gchar *string);
extern
gchar *g_dbus_generate_guid (void);

extern
gboolean g_dbus_is_name (const gchar *string);
extern
gboolean g_dbus_is_unique_name (const gchar *string);
extern
gboolean g_dbus_is_member_name (const gchar *string);
extern
gboolean g_dbus_is_interface_name (const gchar *string);
extern
gboolean g_dbus_is_error_name (const gchar *string);

extern
void g_dbus_gvariant_to_gvalue (GVariant *value,
                                GValue *out_gvalue);
extern
GVariant *g_dbus_gvalue_to_gvariant (const GValue *gvalue,
                                     const GVariantType *type);
extern
gchar *g_dbus_escape_object_path_bytestring (const guint8 *bytes);
extern
gchar *g_dbus_escape_object_path (const gchar *s);
extern
guint8 *g_dbus_unescape_object_path (const gchar *s);


# 72 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdebugcontroller.h" 1
# 30 "/usr/include/glib-2.0/gio/gdebugcontroller.h"

# 51 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
extern
GType g_debug_controller_get_type (void);
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma GCC diagnostic push
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"

# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 typedef struct _GDebugController GDebugController; typedef struct _GDebugControllerInterface GDebugControllerInterface; typedef GDebugController *GDebugController_autoptr; typedef GList *GDebugController_listautoptr; typedef GSList *GDebugController_slistautoptr; typedef GQueue *GDebugController_queueautoptr;
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma GCC diagnostic push
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"

# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugController (GDebugController *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugController (GDebugController **_ptr) { glib_autoptr_clear_GDebugController (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugController (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugController (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugController (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma GCC diagnostic pop
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 __attribute__ ((__unused__)) static inline GDebugController * g_debug_controller (gpointer ptr) { return (((GDebugController*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_debug_controller_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean g_IS_debug_controller (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_debug_controller_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GDebugControllerInterface * g_debug_controller_GET_IFACE (gpointer ptr) { return (((GDebugControllerInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_debug_controller_get_type ())))); }
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma GCC diagnostic pop
# 52 "/usr/include/glib-2.0/gio/gdebugcontroller.h"

# 66 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
struct _GDebugControllerInterface {

  GTypeInterface g_iface;
};

extern
gboolean g_debug_controller_get_debug_enabled (GDebugController *self);
extern
void g_debug_controller_set_debug_enabled (GDebugController *self,
                                                                 gboolean debug_enabled);


# 73 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h" 1
# 27 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"

# 37 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
extern
GType g_debug_controller_dbus_get_type (void);
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic push
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"

# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 typedef struct _GDebugControllerDBus GDebugControllerDBus; typedef struct _GDebugControllerDBusClass GDebugControllerDBusClass; struct _GDebugControllerDBus { GObject parent_instance; }; typedef GDebugControllerDBus *GDebugControllerDBus_autoptr; typedef GList *GDebugControllerDBus_listautoptr; typedef GSList *GDebugControllerDBus_slistautoptr; typedef GQueue *GDebugControllerDBus_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic push
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"

# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugControllerDBus (GDebugControllerDBus *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugControllerDBus (GDebugControllerDBus **_ptr) { glib_autoptr_clear_GDebugControllerDBus (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugControllerDBus (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugControllerDBus (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugControllerDBus (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic pop
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 typedef GDebugControllerDBusClass *GDebugControllerDBusClass_autoptr; typedef GList *GDebugControllerDBusClass_listautoptr; typedef GSList *GDebugControllerDBusClass_slistautoptr; typedef GQueue *GDebugControllerDBusClass_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic push
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"

# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugControllerDBusClass (GDebugControllerDBusClass *_ptr) { if (_ptr) (g_type_class_unref) ((GDebugControllerDBusClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugControllerDBusClass (GDebugControllerDBusClass **_ptr) { glib_autoptr_clear_GDebugControllerDBusClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugControllerDBusClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugControllerDBusClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugControllerDBusClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic pop
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 __attribute__ ((__unused__)) static inline GDebugControllerDBus * G_DEBUG_CONTROLLER_DBUS (gpointer ptr) { return (((GDebugControllerDBus*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_debug_controller_dbus_get_type ())))); } __attribute__ ((__unused__)) static inline GDebugControllerDBusClass * G_DEBUG_CONTROLLER_DBUS_CLASS (gpointer ptr) { return (((GDebugControllerDBusClass*) (void *) g_type_check_class_cast ((GTypeClass*) (ptr), (g_debug_controller_dbus_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean G_IS_DEBUG_CONTROLLER_DBUS (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_debug_controller_dbus_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline gboolean G_IS_DEBUG_CONTROLLER_DBUS_CLASS (gpointer ptr) { return ((__extension__ ({ GTypeClass *__class = (GTypeClass*) (ptr); GType __t = (g_debug_controller_dbus_get_type ()); gboolean __r; if (!__class) __r = (0); else if (__class->g_type == __t) __r = (!(0)); else __r = g_type_check_class_is_a (__class, __t); __r; }))); } __attribute__ ((__unused__)) static inline GDebugControllerDBusClass * G_DEBUG_CONTROLLER_DBUS_GET_CLASS (gpointer ptr) { return (((GDebugControllerDBusClass*) (((GTypeInstance*) (ptr))->g_class))); }
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma GCC diagnostic pop
# 38 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"

# 49 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
struct _GDebugControllerDBusClass
{
  GObjectClass parent_class;

  gboolean (*authorize) (GDebugControllerDBus *controller,
                          GDBusMethodInvocation *invocation);

  gpointer padding[12];
};

extern
GDebugControllerDBus *g_debug_controller_dbus_new (GDBusConnection *connection,
                                                   GCancellable *cancellable,
                                                   GError **error);

extern
void g_debug_controller_dbus_stop (GDebugControllerDBus *self);


# 74 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdrive.h" 1
# 31 "/usr/include/glib-2.0/gio/gdrive.h"

# 87 "/usr/include/glib-2.0/gio/gdrive.h"
typedef struct _GDriveIface GDriveIface;

struct _GDriveIface
{
  GTypeInterface g_iface;


  void (* changed) (GDrive *drive);
  void (* disconnected) (GDrive *drive);
  void (* eject_button) (GDrive *drive);


  char * (* get_name) (GDrive *drive);
  GIcon * (* get_icon) (GDrive *drive);
  gboolean (* has_volumes) (GDrive *drive);
  GList * (* get_volumes) (GDrive *drive);
  gboolean (* is_media_removable) (GDrive *drive);
  gboolean (* has_media) (GDrive *drive);
  gboolean (* is_media_check_automatic) (GDrive *drive);
  gboolean (* can_eject) (GDrive *drive);
  gboolean (* can_poll_for_media) (GDrive *drive);
  void (* eject) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  void (* poll_for_media) (GDrive *drive,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* poll_for_media_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  char * (* get_identifier) (GDrive *drive,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GDrive *drive);

  GDriveStartStopType (* get_start_stop_type) (GDrive *drive);

  gboolean (* can_start) (GDrive *drive);
  gboolean (* can_start_degraded) (GDrive *drive);
  void (* start) (GDrive *drive,
                                         GDriveStartFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* start_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  gboolean (* can_stop) (GDrive *drive);
  void (* stop) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* stop_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  void (* stop_button) (GDrive *drive);

  void (* eject_with_operation) (GDrive *drive,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GDrive *drive,
                                             GAsyncResult *result,
                                             GError **error);

  const gchar * (* get_sort_key) (GDrive *drive);
  GIcon * (* get_symbolic_icon) (GDrive *drive);
  gboolean (* is_removable) (GDrive *drive);

};

extern
GType g_drive_get_type (void) __attribute__ ((__const__));

extern
char * g_drive_get_name (GDrive *drive);
extern
GIcon * g_drive_get_icon (GDrive *drive);
extern
GIcon * g_drive_get_symbolic_icon (GDrive *drive);
extern
gboolean g_drive_has_volumes (GDrive *drive);
extern
GList * g_drive_get_volumes (GDrive *drive);
extern
gboolean g_drive_is_removable (GDrive *drive);
extern
gboolean g_drive_is_media_removable (GDrive *drive);
extern
gboolean g_drive_has_media (GDrive *drive);
extern
gboolean g_drive_is_media_check_automatic (GDrive *drive);
extern
gboolean g_drive_can_poll_for_media (GDrive *drive);
extern
gboolean g_drive_can_eject (GDrive *drive);
__attribute__((__deprecated__("Use '" "g_drive_eject_with_operation" "' instead"))) extern
void g_drive_eject (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);

__attribute__((__deprecated__("Use '" "g_drive_eject_with_operation_finish" "' instead"))) extern
gboolean g_drive_eject_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
extern
void g_drive_poll_for_media (GDrive *drive,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_poll_for_media_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
extern
char * g_drive_get_identifier (GDrive *drive,
                                           const char *kind);
extern
char ** g_drive_enumerate_identifiers (GDrive *drive);

extern
GDriveStartStopType g_drive_get_start_stop_type (GDrive *drive);

extern
gboolean g_drive_can_start (GDrive *drive);
extern
gboolean g_drive_can_start_degraded (GDrive *drive);
extern
void g_drive_start (GDrive *drive,
                                           GDriveStartFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_start_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);

extern
gboolean g_drive_can_stop (GDrive *drive);
extern
void g_drive_stop (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
extern
gboolean g_drive_stop_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);

extern
void g_drive_eject_with_operation (GDrive *drive,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_drive_eject_with_operation_finish (GDrive *drive,
                                               GAsyncResult *result,
                                               GError **error);

extern
const gchar *g_drive_get_sort_key (GDrive *drive);


# 75 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h" 1
# 27 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h"
# 1 "/usr/include/glib-2.0/gio/gdtlsconnection.h" 1
# 29 "/usr/include/glib-2.0/gio/gdtlsconnection.h"







typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
# 56 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
struct _GDtlsConnectionInterface
{
  GTypeInterface g_iface;


  gboolean (*accept_certificate) (GDtlsConnection *connection,
                                  GTlsCertificate *peer_cert,
                                  GTlsCertificateFlags errors);


  gboolean (*handshake) (GDtlsConnection *conn,
                                  GCancellable *cancellable,
                                  GError **error);

  void (*handshake_async) (GDtlsConnection *conn,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*handshake_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);

  gboolean (*shutdown) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  GCancellable *cancellable,
                                  GError **error);

  void (*shutdown_async) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*shutdown_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);

  void (*set_advertised_protocols) (GDtlsConnection *conn,
                                           const gchar * const *protocols);
  const gchar *(*get_negotiated_protocol) (GDtlsConnection *conn);


# 100 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic push
# 100 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

# 100 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

  gboolean (*get_binding_data) (GDtlsConnection *conn,
                                  GTlsChannelBindingType type,
                                  GByteArray *data,
                                  GError **error);

# 105 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic pop
# 105 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

};

extern
GType g_dtls_connection_get_type (void) __attribute__ ((__const__));

extern
void g_dtls_connection_set_database (GDtlsConnection *conn,
                                                                     GTlsDatabase *database);
extern
GTlsDatabase *g_dtls_connection_get_database (GDtlsConnection *conn);

extern
void g_dtls_connection_set_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *certificate);
extern
GTlsCertificate *g_dtls_connection_get_certificate (GDtlsConnection *conn);

extern
void g_dtls_connection_set_interaction (GDtlsConnection *conn,
                                                                     GTlsInteraction *interaction);
extern
GTlsInteraction *g_dtls_connection_get_interaction (GDtlsConnection *conn);

extern
GTlsCertificate *g_dtls_connection_get_peer_certificate (GDtlsConnection *conn);
extern
GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors (GDtlsConnection *conn);

extern
void g_dtls_connection_set_require_close_notify (GDtlsConnection *conn,
                                                                     gboolean require_close_notify);
extern
gboolean g_dtls_connection_get_require_close_notify (GDtlsConnection *conn);


# 140 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic push
# 140 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

# 140 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 140 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

__attribute__((__deprecated__)) extern
void g_dtls_connection_set_rehandshake_mode (GDtlsConnection *conn,
                                                                     GTlsRehandshakeMode mode);
__attribute__((__deprecated__)) extern
GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode (GDtlsConnection *conn);

# 146 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic pop
# 146 "/usr/include/glib-2.0/gio/gdtlsconnection.h"


extern
gboolean g_dtls_connection_handshake (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

extern
void g_dtls_connection_handshake_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
gboolean g_dtls_connection_handshake_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);

extern
gboolean g_dtls_connection_shutdown (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

extern
void g_dtls_connection_shutdown_async (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
gboolean g_dtls_connection_shutdown_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);

extern
gboolean g_dtls_connection_close (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

extern
void g_dtls_connection_close_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
extern
gboolean g_dtls_connection_close_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);


extern
gboolean g_dtls_connection_emit_accept_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *peer_cert,
                                                                     GTlsCertificateFlags errors);
extern
void g_dtls_connection_set_advertised_protocols (GDtlsConnection *conn,
                                                                     const gchar * const *protocols);

extern
const gchar * g_dtls_connection_get_negotiated_protocol (GDtlsConnection *conn);


# 212 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic push
# 212 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

# 212 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 212 "/usr/include/glib-2.0/gio/gdtlsconnection.h"

extern
gboolean g_dtls_connection_get_channel_binding_data (GDtlsConnection *conn,
                                                                     GTlsChannelBindingType type,
                                                                     GByteArray *data,
                                                                     GError **error);

# 218 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma GCC diagnostic pop
# 218 "/usr/include/glib-2.0/gio/gdtlsconnection.h"


extern
GTlsProtocolVersion g_dtls_connection_get_protocol_version (GDtlsConnection *conn);

extern
gchar * g_dtls_connection_get_ciphersuite_name (GDtlsConnection *conn);


# 28 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h" 2








typedef struct _GDtlsClientConnectionInterface GDtlsClientConnectionInterface;
# 46 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h"
struct _GDtlsClientConnectionInterface
{
  GTypeInterface g_iface;
};

extern
GType g_dtls_client_connection_get_type (void) __attribute__ ((__const__));

extern
GDatagramBased *g_dtls_client_connection_new (GDatagramBased *base_socket,
                                                                    GSocketConnectable *server_identity,
                                                                    GError **error);

extern
GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection *conn);
extern
void g_dtls_client_connection_set_validation_flags (GDtlsClientConnection *conn,
                                                                    GTlsCertificateFlags flags);
extern
GSocketConnectable *g_dtls_client_connection_get_server_identity (GDtlsClientConnection *conn);
extern
void g_dtls_client_connection_set_server_identity (GDtlsClientConnection *conn,
                                                                    GSocketConnectable *identity);
extern
GList * g_dtls_client_connection_get_accepted_cas (GDtlsClientConnection *conn);



# 76 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h" 1
# 29 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h"

# 44 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h"
typedef struct _GDtlsServerConnectionInterface GDtlsServerConnectionInterface;
# 54 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h"
struct _GDtlsServerConnectionInterface
{
  GTypeInterface g_iface;
};

extern
GType g_dtls_server_connection_get_type (void) __attribute__ ((__const__));

extern
GDatagramBased *g_dtls_server_connection_new (GDatagramBased *base_socket,
                                                   GTlsCertificate *certificate,
                                                   GError **error);


# 78 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gemblemedicon.h" 1
# 29 "/usr/include/glib-2.0/gio/gemblemedicon.h"
# 1 "/usr/include/glib-2.0/gio/gicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gicon.h"

# 42 "/usr/include/glib-2.0/gio/gicon.h"
typedef struct _GIconIface GIconIface;
# 61 "/usr/include/glib-2.0/gio/gicon.h"
struct _GIconIface
{
  GTypeInterface g_iface;



  guint (* hash) (GIcon *icon);
  gboolean (* equal) (GIcon *icon1,
                               GIcon *icon2);
  gboolean (* to_tokens) (GIcon *icon,
          GPtrArray *tokens,
                               gint *out_version);
  GIcon * (* from_tokens) (gchar **tokens,
                               gint num_tokens,
                               gint version,
                               GError **error);

  GVariant * (* serialize) (GIcon *icon);
};

extern
GType g_icon_get_type (void) __attribute__ ((__const__));

extern
guint g_icon_hash (gconstpointer icon);
extern
gboolean g_icon_equal (GIcon *icon1,
                                 GIcon *icon2);
extern
gchar *g_icon_to_string (GIcon *icon);
extern
GIcon *g_icon_new_for_string (const gchar *str,
                                 GError **error);

extern
GVariant * g_icon_serialize (GIcon *icon);
extern
GIcon * g_icon_deserialize (GVariant *value);


# 30 "/usr/include/glib-2.0/gio/gemblemedicon.h" 2
# 1 "/usr/include/glib-2.0/gio/gemblem.h" 1
# 29 "/usr/include/glib-2.0/gio/gemblem.h"

# 43 "/usr/include/glib-2.0/gio/gemblem.h"
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;

extern
GType g_emblem_get_type (void) __attribute__ ((__const__));

extern
GEmblem *g_emblem_new (GIcon *icon);
extern
GEmblem *g_emblem_new_with_origin (GIcon *icon,
                                         GEmblemOrigin origin);
extern
GIcon *g_emblem_get_icon (GEmblem *emblem);
extern
GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);


# 31 "/usr/include/glib-2.0/gio/gemblemedicon.h" 2


# 46 "/usr/include/glib-2.0/gio/gemblemedicon.h"
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;

struct _GEmblemedIcon
{
  GObject parent_instance;


  GEmblemedIconPrivate *priv;
};

struct _GEmblemedIconClass
{
  GObjectClass parent_class;
};

extern
GType g_emblemed_icon_get_type (void) __attribute__ ((__const__));

extern
GIcon *g_emblemed_icon_new (GIcon *icon,
                                    GEmblem *emblem);
extern
GIcon *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);
extern
GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);
extern
void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed,
                                    GEmblem *emblem);
extern
void g_emblemed_icon_clear_emblems (GEmblemedIcon *emblemed);


# 79 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfile.h" 1
# 30 "/usr/include/glib-2.0/gio/gfile.h"

# 47 "/usr/include/glib-2.0/gio/gfile.h"
typedef struct _GFileIface GFileIface;
# 162 "/usr/include/glib-2.0/gio/gfile.h"
struct _GFileIface
{
  GTypeInterface g_iface;



  GFile * (* dup) (GFile *file);
  guint (* hash) (GFile *file);
  gboolean (* equal) (GFile *file1,
                                                       GFile *file2);
  gboolean (* is_native) (GFile *file);
  gboolean (* has_uri_scheme) (GFile *file,
                                                       const char *uri_scheme);
  char * (* get_uri_scheme) (GFile *file);
  char * (* get_basename) (GFile *file);
  char * (* get_path) (GFile *file);
  char * (* get_uri) (GFile *file);
  char * (* get_parse_name) (GFile *file);
  GFile * (* get_parent) (GFile *file);
  gboolean (* prefix_matches) (GFile *prefix,
                                                       GFile *file);
  char * (* get_relative_path) (GFile *parent,
                                                       GFile *descendant);
  GFile * (* resolve_relative_path) (GFile *file,
                                                       const char *relative_path);
  GFile * (* get_child_for_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GError **error);

  GFileEnumerator * (* enumerate_children) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* enumerate_children_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileEnumerator * (* enumerate_children_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileInfo * (* query_info) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_info_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_info_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileInfo * (* query_filesystem_info) (GFile *file,
                                                       const char *attributes,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_filesystem_info_async) (GFile *file,
                                                       const char *attributes,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_filesystem_info_finish)(GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GMount * (* find_enclosing_mount) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* find_enclosing_mount_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GMount * (* find_enclosing_mount_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFile * (* set_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_display_name_async) (GFile *file,
                                                       const char *display_name,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* set_display_name_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileAttributeInfoList * (* query_settable_attributes) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_settable_attributes_async) (void);
  void (* _query_settable_attributes_finish) (void);

  GFileAttributeInfoList * (* query_writable_namespaces) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_writable_namespaces_async) (void);
  void (* _query_writable_namespaces_finish) (void);

  gboolean (* set_attribute) (GFile *file,
                                                       const char *attribute,
                                                       GFileAttributeType type,
                                                       gpointer value_p,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  gboolean (* set_attributes_from_info) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_attributes_async) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* set_attributes_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GFileInfo **info,
                                                       GError **error);

  GFileInputStream * (* read_fn) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* read_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInputStream * (* read_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* append_to) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* append_to_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* append_to_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* create) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* create_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* replace) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* replace_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  gboolean (* delete_file) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* delete_file_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* delete_file_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);

  gboolean (* trash) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* trash_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* trash_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);

  gboolean (* make_directory) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* make_directory_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* make_directory_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean (* make_symbolic_link) (GFile *file,
                                                       const char *symlink_value,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* _make_symbolic_link_async) (void);
  void (* _make_symbolic_link_finish) (void);

  gboolean (* copy) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* copy_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* copy_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  gboolean (* move) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* move_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* move_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* mount_mountable) (GFile *file,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* mount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* unmount_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* eject_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* mount_enclosing_volume) (GFile *location,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* mount_enclosing_volume_finish) (GFile *location,
                                                       GAsyncResult *result,
                                                       GError **error);

  GFileMonitor * (* monitor_dir) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileMonitor * (* monitor_file) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);

  GFileIOStream * (* open_readwrite) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* open_readwrite_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* open_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* create_readwrite) (GFile *file,
             GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_readwrite_async) (GFile *file,
             GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* create_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* replace_readwrite) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_readwrite_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* replace_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  void (* start_mountable) (GFile *file,
                                                       GDriveStartFlags flags,
                                                       GMountOperation *start_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* start_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* stop_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* stop_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean supports_thread_contexts;

  void (* unmount_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* eject_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* poll_mountable) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* poll_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean (* measure_disk_usage) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
  void (* measure_disk_usage_async) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       gint io_priority,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* measure_disk_usage_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
};

extern
GType g_file_get_type (void) __attribute__ ((__const__));

extern
GFile * g_file_new_for_path (const char *path);
extern
GFile * g_file_new_for_uri (const char *uri);
extern
GFile * g_file_new_for_commandline_arg (const char *arg);
extern
GFile * g_file_new_for_commandline_arg_and_cwd (const gchar *arg,
                                                                const gchar *cwd);
extern
GFile * g_file_new_tmp (const char *tmpl,
                                                           GFileIOStream **iostream,
                                                           GError **error);
extern
GFile * g_file_parse_name (const char *parse_name);
extern
GFile * g_file_new_build_filename (const gchar *first_element,
                                                           ...) __attribute__((__sentinel__));
extern
GFile * g_file_dup (GFile *file);
extern
guint g_file_hash (gconstpointer file);
extern
gboolean g_file_equal (GFile *file1,
          GFile *file2);
extern
char * g_file_get_basename (GFile *file);
extern
char * g_file_get_path (GFile *file);
extern
const char * g_file_peek_path (GFile *file);
extern
char * g_file_get_uri (GFile *file);
extern
char * g_file_get_parse_name (GFile *file);
extern
GFile * g_file_get_parent (GFile *file);
extern
gboolean g_file_has_parent (GFile *file,
                                                           GFile *parent);
extern
GFile * g_file_get_child (GFile *file,
          const char *name);
extern
GFile * g_file_get_child_for_display_name (GFile *file,
          const char *display_name,
          GError **error);
extern
gboolean g_file_has_prefix (GFile *file,
          GFile *prefix);
extern
char * g_file_get_relative_path (GFile *parent,
          GFile *descendant);
extern
GFile * g_file_resolve_relative_path (GFile *file,
          const char *relative_path);
extern
gboolean g_file_is_native (GFile *file);
extern
gboolean g_file_has_uri_scheme (GFile *file,
          const char *uri_scheme);
extern
char * g_file_get_uri_scheme (GFile *file);
extern
GFileInputStream * g_file_read (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_read_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileInputStream * g_file_read_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileOutputStream * g_file_append_to (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileOutputStream * g_file_create (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileOutputStream * g_file_replace (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_append_to_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileOutputStream * g_file_append_to_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
void g_file_create_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileOutputStream * g_file_create_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
void g_file_replace_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileOutputStream * g_file_replace_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileIOStream * g_file_open_readwrite (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_open_readwrite_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileIOStream * g_file_open_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileIOStream * g_file_create_readwrite (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_create_readwrite_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileIOStream * g_file_create_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileIOStream * g_file_replace_readwrite (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_replace_readwrite_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileIOStream * g_file_replace_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
gboolean g_file_query_exists (GFile *file,
          GCancellable *cancellable);
extern
GFileType g_file_query_file_type (GFile *file,
                                                           GFileQueryInfoFlags flags,
                                                           GCancellable *cancellable);
extern
GFileInfo * g_file_query_info (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_query_info_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileInfo * g_file_query_info_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFileInfo * g_file_query_filesystem_info (GFile *file,
          const char *attributes,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_query_filesystem_info_async (GFile *file,
          const char *attributes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileInfo * g_file_query_filesystem_info_finish (GFile *file,
                                                           GAsyncResult *res,
          GError **error);
extern
GMount * g_file_find_enclosing_mount (GFile *file,
                                                           GCancellable *cancellable,
                                                           GError **error);
extern
void g_file_find_enclosing_mount_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GMount * g_file_find_enclosing_mount_finish (GFile *file,
           GAsyncResult *res,
           GError **error);
extern
GFileEnumerator * g_file_enumerate_children (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_enumerate_children_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFileEnumerator * g_file_enumerate_children_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
GFile * g_file_set_display_name (GFile *file,
          const char *display_name,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_set_display_name_async (GFile *file,
          const char *display_name,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFile * g_file_set_display_name_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
gboolean g_file_delete (GFile *file,
          GCancellable *cancellable,
          GError **error);

extern
void g_file_delete_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);

extern
gboolean g_file_delete_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

extern
gboolean g_file_trash (GFile *file,
          GCancellable *cancellable,
          GError **error);

extern
void g_file_trash_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);

extern
gboolean g_file_trash_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

extern
gboolean g_file_copy (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
extern
void g_file_copy_async (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_copy_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
extern
gboolean g_file_move (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
extern
void g_file_move_async (GFile *source,
                                                    GFile *destination,
                                                    GFileCopyFlags flags,
                                                    int io_priority,
                                                    GCancellable *cancellable,
                                                    GFileProgressCallback progress_callback,
                                                    gpointer progress_callback_data,
                                                    GAsyncReadyCallback callback,
                                                    gpointer user_data);
extern
gboolean g_file_move_finish (GFile *file,
                                                    GAsyncResult *result,
                                                    GError **error);
extern
gboolean g_file_make_directory (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_make_directory_async (GFile *file,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
extern
gboolean g_file_make_directory_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);

extern
gboolean g_file_make_directory_with_parents (GFile *file,
                                             GCancellable *cancellable,
                                             GError **error);
extern
gboolean g_file_make_symbolic_link (GFile *file,
          const char *symlink_value,
          GCancellable *cancellable,
          GError **error);
extern
GFileAttributeInfoList *g_file_query_settable_attributes (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
GFileAttributeInfoList *g_file_query_writable_namespaces (GFile *file,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute (GFile *file,
          const char *attribute,
          GFileAttributeType type,
          gpointer value_p,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attributes_from_info (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_set_attributes_async (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_set_attributes_finish (GFile *file,
          GAsyncResult *result,
          GFileInfo **info,
          GError **error);
extern
gboolean g_file_set_attribute_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_byte_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_uint32 (GFile *file,
          const char *attribute,
          guint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_int32 (GFile *file,
          const char *attribute,
          gint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_uint64 (GFile *file,
          const char *attribute,
          guint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_file_set_attribute_int64 (GFile *file,
          const char *attribute,
          gint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
void g_file_mount_enclosing_volume (GFile *location,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_mount_enclosing_volume_finish (GFile *location,
          GAsyncResult *result,
          GError **error);
extern
void g_file_mount_mountable (GFile *file,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
GFile * g_file_mount_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
__attribute__((__deprecated__("Use '" "g_file_unmount_mountable_with_operation" "' instead"))) extern
void g_file_unmount_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

__attribute__((__deprecated__("Use '" "g_file_unmount_mountable_with_operation_finish" "' instead"))) extern
gboolean g_file_unmount_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
extern
void g_file_unmount_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_unmount_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
__attribute__((__deprecated__("Use '" "g_file_eject_mountable_with_operation" "' instead"))) extern
void g_file_eject_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

__attribute__((__deprecated__("Use '" "g_file_eject_mountable_with_operation_finish" "' instead"))) extern
gboolean g_file_eject_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
extern
void g_file_eject_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_eject_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

extern
char * g_file_build_attribute_list_for_copy (GFile *file,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);

extern
gboolean g_file_copy_attributes (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);


extern
GFileMonitor* g_file_monitor_directory (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileMonitor* g_file_monitor_file (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
extern
GFileMonitor* g_file_monitor (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);

extern
gboolean g_file_measure_disk_usage (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);

extern
void g_file_measure_disk_usage_async (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           gint io_priority,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

extern
gboolean g_file_measure_disk_usage_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);

extern
void g_file_start_mountable (GFile *file,
          GDriveStartFlags flags,
          GMountOperation *start_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_start_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
extern
void g_file_stop_mountable (GFile *file,
          GMountUnmountFlags flags,
                                                           GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_stop_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

extern
void g_file_poll_mountable (GFile *file,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_file_poll_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);



extern
GAppInfo *g_file_query_default_handler (GFile *file,
           GCancellable *cancellable,
           GError **error);
extern
void g_file_query_default_handler_async (GFile *file,
                                              int io_priority,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);
extern
GAppInfo *g_file_query_default_handler_finish (GFile *file,
                                               GAsyncResult *result,
                                               GError **error);

extern
gboolean g_file_load_contents (GFile *file,
           GCancellable *cancellable,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
extern
void g_file_load_contents_async (GFile *file,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_file_load_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
extern
void g_file_load_partial_contents_async (GFile *file,
           GCancellable *cancellable,
           GFileReadMoreCallback read_more_callback,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_file_load_partial_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
extern
gboolean g_file_replace_contents (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           char **new_etag,
           GCancellable *cancellable,
           GError **error);
extern
void g_file_replace_contents_async (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
void g_file_replace_contents_bytes_async (GFile *file,
           GBytes *contents,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_file_replace_contents_finish (GFile *file,
           GAsyncResult *res,
           char **new_etag,
           GError **error);

extern
gboolean g_file_supports_thread_contexts (GFile *file);

extern
GBytes *g_file_load_bytes (GFile *file,
                                              GCancellable *cancellable,
                                              gchar **etag_out,
                                              GError **error);
extern
void g_file_load_bytes_async (GFile *file,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);
extern
GBytes *g_file_load_bytes_finish (GFile *file,
                                              GAsyncResult *result,
                                              gchar **etag_out,
                                              GError **error);


# 80 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileattribute.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileattribute.h"

# 40 "/usr/include/glib-2.0/gio/gfileattribute.h"
struct _GFileAttributeInfo
{
  char *name;
  GFileAttributeType type;
  GFileAttributeInfoFlags flags;
};
# 55 "/usr/include/glib-2.0/gio/gfileattribute.h"
struct _GFileAttributeInfoList
{
  GFileAttributeInfo *infos;
  int n_infos;
};


extern
GType g_file_attribute_info_list_get_type (void);

extern
GFileAttributeInfoList * g_file_attribute_info_list_new (void);
extern
GFileAttributeInfoList * g_file_attribute_info_list_ref (GFileAttributeInfoList *list);
extern
void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);
extern
GFileAttributeInfoList * g_file_attribute_info_list_dup (GFileAttributeInfoList *list);
extern
const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list,
            const char *name);
extern
void g_file_attribute_info_list_add (GFileAttributeInfoList *list,
            const char *name,
            GFileAttributeType type,
            GFileAttributeInfoFlags flags);


# 81 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileenumerator.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileenumerator.h"

# 44 "/usr/include/glib-2.0/gio/gfileenumerator.h"
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;

struct _GFileEnumerator
{
  GObject parent_instance;


  GFileEnumeratorPrivate *priv;
};

struct _GFileEnumeratorClass
{
  GObjectClass parent_class;



  GFileInfo * (* next_file) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* close_fn) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);

  void (* next_files_async) (GFileEnumerator *enumerator,
                                     int num_files,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GList * (* next_files_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);
  void (* close_async) (GFileEnumerator *enumerator,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  gboolean (* close_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

extern
GType g_file_enumerator_get_type (void) __attribute__ ((__const__));

extern
GFileInfo *g_file_enumerator_next_file (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
extern
gboolean g_file_enumerator_close (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
extern
void g_file_enumerator_next_files_async (GFileEnumerator *enumerator,
      int num_files,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
extern
GList * g_file_enumerator_next_files_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
extern
void g_file_enumerator_close_async (GFileEnumerator *enumerator,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
extern
gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
extern
gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);
extern
gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);
extern
void g_file_enumerator_set_pending (GFileEnumerator *enumerator,
      gboolean pending);
extern
GFile * g_file_enumerator_get_container (GFileEnumerator *enumerator);
extern
GFile * g_file_enumerator_get_child (GFileEnumerator *enumerator,
                                                GFileInfo *info);

extern
gboolean g_file_enumerator_iterate (GFileEnumerator *direnum,
                                                GFileInfo **out_info,
                                                GFile **out_child,
                                                GCancellable *cancellable,
                                                GError **error);



# 82 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileicon.h"

# 44 "/usr/include/glib-2.0/gio/gfileicon.h"
typedef struct _GFileIconClass GFileIconClass;

extern
GType g_file_icon_get_type (void) __attribute__ ((__const__));

extern
GIcon * g_file_icon_new (GFile *file);

extern
GFile * g_file_icon_get_file (GFileIcon *icon);


# 83 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileinfo.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileinfo.h"

# 44 "/usr/include/glib-2.0/gio/gfileinfo.h"
typedef struct _GFileInfoClass GFileInfoClass;
# 1069 "/usr/include/glib-2.0/gio/gfileinfo.h"
extern
GType g_file_info_get_type (void) __attribute__ ((__const__));

extern
GFileInfo * g_file_info_new (void);
extern
GFileInfo * g_file_info_dup (GFileInfo *other);
extern
void g_file_info_copy_into (GFileInfo *src_info,
         GFileInfo *dest_info);
extern
gboolean g_file_info_has_attribute (GFileInfo *info,
         const char *attribute);
extern
gboolean g_file_info_has_namespace (GFileInfo *info,
         const char *name_space);
extern
char ** g_file_info_list_attributes (GFileInfo *info,
         const char *name_space);
extern
gboolean g_file_info_get_attribute_data (GFileInfo *info,
         const char *attribute,
         GFileAttributeType *type,
         gpointer *value_pp,
         GFileAttributeStatus *status);
extern
GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info,
         const char *attribute);
extern
void g_file_info_remove_attribute (GFileInfo *info,
         const char *attribute);
extern
GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info,
         const char *attribute);
extern
gboolean g_file_info_set_attribute_status (GFileInfo *info,
         const char *attribute,
         GFileAttributeStatus status);
extern
char * g_file_info_get_attribute_as_string (GFileInfo *info,
         const char *attribute);
extern
const char * g_file_info_get_attribute_string (GFileInfo *info,
         const char *attribute);
extern
const char * g_file_info_get_attribute_byte_string (GFileInfo *info,
         const char *attribute);
extern
gboolean g_file_info_get_attribute_boolean (GFileInfo *info,
         const char *attribute);
extern
guint32 g_file_info_get_attribute_uint32 (GFileInfo *info,
         const char *attribute);
extern
gint32 g_file_info_get_attribute_int32 (GFileInfo *info,
         const char *attribute);
extern
guint64 g_file_info_get_attribute_uint64 (GFileInfo *info,
         const char *attribute);
extern
gint64 g_file_info_get_attribute_int64 (GFileInfo *info,
         const char *attribute);
extern
GObject * g_file_info_get_attribute_object (GFileInfo *info,
         const char *attribute);
extern
char ** g_file_info_get_attribute_stringv (GFileInfo *info,
         const char *attribute);

extern
void g_file_info_set_attribute (GFileInfo *info,
         const char *attribute,
         GFileAttributeType type,
         gpointer value_p);
extern
void g_file_info_set_attribute_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
extern
void g_file_info_set_attribute_byte_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
extern
void g_file_info_set_attribute_boolean (GFileInfo *info,
         const char *attribute,
         gboolean attr_value);
extern
void g_file_info_set_attribute_uint32 (GFileInfo *info,
         const char *attribute,
         guint32 attr_value);
extern
void g_file_info_set_attribute_int32 (GFileInfo *info,
         const char *attribute,
         gint32 attr_value);
extern
void g_file_info_set_attribute_uint64 (GFileInfo *info,
         const char *attribute,
         guint64 attr_value);
extern
void g_file_info_set_attribute_int64 (GFileInfo *info,
         const char *attribute,
         gint64 attr_value);
extern
void g_file_info_set_attribute_object (GFileInfo *info,
         const char *attribute,
         GObject *attr_value);
extern
void g_file_info_set_attribute_stringv (GFileInfo *info,
         const char *attribute,
         char **attr_value);

extern
void g_file_info_clear_status (GFileInfo *info);


extern
GDateTime * g_file_info_get_deletion_date (GFileInfo *info);
extern
GFileType g_file_info_get_file_type (GFileInfo *info);
extern
gboolean g_file_info_get_is_hidden (GFileInfo *info);
extern
gboolean g_file_info_get_is_backup (GFileInfo *info);
extern
gboolean g_file_info_get_is_symlink (GFileInfo *info);
extern
const char * g_file_info_get_name (GFileInfo *info);
extern
const char * g_file_info_get_display_name (GFileInfo *info);
extern
const char * g_file_info_get_edit_name (GFileInfo *info);
extern
GIcon * g_file_info_get_icon (GFileInfo *info);
extern
GIcon * g_file_info_get_symbolic_icon (GFileInfo *info);
extern
const char * g_file_info_get_content_type (GFileInfo *info);
extern
goffset g_file_info_get_size (GFileInfo *info);

# 1208 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma GCC diagnostic push
# 1208 "/usr/include/glib-2.0/gio/gfileinfo.h"

# 1208 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1208 "/usr/include/glib-2.0/gio/gfileinfo.h"

__attribute__((__deprecated__("Use '" "g_file_info_get_modification_date_time" "' instead"))) extern
void g_file_info_get_modification_time (GFileInfo *info,
                                                      GTimeVal *result);

# 1212 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma GCC diagnostic pop
# 1212 "/usr/include/glib-2.0/gio/gfileinfo.h"

extern
GDateTime * g_file_info_get_modification_date_time (GFileInfo *info);
extern
GDateTime * g_file_info_get_access_date_time (GFileInfo *info);
extern
GDateTime * g_file_info_get_creation_date_time (GFileInfo *info);
extern
const char * g_file_info_get_symlink_target (GFileInfo *info);
extern
const char * g_file_info_get_etag (GFileInfo *info);
extern
gint32 g_file_info_get_sort_order (GFileInfo *info);

extern
void g_file_info_set_attribute_mask (GFileInfo *info,
            GFileAttributeMatcher *mask);
extern
void g_file_info_unset_attribute_mask (GFileInfo *info);


extern
void g_file_info_set_file_type (GFileInfo *info,
            GFileType type);
extern
void g_file_info_set_is_hidden (GFileInfo *info,
            gboolean is_hidden);
extern
void g_file_info_set_is_symlink (GFileInfo *info,
            gboolean is_symlink);
extern
void g_file_info_set_name (GFileInfo *info,
            const char *name);
extern
void g_file_info_set_display_name (GFileInfo *info,
            const char *display_name);
extern
void g_file_info_set_edit_name (GFileInfo *info,
            const char *edit_name);
extern
void g_file_info_set_icon (GFileInfo *info,
            GIcon *icon);
extern
void g_file_info_set_symbolic_icon (GFileInfo *info,
            GIcon *icon);
extern
void g_file_info_set_content_type (GFileInfo *info,
            const char *content_type);
extern
void g_file_info_set_size (GFileInfo *info,
            goffset size);

# 1263 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma GCC diagnostic push
# 1263 "/usr/include/glib-2.0/gio/gfileinfo.h"

# 1263 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1263 "/usr/include/glib-2.0/gio/gfileinfo.h"

__attribute__((__deprecated__("Use '" "g_file_info_set_modification_date_time" "' instead"))) extern
void g_file_info_set_modification_time (GFileInfo *info,
                                                      GTimeVal *mtime);

# 1267 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma GCC diagnostic pop
# 1267 "/usr/include/glib-2.0/gio/gfileinfo.h"

extern
void g_file_info_set_modification_date_time (GFileInfo *info,
                                                          GDateTime *mtime);
extern
void g_file_info_set_access_date_time (GFileInfo *info,
                                                    GDateTime *atime);
extern
void g_file_info_set_creation_date_time (GFileInfo *info,
                                                      GDateTime *creation_time);
extern
void g_file_info_set_symlink_target (GFileInfo *info,
            const char *symlink_target);
extern
void g_file_info_set_sort_order (GFileInfo *info,
            gint32 sort_order);


extern
GType g_file_attribute_matcher_get_type (void) __attribute__ ((__const__));

extern
GFileAttributeMatcher *g_file_attribute_matcher_new (const char *attributes);
extern
GFileAttributeMatcher *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);
extern
void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);
extern
GFileAttributeMatcher *g_file_attribute_matcher_subtract (GFileAttributeMatcher *matcher,
                                                                GFileAttributeMatcher *subtract);
extern
gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher,
        const char *attribute);
extern
gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher,
        const char *attribute);
extern
gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher,
             const char *ns);
extern
const char * g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);
extern
char * g_file_attribute_matcher_to_string (GFileAttributeMatcher *matcher);


# 84 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileinputstream.h"

# 47 "/usr/include/glib-2.0/gio/gfileinputstream.h"
typedef struct _GFileInputStreamClass GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;

struct _GFileInputStream
{
  GInputStream parent_instance;


  GFileInputStreamPrivate *priv;
};

struct _GFileInputStreamClass
{
  GInputStreamClass parent_class;

  goffset (* tell) (GFileInputStream *stream);
  gboolean (* can_seek) (GFileInputStream *stream);
  gboolean (* seek) (GFileInputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileInputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileInputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileInputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_file_input_stream_get_type (void) __attribute__ ((__const__));

extern
GFileInfo *g_file_input_stream_query_info (GFileInputStream *stream,
        const char *attributes,
        GCancellable *cancellable,
        GError **error);
extern
void g_file_input_stream_query_info_async (GFileInputStream *stream,
        const char *attributes,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream *stream,
        GAsyncResult *result,
        GError **error);


# 85 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileiostream.h" 1
# 28 "/usr/include/glib-2.0/gio/gfileiostream.h"
# 1 "/usr/include/glib-2.0/gio/giostream.h" 1
# 27 "/usr/include/glib-2.0/gio/giostream.h"
# 1 "/usr/include/glib-2.0/gio/gioerror.h" 1
# 31 "/usr/include/glib-2.0/gio/gioerror.h"

# 41 "/usr/include/glib-2.0/gio/gioerror.h"
extern
GQuark g_io_error_quark (void);
extern
GIOErrorEnum g_io_error_from_errno (gint err_no);







# 28 "/usr/include/glib-2.0/gio/giostream.h" 2


# 38 "/usr/include/glib-2.0/gio/giostream.h"
typedef struct _GIOStreamPrivate GIOStreamPrivate;
typedef struct _GIOStreamClass GIOStreamClass;






struct _GIOStream
{
  GObject parent_instance;


  GIOStreamPrivate *priv;
};

struct _GIOStreamClass
{
  GObjectClass parent_class;

  GInputStream * (*get_input_stream) (GIOStream *stream);
  GOutputStream * (*get_output_stream) (GIOStream *stream);

  gboolean (* close_fn) (GIOStream *stream,
                             GCancellable *cancellable,
                             GError **error);
  void (* close_async) (GIOStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GIOStream *stream,
                             GAsyncResult *result,
                             GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};

extern
GType g_io_stream_get_type (void) __attribute__ ((__const__));

extern
GInputStream * g_io_stream_get_input_stream (GIOStream *stream);
extern
GOutputStream *g_io_stream_get_output_stream (GIOStream *stream);

extern
void g_io_stream_splice_async (GIOStream *stream1,
           GIOStream *stream2,
           GIOStreamSpliceFlags flags,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);

extern
gboolean g_io_stream_splice_finish (GAsyncResult *result,
                                              GError **error);

extern
gboolean g_io_stream_close (GIOStream *stream,
           GCancellable *cancellable,
           GError **error);

extern
void g_io_stream_close_async (GIOStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
extern
gboolean g_io_stream_close_finish (GIOStream *stream,
           GAsyncResult *result,
           GError **error);

extern
gboolean g_io_stream_is_closed (GIOStream *stream);
extern
gboolean g_io_stream_has_pending (GIOStream *stream);
extern
gboolean g_io_stream_set_pending (GIOStream *stream,
           GError **error);
extern
void g_io_stream_clear_pending (GIOStream *stream);


# 29 "/usr/include/glib-2.0/gio/gfileiostream.h" 2


# 47 "/usr/include/glib-2.0/gio/gfileiostream.h"
typedef struct _GFileIOStreamClass GFileIOStreamClass;
typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;

struct _GFileIOStream
{
  GIOStream parent_instance;


  GFileIOStreamPrivate *priv;
};

struct _GFileIOStreamClass
{
  GIOStreamClass parent_class;

  goffset (* tell) (GFileIOStream *stream);
  gboolean (* can_seek) (GFileIOStream *stream);
  gboolean (* seek) (GFileIOStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileIOStream *stream);
  gboolean (* truncate_fn) (GFileIOStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileIOStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileIOStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileIOStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileIOStream *stream);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_file_io_stream_get_type (void) __attribute__ ((__const__));

extern
GFileInfo *g_file_io_stream_query_info (GFileIOStream *stream,
            const char *attributes,
            GCancellable *cancellable,
            GError **error);
extern
void g_file_io_stream_query_info_async (GFileIOStream *stream,
            const char *attributes,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
extern
GFileInfo *g_file_io_stream_query_info_finish (GFileIOStream *stream,
            GAsyncResult *result,
            GError **error);
extern
char * g_file_io_stream_get_etag (GFileIOStream *stream);


# 86 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilemonitor.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilemonitor.h"

# 39 "/usr/include/glib-2.0/gio/gfilemonitor.h"
typedef struct _GFileMonitorClass GFileMonitorClass;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;






struct _GFileMonitor
{
  GObject parent_instance;


  GFileMonitorPrivate *priv;
};

struct _GFileMonitorClass
{
  GObjectClass parent_class;


  void (* changed) (GFileMonitor *monitor,
                        GFile *file,
                        GFile *other_file,
                        GFileMonitorEvent event_type);


  gboolean (* cancel) (GFileMonitor *monitor);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_file_monitor_get_type (void) __attribute__ ((__const__));

extern
gboolean g_file_monitor_cancel (GFileMonitor *monitor);
extern
gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);
extern
void g_file_monitor_set_rate_limit (GFileMonitor *monitor,
                                        gint limit_msecs);



extern
void g_file_monitor_emit_event (GFileMonitor *monitor,
                                        GFile *child,
                                        GFile *other_file,
                                        GFileMonitorEvent event_type);


# 87 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilenamecompleter.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilenamecompleter.h"

# 44 "/usr/include/glib-2.0/gio/gfilenamecompleter.h"
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;

struct _GFilenameCompleterClass
{
  GObjectClass parent_class;



  void (* got_completion_data) (GFilenameCompleter *filename_completer);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};

extern
GType g_filename_completer_get_type (void) __attribute__ ((__const__));

extern
GFilenameCompleter *g_filename_completer_new (void);

extern
char * g_filename_completer_get_completion_suffix (GFilenameCompleter *completer,
                                                                const char *initial_text);
extern
char ** g_filename_completer_get_completions (GFilenameCompleter *completer,
                                                                const char *initial_text);
extern
void g_filename_completer_set_dirs_only (GFilenameCompleter *completer,
                                                                gboolean dirs_only);


# 88 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileoutputstream.h"

# 47 "/usr/include/glib-2.0/gio/gfileoutputstream.h"
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;

struct _GFileOutputStream
{
  GOutputStream parent_instance;


  GFileOutputStreamPrivate *priv;
};

struct _GFileOutputStreamClass
{
  GOutputStreamClass parent_class;

  goffset (* tell) (GFileOutputStream *stream);
  gboolean (* can_seek) (GFileOutputStream *stream);
  gboolean (* seek) (GFileOutputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileOutputStream *stream);
  gboolean (* truncate_fn) (GFileOutputStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileOutputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileOutputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileOutputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileOutputStream *stream);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_file_output_stream_get_type (void) __attribute__ ((__const__));


extern
GFileInfo *g_file_output_stream_query_info (GFileOutputStream *stream,
                                                   const char *attributes,
                                                   GCancellable *cancellable,
                                                   GError **error);
extern
void g_file_output_stream_query_info_async (GFileOutputStream *stream,
         const char *attributes,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
extern
GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream *stream,
         GAsyncResult *result,
         GError **error);
extern
char * g_file_output_stream_get_etag (GFileOutputStream *stream);


# 89 "/usr/include/glib-2.0/gio/gio.h" 2



# 1 "/usr/include/glib-2.0/gio/ginetaddress.h" 1
# 31 "/usr/include/glib-2.0/gio/ginetaddress.h"

# 40 "/usr/include/glib-2.0/gio/ginetaddress.h"
typedef struct _GInetAddressClass GInetAddressClass;
typedef struct _GInetAddressPrivate GInetAddressPrivate;

struct _GInetAddress
{
  GObject parent_instance;


  GInetAddressPrivate *priv;
};

struct _GInetAddressClass
{
  GObjectClass parent_class;

  gchar * (*to_string) (GInetAddress *address);
  const guint8 * (*to_bytes) (GInetAddress *address);
};

extern
GType g_inet_address_get_type (void) __attribute__ ((__const__));

extern
GInetAddress * g_inet_address_new_from_string (const gchar *string);

extern
GInetAddress * g_inet_address_new_from_bytes (const guint8 *bytes,
          GSocketFamily family);

extern
GInetAddress * g_inet_address_new_loopback (GSocketFamily family);

extern
GInetAddress * g_inet_address_new_any (GSocketFamily family);

extern
gboolean g_inet_address_equal (GInetAddress *address,
                                                           GInetAddress *other_address);

extern
gchar * g_inet_address_to_string (GInetAddress *address);

extern
const guint8 * g_inet_address_to_bytes (GInetAddress *address);

extern
gsize g_inet_address_get_native_size (GInetAddress *address);

extern
GSocketFamily g_inet_address_get_family (GInetAddress *address);

extern
gboolean g_inet_address_get_is_any (GInetAddress *address);

extern
gboolean g_inet_address_get_is_loopback (GInetAddress *address);

extern
gboolean g_inet_address_get_is_link_local (GInetAddress *address);

extern
gboolean g_inet_address_get_is_site_local (GInetAddress *address);

extern
gboolean g_inet_address_get_is_multicast (GInetAddress *address);

extern
gboolean g_inet_address_get_is_mc_global (GInetAddress *address);

extern
gboolean g_inet_address_get_is_mc_link_local (GInetAddress *address);

extern
gboolean g_inet_address_get_is_mc_node_local (GInetAddress *address);

extern
gboolean g_inet_address_get_is_mc_org_local (GInetAddress *address);

extern
gboolean g_inet_address_get_is_mc_site_local (GInetAddress *address);


# 93 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/ginetaddressmask.h" 1
# 28 "/usr/include/glib-2.0/gio/ginetaddressmask.h"

# 37 "/usr/include/glib-2.0/gio/ginetaddressmask.h"
typedef struct _GInetAddressMaskClass GInetAddressMaskClass;
typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;

struct _GInetAddressMask
{
  GObject parent_instance;


  GInetAddressMaskPrivate *priv;
};

struct _GInetAddressMaskClass
{
  GObjectClass parent_class;

};

extern
GType g_inet_address_mask_get_type (void) __attribute__ ((__const__));

extern
GInetAddressMask *g_inet_address_mask_new (GInetAddress *addr,
             guint length,
             GError **error);

extern
GInetAddressMask *g_inet_address_mask_new_from_string (const gchar *mask_string,
             GError **error);
extern
gchar *g_inet_address_mask_to_string (GInetAddressMask *mask);

extern
GSocketFamily g_inet_address_mask_get_family (GInetAddressMask *mask);
extern
GInetAddress *g_inet_address_mask_get_address (GInetAddressMask *mask);
extern
guint g_inet_address_mask_get_length (GInetAddressMask *mask);

extern
gboolean g_inet_address_mask_matches (GInetAddressMask *mask,
             GInetAddress *address);
extern
gboolean g_inet_address_mask_equal (GInetAddressMask *mask,
             GInetAddressMask *mask2);


# 94 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/ginetsocketaddress.h" 1
# 29 "/usr/include/glib-2.0/gio/ginetsocketaddress.h"
# 1 "/usr/include/glib-2.0/gio/gsocketaddress.h" 1
# 31 "/usr/include/glib-2.0/gio/gsocketaddress.h"

# 40 "/usr/include/glib-2.0/gio/gsocketaddress.h"
typedef struct _GSocketAddressClass GSocketAddressClass;

struct _GSocketAddress
{
  GObject parent_instance;
};

struct _GSocketAddressClass
{
  GObjectClass parent_class;

  GSocketFamily (*get_family) (GSocketAddress *address);

  gssize (*get_native_size) (GSocketAddress *address);

  gboolean (*to_native) (GSocketAddress *address,
                                     gpointer dest,
                                     gsize destlen,
         GError **error);
};

extern
GType g_socket_address_get_type (void) __attribute__ ((__const__));

extern
GSocketFamily g_socket_address_get_family (GSocketAddress *address);

extern
GSocketAddress * g_socket_address_new_from_native (gpointer native,
                                                        gsize len);

extern
gboolean g_socket_address_to_native (GSocketAddress *address,
                                                        gpointer dest,
                                                        gsize destlen,
       GError **error);

extern
gssize g_socket_address_get_native_size (GSocketAddress *address);


# 30 "/usr/include/glib-2.0/gio/ginetsocketaddress.h" 2


# 40 "/usr/include/glib-2.0/gio/ginetsocketaddress.h"
typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;

struct _GInetSocketAddress
{
  GSocketAddress parent_instance;


  GInetSocketAddressPrivate *priv;
};

struct _GInetSocketAddressClass
{
  GSocketAddressClass parent_class;
};

extern
GType g_inet_socket_address_get_type (void) __attribute__ ((__const__));

extern
GSocketAddress *g_inet_socket_address_new (GInetAddress *address,
                                                       guint16 port);
extern
GSocketAddress *g_inet_socket_address_new_from_string (const char *address,
                                                       guint port);

extern
GInetAddress * g_inet_socket_address_get_address (GInetSocketAddress *address);
extern
guint16 g_inet_socket_address_get_port (GInetSocketAddress *address);

extern
guint32 g_inet_socket_address_get_flowinfo (GInetSocketAddress *address);
extern
guint32 g_inet_socket_address_get_scope_id (GInetSocketAddress *address);


# 95 "/usr/include/glib-2.0/gio/gio.h" 2



# 1 "/usr/include/glib-2.0/gio/gioenumtypes.h" 1
# 9 "/usr/include/glib-2.0/gio/gioenumtypes.h"



extern GType g_app_info_create_flags_get_type (void) __attribute__ ((__const__));

extern GType g_converter_flags_get_type (void) __attribute__ ((__const__));

extern GType g_converter_result_get_type (void) __attribute__ ((__const__));

extern GType g_data_stream_byte_order_get_type (void) __attribute__ ((__const__));

extern GType g_data_stream_newline_type_get_type (void) __attribute__ ((__const__));

extern GType g_file_attribute_type_get_type (void) __attribute__ ((__const__));

extern GType g_file_attribute_info_flags_get_type (void) __attribute__ ((__const__));

extern GType g_file_attribute_status_get_type (void) __attribute__ ((__const__));

extern GType g_file_query_info_flags_get_type (void) __attribute__ ((__const__));

extern GType g_file_create_flags_get_type (void) __attribute__ ((__const__));

extern GType g_file_measure_flags_get_type (void) __attribute__ ((__const__));

extern GType g_mount_mount_flags_get_type (void) __attribute__ ((__const__));

extern GType g_mount_unmount_flags_get_type (void) __attribute__ ((__const__));

extern GType g_drive_start_flags_get_type (void) __attribute__ ((__const__));

extern GType g_drive_start_stop_type_get_type (void) __attribute__ ((__const__));

extern GType g_file_copy_flags_get_type (void) __attribute__ ((__const__));

extern GType g_file_monitor_flags_get_type (void) __attribute__ ((__const__));

extern GType g_file_type_get_type (void) __attribute__ ((__const__));

extern GType g_filesystem_preview_type_get_type (void) __attribute__ ((__const__));

extern GType g_file_monitor_event_get_type (void) __attribute__ ((__const__));

extern GType g_io_error_enum_get_type (void) __attribute__ ((__const__));

extern GType g_ask_password_flags_get_type (void) __attribute__ ((__const__));

extern GType g_password_save_get_type (void) __attribute__ ((__const__));

extern GType g_mount_operation_result_get_type (void) __attribute__ ((__const__));

extern GType g_output_stream_splice_flags_get_type (void) __attribute__ ((__const__));

extern GType g_io_stream_splice_flags_get_type (void) __attribute__ ((__const__));

extern GType g_emblem_origin_get_type (void) __attribute__ ((__const__));

extern GType g_resolver_error_get_type (void) __attribute__ ((__const__));

extern GType g_resolver_record_type_get_type (void) __attribute__ ((__const__));

extern GType g_resource_error_get_type (void) __attribute__ ((__const__));

extern GType g_resource_flags_get_type (void) __attribute__ ((__const__));

extern GType g_resource_lookup_flags_get_type (void) __attribute__ ((__const__));

extern GType g_socket_family_get_type (void) __attribute__ ((__const__));

extern GType g_socket_type_get_type (void) __attribute__ ((__const__));

extern GType g_socket_msg_flags_get_type (void) __attribute__ ((__const__));

extern GType g_socket_protocol_get_type (void) __attribute__ ((__const__));

extern GType g_zlib_compressor_format_get_type (void) __attribute__ ((__const__));

extern GType g_unix_socket_address_type_get_type (void) __attribute__ ((__const__));

extern GType g_bus_type_get_type (void) __attribute__ ((__const__));

extern GType g_bus_name_owner_flags_get_type (void) __attribute__ ((__const__));

extern GType g_bus_name_watcher_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_proxy_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_error_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_connection_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_capability_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_call_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_message_type_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_message_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_message_header_field_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_property_info_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_subtree_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_server_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_signal_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_send_message_flags_get_type (void) __attribute__ ((__const__));

extern GType g_credentials_type_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_message_byte_order_get_type (void) __attribute__ ((__const__));

extern GType g_application_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_error_get_type (void) __attribute__ ((__const__));

extern GType g_tls_certificate_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_authentication_mode_get_type (void) __attribute__ ((__const__));

extern GType g_tls_channel_binding_type_get_type (void) __attribute__ ((__const__));

extern GType g_tls_channel_binding_error_get_type (void) __attribute__ ((__const__));

extern GType g_tls_rehandshake_mode_get_type (void) __attribute__ ((__const__));

extern GType g_tls_password_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_interaction_result_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_interface_skeleton_flags_get_type (void) __attribute__ ((__const__));

extern GType g_dbus_object_manager_client_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_database_verify_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_database_lookup_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_certificate_request_flags_get_type (void) __attribute__ ((__const__));

extern GType g_tls_protocol_version_get_type (void) __attribute__ ((__const__));

extern GType g_io_module_scope_flags_get_type (void) __attribute__ ((__const__));

extern GType g_socket_client_event_get_type (void) __attribute__ ((__const__));

extern GType g_socket_listener_event_get_type (void) __attribute__ ((__const__));

extern GType g_test_dbus_flags_get_type (void) __attribute__ ((__const__));

extern GType g_subprocess_flags_get_type (void) __attribute__ ((__const__));

extern GType g_notification_priority_get_type (void) __attribute__ ((__const__));

extern GType g_network_connectivity_get_type (void) __attribute__ ((__const__));

extern GType g_pollable_return_get_type (void) __attribute__ ((__const__));

extern GType g_memory_monitor_warning_level_get_type (void) __attribute__ ((__const__));



extern GType g_resolver_name_lookup_flags_get_type (void) __attribute__ ((__const__));



extern GType g_settings_bind_flags_get_type (void) __attribute__ ((__const__));


# 99 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/giomodule.h" 1
# 29 "/usr/include/glib-2.0/gio/giomodule.h"
# 1 "/usr/include/glib-2.0/gmodule.h" 1
# 30 "/usr/include/glib-2.0/gmodule.h"

# 58 "/usr/include/glib-2.0/gmodule.h"
typedef enum
{
  G_MODULE_BIND_LAZY = 1 << 0,
  G_MODULE_BIND_LOCAL = 1 << 1,
  G_MODULE_BIND_MASK = 0x03
} GModuleFlags;

typedef struct _GModule GModule;
typedef const gchar* (*GModuleCheckInit) (GModule *module);
typedef void (*GModuleUnload) (GModule *module);


extern
GQuark g_module_error_quark (void);
# 82 "/usr/include/glib-2.0/gmodule.h"
typedef enum
{
  G_MODULE_ERROR_FAILED,
  G_MODULE_ERROR_CHECK_FAILED,
} GModuleError
;


extern
gboolean g_module_supported (void) __attribute__ ((__const__));


extern
GModule* g_module_open (const gchar *file_name,
           GModuleFlags flags);

extern
GModule *g_module_open_full (const gchar *file_name,
                                              GModuleFlags flags,
                                              GError **error);


extern
gboolean g_module_close (GModule *module);


extern
void g_module_make_resident (GModule *module);


extern
const gchar * g_module_error (void);


extern
gboolean g_module_symbol (GModule *module,
           const gchar *symbol_name,
           gpointer *symbol);


extern
const gchar * g_module_name (GModule *module);
# 136 "/usr/include/glib-2.0/gmodule.h"
extern
gchar* g_module_build_path (const gchar *directory,
           const gchar *module_name);


# 30 "/usr/include/glib-2.0/gio/giomodule.h" 2



typedef struct _GIOModuleScope GIOModuleScope;

extern
GIOModuleScope * g_io_module_scope_new (GIOModuleScopeFlags flags);
extern
void g_io_module_scope_free (GIOModuleScope *scope);
extern
void g_io_module_scope_block (GIOModuleScope *scope,
                                              const gchar *basename);
# 55 "/usr/include/glib-2.0/gio/giomodule.h"
typedef struct _GIOModuleClass GIOModuleClass;

extern
GType g_io_module_get_type (void) __attribute__ ((__const__));
extern
GIOModule *g_io_module_new (const gchar *filename);

extern
void g_io_modules_scan_all_in_directory (const char *dirname);
extern
GList *g_io_modules_load_all_in_directory (const gchar *dirname);

extern
void g_io_modules_scan_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);
extern
GList *g_io_modules_load_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);

extern
GIOExtensionPoint *g_io_extension_point_register (const char *name);
extern
GIOExtensionPoint *g_io_extension_point_lookup (const char *name);
extern
void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point,
              GType type);
extern
GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);
extern
GList *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);
extern
GIOExtension * g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
              const char *name);
extern
GIOExtension * g_io_extension_point_implement (const char *extension_point_name,
              GType type,
              const char *extension_name,
              gint priority);

extern
GType g_io_extension_get_type (GIOExtension *extension);
extern
const char * g_io_extension_get_name (GIOExtension *extension);
extern
gint g_io_extension_get_priority (GIOExtension *extension);
extern
GTypeClass* g_io_extension_ref_class (GIOExtension *extension);
# 124 "/usr/include/glib-2.0/gio/giomodule.h"
extern
void g_io_module_load (GIOModule *module);
# 144 "/usr/include/glib-2.0/gio/giomodule.h"
extern
void g_io_module_unload (GIOModule *module);
# 188 "/usr/include/glib-2.0/gio/giomodule.h"
extern
char **g_io_module_query (void);


# 101 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gioscheduler.h" 1
# 30 "/usr/include/glib-2.0/gio/gioscheduler.h"



__attribute__((__deprecated__("Use '" "\"GThreadPool or g_task_run_in_thread\"" "' instead"))) extern
void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func,
          gpointer user_data,
          GDestroyNotify notify,
          gint io_priority,
          GCancellable *cancellable);
__attribute__((__deprecated__)) extern
void g_io_scheduler_cancel_all_jobs (void);
__attribute__((__deprecated__("Use '" "g_main_context_invoke" "' instead"))) extern
gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
__attribute__((__deprecated__("Use '" "g_main_context_invoke" "' instead"))) extern
void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);


# 102 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/glistmodel.h" 1
# 32 "/usr/include/glib-2.0/gio/glistmodel.h"



extern
GType g_list_model_get_type (void);
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"

# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
 typedef struct _GListModel GListModel; typedef struct _GListModelInterface GListModelInterface; typedef GListModel *GListModel_autoptr; typedef GList *GListModel_listautoptr; typedef GSList *GListModel_slistautoptr; typedef GQueue *GListModel_queueautoptr;
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"

# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListModel (GListModel *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListModel (GListModel **_ptr) { glib_autoptr_clear_GListModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListModel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListModel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma GCC diagnostic pop
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
 __attribute__ ((__unused__)) static inline GListModel * G_LIST_MODEL (gpointer ptr) { return (((GListModel*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_list_model_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean G_IS_LIST_MODEL (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_model_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GListModelInterface * G_LIST_MODEL_GET_IFACE (gpointer ptr) { return (((GListModelInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_list_model_get_type ())))); }
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma GCC diagnostic pop
# 36 "/usr/include/glib-2.0/gio/glistmodel.h"


struct _GListModelInterface
{
  GTypeInterface g_iface;

  GType (* get_item_type) (GListModel *list);

  guint (* get_n_items) (GListModel *list);

  gpointer (* get_item) (GListModel *list,
                                 guint position);
};

extern
GType g_list_model_get_item_type (GListModel *list);

extern
guint g_list_model_get_n_items (GListModel *list);

extern
gpointer g_list_model_get_item (GListModel *list,
                                                                         guint position);

extern
GObject * g_list_model_get_object (GListModel *list,
                                                                         guint position);

extern
void g_list_model_items_changed (GListModel *list,
                                                                         guint position,
                                                                         guint removed,
                                                                         guint added);


# 104 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gliststore.h" 1
# 32 "/usr/include/glib-2.0/gio/gliststore.h"



extern
GType g_list_store_get_type (void);
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/gio/gliststore.h"

# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
 typedef struct _GListStore GListStore; typedef struct { GObjectClass parent_class; } GListStoreClass; typedef GListStore *GListStore_autoptr; typedef GList *GListStore_listautoptr; typedef GSList *GListStore_slistautoptr; typedef GQueue *GListStore_queueautoptr;
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/gio/gliststore.h"

# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListStore (GListStore *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListStore (GListStore **_ptr) { glib_autoptr_clear_GListStore (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListStore (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListStore (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListStore (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic pop
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
 typedef GListStoreClass *GListStoreClass_autoptr; typedef GList *GListStoreClass_listautoptr; typedef GSList *GListStoreClass_slistautoptr; typedef GQueue *GListStoreClass_queueautoptr;
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/gio/gliststore.h"

# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListStoreClass (GListStoreClass *_ptr) { if (_ptr) (g_type_class_unref) ((GListStoreClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListStoreClass (GListStoreClass **_ptr) { glib_autoptr_clear_GListStoreClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListStoreClass (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListStoreClass (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_type_class_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListStoreClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_type_class_unref); }
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic pop
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
 __attribute__ ((__unused__)) static inline GListStore * G_LIST_STORE (gpointer ptr) { return (((GListStore*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_list_store_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean G_IS_LIST_STORE (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_store_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); }
# 36 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma GCC diagnostic pop
# 36 "/usr/include/glib-2.0/gio/gliststore.h"


extern
GListStore * g_list_store_new (GType item_type);

extern
void g_list_store_insert (GListStore *store,
                                                                         guint position,
                                                                         gpointer item);

extern
guint g_list_store_insert_sorted (GListStore *store,
                                                                         gpointer item,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);

extern
void g_list_store_sort (GListStore *store,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);

extern
void g_list_store_append (GListStore *store,
                                                                         gpointer item);

extern
void g_list_store_remove (GListStore *store,
                                                                         guint position);

extern
void g_list_store_remove_all (GListStore *store);

extern
void g_list_store_splice (GListStore *store,
                                                                         guint position,
                                                                         guint n_removals,
                                                                         gpointer *additions,
                                                                         guint n_additions);

extern
gboolean g_list_store_find (GListStore *store,
                                                                         gpointer item,
                                                                         guint *position);

extern
gboolean g_list_store_find_with_equal_func (GListStore *store,
                                                                         gpointer item,
                                                                         GEqualFunc equal_func,
                                                                         guint *position);


# 105 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gloadableicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gloadableicon.h"

# 43 "/usr/include/glib-2.0/gio/gloadableicon.h"
typedef struct _GLoadableIconIface GLoadableIconIface;
# 54 "/usr/include/glib-2.0/gio/gloadableicon.h"
struct _GLoadableIconIface
{
  GTypeInterface g_iface;



  GInputStream * (* load) (GLoadableIcon *icon,
                                  int size,
                                  char **type,
                                  GCancellable *cancellable,
                                  GError **error);
  void (* load_async) (GLoadableIcon *icon,
                                  int size,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  GInputStream * (* load_finish) (GLoadableIcon *icon,
                                  GAsyncResult *res,
                                  char **type,
                                  GError **error);
};

extern
GType g_loadable_icon_get_type (void) __attribute__ ((__const__));

extern
GInputStream *g_loadable_icon_load (GLoadableIcon *icon,
        int size,
        char **type,
        GCancellable *cancellable,
        GError **error);
extern
void g_loadable_icon_load_async (GLoadableIcon *icon,
        int size,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GInputStream *g_loadable_icon_load_finish (GLoadableIcon *icon,
        GAsyncResult *res,
        char **type,
        GError **error);


# 106 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemoryinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gmemoryinputstream.h"

# 44 "/usr/include/glib-2.0/gio/gmemoryinputstream.h"
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;

struct _GMemoryInputStream
{
  GInputStream parent_instance;


  GMemoryInputStreamPrivate *priv;
};

struct _GMemoryInputStreamClass
{
  GInputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


extern
GType g_memory_input_stream_get_type (void) __attribute__ ((__const__));
extern
GInputStream * g_memory_input_stream_new (void);
extern
GInputStream * g_memory_input_stream_new_from_data (const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
extern
GInputStream * g_memory_input_stream_new_from_bytes (GBytes *bytes);

extern
void g_memory_input_stream_add_data (GMemoryInputStream *stream,
                                                    const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
extern
void g_memory_input_stream_add_bytes (GMemoryInputStream *stream,
          GBytes *bytes);


# 107 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemorymonitor.h" 1
# 28 "/usr/include/glib-2.0/gio/gmemorymonitor.h"

# 41 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
extern
GType g_memory_monitor_get_type (void);
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma GCC diagnostic push
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"

# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 typedef struct _GMemoryMonitor GMemoryMonitor; typedef struct _GMemoryMonitorInterface GMemoryMonitorInterface; typedef GMemoryMonitor *GMemoryMonitor_autoptr; typedef GList *GMemoryMonitor_listautoptr; typedef GSList *GMemoryMonitor_slistautoptr; typedef GQueue *GMemoryMonitor_queueautoptr;
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma GCC diagnostic push
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"

# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryMonitor (GMemoryMonitor *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryMonitor (GMemoryMonitor **_ptr) { glib_autoptr_clear_GMemoryMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma GCC diagnostic pop
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 __attribute__ ((__unused__)) static inline GMemoryMonitor * g_memory_monitor (gpointer ptr) { return (((GMemoryMonitor*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_memory_monitor_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean g_IS_memory_monitor (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_memory_monitor_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GMemoryMonitorInterface * g_memory_monitor_GET_IFACE (gpointer ptr) { return (((GMemoryMonitorInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_memory_monitor_get_type ())))); }
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma GCC diagnostic pop
# 42 "/usr/include/glib-2.0/gio/gmemorymonitor.h"






struct _GMemoryMonitorInterface {

  GTypeInterface g_iface;


  void (*low_memory_warning) (GMemoryMonitor *monitor,
                                   GMemoryMonitorWarningLevel level);
};

extern
GMemoryMonitor *g_memory_monitor_dup_default (void);


# 108 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"

# 44 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;

struct _GMemoryOutputStream
{
  GOutputStream parent_instance;


  GMemoryOutputStreamPrivate *priv;
};

struct _GMemoryOutputStreamClass
{
  GOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
# 80 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
typedef gpointer (* GReallocFunc) (gpointer data,
                                   gsize size);

extern
GType g_memory_output_stream_get_type (void) __attribute__ ((__const__));

extern
GOutputStream *g_memory_output_stream_new (gpointer data,
                                                     gsize size,
                                                     GReallocFunc realloc_function,
                                                     GDestroyNotify destroy_function);
extern
GOutputStream *g_memory_output_stream_new_resizable (void);
extern
gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);
extern
gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);
extern
gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);
extern
gpointer g_memory_output_stream_steal_data (GMemoryOutputStream *ostream);

extern
GBytes * g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);


# 109 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmenu.h" 1
# 23 "/usr/include/glib-2.0/gio/gmenu.h"
# 1 "/usr/include/glib-2.0/gio/gmenumodel.h" 1
# 27 "/usr/include/glib-2.0/gio/gmenumodel.h"

# 125 "/usr/include/glib-2.0/gio/gmenumodel.h"
typedef struct _GMenuModelPrivate GMenuModelPrivate;
typedef struct _GMenuModelClass GMenuModelClass;

typedef struct _GMenuAttributeIterPrivate GMenuAttributeIterPrivate;
typedef struct _GMenuAttributeIterClass GMenuAttributeIterClass;
typedef struct _GMenuAttributeIter GMenuAttributeIter;

typedef struct _GMenuLinkIterPrivate GMenuLinkIterPrivate;
typedef struct _GMenuLinkIterClass GMenuLinkIterClass;
typedef struct _GMenuLinkIter GMenuLinkIter;

struct _GMenuModel
{
  GObject parent_instance;
  GMenuModelPrivate *priv;
};
# 158 "/usr/include/glib-2.0/gio/gmenumodel.h"
struct _GMenuModelClass
{
  GObjectClass parent_class;

  gboolean (*is_mutable) (GMenuModel *model);
  gint (*get_n_items) (GMenuModel *model);
  void (*get_item_attributes) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **attributes);
  GMenuAttributeIter * (*iterate_item_attributes) (GMenuModel *model,
                                                             gint item_index);
  GVariant * (*get_item_attribute_value) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *attribute,
                                                             const GVariantType *expected_type);
  void (*get_item_links) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **links);
  GMenuLinkIter * (*iterate_item_links) (GMenuModel *model,
                                                             gint item_index);
  GMenuModel * (*get_item_link) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *link);
};

extern
GType g_menu_model_get_type (void) __attribute__ ((__const__));

extern
gboolean g_menu_model_is_mutable (GMenuModel *model);
extern
gint g_menu_model_get_n_items (GMenuModel *model);

extern
GMenuAttributeIter * g_menu_model_iterate_item_attributes (GMenuModel *model,
                                                                         gint item_index);
extern
GVariant * g_menu_model_get_item_attribute_value (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const GVariantType *expected_type);
extern
gboolean g_menu_model_get_item_attribute (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const gchar *format_string,
                                                                         ...);
extern
GMenuLinkIter * g_menu_model_iterate_item_links (GMenuModel *model,
                                                                         gint item_index);
extern
GMenuModel * g_menu_model_get_item_link (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *link);

extern
void g_menu_model_items_changed (GMenuModel *model,
                                                                         gint position,
                                                                         gint removed,
                                                                         gint added);
# 232 "/usr/include/glib-2.0/gio/gmenumodel.h"
struct _GMenuAttributeIter
{
  GObject parent_instance;
  GMenuAttributeIterPrivate *priv;
};

struct _GMenuAttributeIterClass
{
  GObjectClass parent_class;

  gboolean (*get_next) (GMenuAttributeIter *iter,
                             const gchar **out_name,
                             GVariant **value);
};

extern
GType g_menu_attribute_iter_get_type (void) __attribute__ ((__const__));

extern
gboolean g_menu_attribute_iter_get_next (GMenuAttributeIter *iter,
                                                                         const gchar **out_name,
                                                                         GVariant **value);
extern
gboolean g_menu_attribute_iter_next (GMenuAttributeIter *iter);
extern
const gchar * g_menu_attribute_iter_get_name (GMenuAttributeIter *iter);
extern
GVariant * g_menu_attribute_iter_get_value (GMenuAttributeIter *iter);
# 274 "/usr/include/glib-2.0/gio/gmenumodel.h"
struct _GMenuLinkIter
{
  GObject parent_instance;
  GMenuLinkIterPrivate *priv;
};

struct _GMenuLinkIterClass
{
  GObjectClass parent_class;

  gboolean (*get_next) (GMenuLinkIter *iter,
                             const gchar **out_link,
                             GMenuModel **value);
};

extern
GType g_menu_link_iter_get_type (void) __attribute__ ((__const__));

extern
gboolean g_menu_link_iter_get_next (GMenuLinkIter *iter,
                                                                         const gchar **out_link,
                                                                         GMenuModel **value);
extern
gboolean g_menu_link_iter_next (GMenuLinkIter *iter);
extern
const gchar * g_menu_link_iter_get_name (GMenuLinkIter *iter);
extern
GMenuModel * g_menu_link_iter_get_value (GMenuLinkIter *iter);


# 24 "/usr/include/glib-2.0/gio/gmenu.h" 2


# 39 "/usr/include/glib-2.0/gio/gmenu.h"
typedef struct _GMenuItem GMenuItem;
typedef struct _GMenu GMenu;

extern
GType g_menu_get_type (void) __attribute__ ((__const__));
extern
GMenu * g_menu_new (void);

extern
void g_menu_freeze (GMenu *menu);

extern
void g_menu_insert_item (GMenu *menu,
                                                     gint position,
                                                     GMenuItem *item);
extern
void g_menu_prepend_item (GMenu *menu,
                                                     GMenuItem *item);
extern
void g_menu_append_item (GMenu *menu,
                                                     GMenuItem *item);
extern
void g_menu_remove (GMenu *menu,
                                                     gint position);

extern
void g_menu_remove_all (GMenu *menu);

extern
void g_menu_insert (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void g_menu_prepend (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void g_menu_append (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);

extern
void g_menu_insert_section (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *section);
extern
void g_menu_prepend_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);
extern
void g_menu_append_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);

extern
void g_menu_insert_submenu (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
extern
void g_menu_prepend_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
extern
void g_menu_append_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);


extern
GType g_menu_item_get_type (void) __attribute__ ((__const__));
extern
GMenuItem * g_menu_item_new (const gchar *label,
                                                     const gchar *detailed_action);

extern
GMenuItem * g_menu_item_new_from_model (GMenuModel *model,
                                                     gint item_index);

extern
GMenuItem * g_menu_item_new_submenu (const gchar *label,
                                                     GMenuModel *submenu);

extern
GMenuItem * g_menu_item_new_section (const gchar *label,
                                                     GMenuModel *section);

extern
GVariant * g_menu_item_get_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const GVariantType *expected_type);
extern
gboolean g_menu_item_get_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
extern
GMenuModel *g_menu_item_get_link (GMenuItem *menu_item,
                                                     const gchar *link);

extern
void g_menu_item_set_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     GVariant *value);
extern
void g_menu_item_set_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
extern
void g_menu_item_set_link (GMenuItem *menu_item,
                                                     const gchar *link,
                                                     GMenuModel *model);
extern
void g_menu_item_set_label (GMenuItem *menu_item,
                                                     const gchar *label);
extern
void g_menu_item_set_submenu (GMenuItem *menu_item,
                                                     GMenuModel *submenu);
extern
void g_menu_item_set_section (GMenuItem *menu_item,
                                                     GMenuModel *section);
extern
void g_menu_item_set_action_and_target_value (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     GVariant *target_value);
extern
void g_menu_item_set_action_and_target (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     const gchar *format_string,
                                                     ...);
extern
void g_menu_item_set_detailed_action (GMenuItem *menu_item,
                                                     const gchar *detailed_action);

extern
void g_menu_item_set_icon (GMenuItem *menu_item,
                                                     GIcon *icon);


# 110 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmenuexporter.h" 1
# 26 "/usr/include/glib-2.0/gio/gmenuexporter.h"


extern
guint g_dbus_connection_export_menu_model (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GMenuModel *menu,
                                                                         GError **error);

extern
void g_dbus_connection_unexport_menu_model (GDBusConnection *connection,
                                                                         guint export_id);


# 111 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gmount.h" 1
# 31 "/usr/include/glib-2.0/gio/gmount.h"







typedef struct _GMountIface GMountIface;
# 75 "/usr/include/glib-2.0/gio/gmount.h"
struct _GMountIface
{
  GTypeInterface g_iface;



  void (* changed) (GMount *mount);
  void (* unmounted) (GMount *mount);



  GFile * (* get_root) (GMount *mount);
  char * (* get_name) (GMount *mount);
  GIcon * (* get_icon) (GMount *mount);
  char * (* get_uuid) (GMount *mount);
  GVolume * (* get_volume) (GMount *mount);
  GDrive * (* get_drive) (GMount *mount);
  gboolean (* can_unmount) (GMount *mount);
  gboolean (* can_eject) (GMount *mount);

  void (* unmount) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* eject) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* remount) (GMount *mount,
                                             GMountMountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* remount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* guess_content_type) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gchar ** (* guess_content_type_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  gchar ** (* guess_content_type_sync) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GError **error);


  void (* pre_unmount) (GMount *mount);

  void (* unmount_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* eject_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  GFile * (* get_default_location) (GMount *mount);

  const gchar * (* get_sort_key) (GMount *mount);
  GIcon * (* get_symbolic_icon) (GMount *mount);
};

extern
GType g_mount_get_type (void) __attribute__ ((__const__));

extern
GFile * g_mount_get_root (GMount *mount);
extern
GFile * g_mount_get_default_location (GMount *mount);
extern
char * g_mount_get_name (GMount *mount);
extern
GIcon * g_mount_get_icon (GMount *mount);
extern
GIcon * g_mount_get_symbolic_icon (GMount *mount);
extern
char * g_mount_get_uuid (GMount *mount);
extern
GVolume * g_mount_get_volume (GMount *mount);
extern
GDrive * g_mount_get_drive (GMount *mount);
extern
gboolean g_mount_can_unmount (GMount *mount);
extern
gboolean g_mount_can_eject (GMount *mount);

__attribute__((__deprecated__("Use '" "g_mount_unmount_with_operation" "' instead"))) extern
void g_mount_unmount (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);

__attribute__((__deprecated__("Use '" "g_mount_unmount_with_operation_finish" "' instead"))) extern
gboolean g_mount_unmount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

__attribute__((__deprecated__("Use '" "g_mount_eject_with_operation" "' instead"))) extern
void g_mount_eject (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);

__attribute__((__deprecated__("Use '" "g_mount_eject_with_operation_finish" "' instead"))) extern
gboolean g_mount_eject_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

extern
void g_mount_remount (GMount *mount,
                                               GMountMountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_remount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

extern
void g_mount_guess_content_type (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gchar ** g_mount_guess_content_type_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
extern
gchar ** g_mount_guess_content_type_sync (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GError **error);

extern
gboolean g_mount_is_shadowed (GMount *mount);
extern
void g_mount_shadow (GMount *mount);
extern
void g_mount_unshadow (GMount *mount);

extern
void g_mount_unmount_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_unmount_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

extern
void g_mount_eject_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_mount_eject_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

extern
const gchar *g_mount_get_sort_key (GMount *mount);


# 113 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmountoperation.h" 1
# 30 "/usr/include/glib-2.0/gio/gmountoperation.h"

# 45 "/usr/include/glib-2.0/gio/gmountoperation.h"
typedef struct _GMountOperationClass GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;

struct _GMountOperation
{
  GObject parent_instance;

  GMountOperationPrivate *priv;
};

struct _GMountOperationClass
{
  GObjectClass parent_class;



  void (* ask_password) (GMountOperation *op,
    const char *message,
    const char *default_user,
    const char *default_domain,
    GAskPasswordFlags flags);
# 76 "/usr/include/glib-2.0/gio/gmountoperation.h"
  void (* ask_question) (GMountOperation *op,
    const char *message,
    const char *choices[]);

  void (* reply) (GMountOperation *op,
    GMountOperationResult result);

  void (* aborted) (GMountOperation *op);
# 98 "/usr/include/glib-2.0/gio/gmountoperation.h"
  void (* show_processes) (GMountOperation *op,
                           const gchar *message,
                           GArray *processes,
                           const gchar *choices[]);

  void (* show_unmount_progress) (GMountOperation *op,
                                  const gchar *message,
                                  gint64 time_left,
                                  gint64 bytes_left);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
};

extern
GType g_mount_operation_get_type (void) __attribute__ ((__const__));
extern
GMountOperation * g_mount_operation_new (void);

extern
const char * g_mount_operation_get_username (GMountOperation *op);
extern
void g_mount_operation_set_username (GMountOperation *op,
         const char *username);
extern
const char * g_mount_operation_get_password (GMountOperation *op);
extern
void g_mount_operation_set_password (GMountOperation *op,
         const char *password);
extern
gboolean g_mount_operation_get_anonymous (GMountOperation *op);
extern
void g_mount_operation_set_anonymous (GMountOperation *op,
         gboolean anonymous);
extern
const char * g_mount_operation_get_domain (GMountOperation *op);
extern
void g_mount_operation_set_domain (GMountOperation *op,
         const char *domain);
extern
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);
extern
void g_mount_operation_set_password_save (GMountOperation *op,
         GPasswordSave save);
extern
int g_mount_operation_get_choice (GMountOperation *op);
extern
void g_mount_operation_set_choice (GMountOperation *op,
         int choice);
extern
void g_mount_operation_reply (GMountOperation *op,
         GMountOperationResult result);
extern
gboolean g_mount_operation_get_is_tcrypt_hidden_volume (GMountOperation *op);
extern
void g_mount_operation_set_is_tcrypt_hidden_volume (GMountOperation *op,
                                                             gboolean hidden_volume);
extern
gboolean g_mount_operation_get_is_tcrypt_system_volume (GMountOperation *op);
extern
void g_mount_operation_set_is_tcrypt_system_volume (GMountOperation *op,
                                                             gboolean system_volume);
extern
guint g_mount_operation_get_pim (GMountOperation *op);
extern
void g_mount_operation_set_pim (GMountOperation *op,
                                                   guint pim);


# 114 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnativesocketaddress.h" 1
# 31 "/usr/include/glib-2.0/gio/gnativesocketaddress.h"

# 40 "/usr/include/glib-2.0/gio/gnativesocketaddress.h"
typedef struct _GNativeSocketAddressClass GNativeSocketAddressClass;
typedef struct _GNativeSocketAddressPrivate GNativeSocketAddressPrivate;

struct _GNativeSocketAddress
{
  GSocketAddress parent_instance;


  GNativeSocketAddressPrivate *priv;
};

struct _GNativeSocketAddressClass
{
  GSocketAddressClass parent_class;
};

extern
GType g_native_socket_address_get_type (void) __attribute__ ((__const__));

extern
GSocketAddress *g_native_socket_address_new (gpointer native,
                                                        gsize len);


# 115 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h" 1
# 28 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h"
# 1 "/usr/include/glib-2.0/gio/gvolumemonitor.h" 1
# 33 "/usr/include/glib-2.0/gio/gvolumemonitor.h"

# 55 "/usr/include/glib-2.0/gio/gvolumemonitor.h"
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;

struct _GVolumeMonitor
{
  GObject parent_instance;


  gpointer priv;
};

struct _GVolumeMonitorClass
{
  GObjectClass parent_class;



  void (* volume_added) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_removed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_changed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);

  void (* mount_added) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_removed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_pre_unmount) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_changed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);

  void (* drive_connected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_disconnected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_changed) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);



  gboolean (* is_supported) (void);

  GList * (* get_connected_drives) (GVolumeMonitor *volume_monitor);
  GList * (* get_volumes) (GVolumeMonitor *volume_monitor);
  GList * (* get_mounts) (GVolumeMonitor *volume_monitor);

  GVolume * (* get_volume_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);

  GMount * (* get_mount_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);



  GVolume * (* adopt_orphan_mount) (GMount *mount,
                                      GVolumeMonitor *volume_monitor);


  void (* drive_eject_button) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);


  void (* drive_stop_button) (GVolumeMonitor *volume_monitor,
                                     GDrive *drive);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

extern
GType g_volume_monitor_get_type (void) __attribute__ ((__const__));

extern
GVolumeMonitor *g_volume_monitor_get (void);
extern
GList * g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);
extern
GList * g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);
extern
GList * g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);
extern
GVolume * g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
extern
GMount * g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);

__attribute__((__deprecated__)) extern
GVolume * g_volume_monitor_adopt_orphan_mount (GMount *mount);


# 29 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h" 2


# 40 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h"
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;

struct _GNativeVolumeMonitor
{
  GVolumeMonitor parent_instance;
};

struct _GNativeVolumeMonitorClass
{
  GVolumeMonitorClass parent_class;

  GMount * (* get_mount_for_mount_path) (const char *mount_path,
                                         GCancellable *cancellable);
};

extern
GType g_native_volume_monitor_get_type (void) __attribute__ ((__const__));


# 116 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnetworkaddress.h" 1
# 28 "/usr/include/glib-2.0/gio/gnetworkaddress.h"

# 37 "/usr/include/glib-2.0/gio/gnetworkaddress.h"
typedef struct _GNetworkAddressClass GNetworkAddressClass;
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;

struct _GNetworkAddress
{
  GObject parent_instance;


  GNetworkAddressPrivate *priv;
};

struct _GNetworkAddressClass
{
  GObjectClass parent_class;

};

extern
GType g_network_address_get_type (void) __attribute__ ((__const__));

extern
GSocketConnectable *g_network_address_new (const gchar *hostname,
          guint16 port);
extern
GSocketConnectable *g_network_address_new_loopback (guint16 port);
extern
GSocketConnectable *g_network_address_parse (const gchar *host_and_port,
          guint16 default_port,
          GError **error);
extern
GSocketConnectable *g_network_address_parse_uri (const gchar *uri,
              guint16 default_port,
          GError **error);
extern
const gchar *g_network_address_get_hostname (GNetworkAddress *addr);
extern
guint16 g_network_address_get_port (GNetworkAddress *addr);
extern
const gchar *g_network_address_get_scheme (GNetworkAddress *addr);



# 117 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnetworkmonitor.h" 1
# 28 "/usr/include/glib-2.0/gio/gnetworkmonitor.h"

# 45 "/usr/include/glib-2.0/gio/gnetworkmonitor.h"
typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;

struct _GNetworkMonitorInterface {
  GTypeInterface g_iface;

  void (*network_changed) (GNetworkMonitor *monitor,
    gboolean network_available);

  gboolean (*can_reach) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GError **error);
  void (*can_reach_async) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);
  gboolean (*can_reach_finish) (GNetworkMonitor *monitor,
    GAsyncResult *result,
    GError **error);
};

extern
GType g_network_monitor_get_type (void) __attribute__ ((__const__));
extern
GNetworkMonitor *g_network_monitor_get_default (void);

extern
gboolean g_network_monitor_get_network_available (GNetworkMonitor *monitor);

extern
gboolean g_network_monitor_get_network_metered (GNetworkMonitor *monitor);

extern
GNetworkConnectivity g_network_monitor_get_connectivity (GNetworkMonitor *monitor);

extern
gboolean g_network_monitor_can_reach (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GError **error);
extern
void g_network_monitor_can_reach_async (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
extern
gboolean g_network_monitor_can_reach_finish (GNetworkMonitor *monitor,
                                                               GAsyncResult *result,
                                                               GError **error);


# 118 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnetworkservice.h" 1
# 28 "/usr/include/glib-2.0/gio/gnetworkservice.h"

# 37 "/usr/include/glib-2.0/gio/gnetworkservice.h"
typedef struct _GNetworkServiceClass GNetworkServiceClass;
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;

struct _GNetworkService
{
  GObject parent_instance;


  GNetworkServicePrivate *priv;
};

struct _GNetworkServiceClass
{
  GObjectClass parent_class;

};

extern
GType g_network_service_get_type (void) __attribute__ ((__const__));

extern
GSocketConnectable *g_network_service_new (const gchar *service,
            const gchar *protocol,
            const gchar *domain);

extern
const gchar *g_network_service_get_service (GNetworkService *srv);
extern
const gchar *g_network_service_get_protocol (GNetworkService *srv);
extern
const gchar *g_network_service_get_domain (GNetworkService *srv);
extern
const gchar *g_network_service_get_scheme (GNetworkService *srv);
extern
void g_network_service_set_scheme (GNetworkService *srv, const gchar *scheme);


# 119 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnotification.h" 1
# 30 "/usr/include/glib-2.0/gio/gnotification.h"






extern
GType g_notification_get_type (void) __attribute__ ((__const__));

extern
GNotification * g_notification_new (const gchar *title);

extern
void g_notification_set_title (GNotification *notification,
                                                                         const gchar *title);

extern
void g_notification_set_body (GNotification *notification,
                                                                         const gchar *body);

extern
void g_notification_set_icon (GNotification *notification,
                                                                         GIcon *icon);

__attribute__((__deprecated__("Use '" "g_notification_set_priority" "' instead"))) extern
void g_notification_set_urgent (GNotification *notification,
                                                                         gboolean urgent);

extern
void g_notification_set_priority (GNotification *notification,
                                                                         GNotificationPriority priority);

extern
void g_notification_set_category (GNotification *notification,
                                                                         const gchar *category);

extern
void g_notification_add_button (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *detailed_action);

extern
void g_notification_add_button_with_target (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);

extern
void g_notification_add_button_with_target_value (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         GVariant *target);

extern
void g_notification_set_default_action (GNotification *notification,
                                                                         const gchar *detailed_action);

extern
void g_notification_set_default_action_and_target (GNotification *notification,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);

extern
void g_notification_set_default_action_and_target_value (GNotification *notification,
                                                                         const gchar *action,
                                                                         GVariant *target);


# 120 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gpermission.h" 1
# 29 "/usr/include/glib-2.0/gio/gpermission.h"

# 43 "/usr/include/glib-2.0/gio/gpermission.h"
typedef struct _GPermissionPrivate GPermissionPrivate;
typedef struct _GPermissionClass GPermissionClass;

struct _GPermission
{
  GObject parent_instance;


  GPermissionPrivate *priv;
};

struct _GPermissionClass {
  GObjectClass parent_class;

  gboolean (*acquire) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*acquire_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*acquire_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);

  gboolean (*release) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*release_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*release_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);

  gpointer reserved[16];
};

extern
GType g_permission_get_type (void);
extern
gboolean g_permission_acquire (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
extern
void g_permission_acquire_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
extern
gboolean g_permission_acquire_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);

extern
gboolean g_permission_release (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
extern
void g_permission_release_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
extern
gboolean g_permission_release_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);

extern
gboolean g_permission_get_allowed (GPermission *permission);
extern
gboolean g_permission_get_can_acquire (GPermission *permission);
extern
gboolean g_permission_get_can_release (GPermission *permission);

extern
void g_permission_impl_update (GPermission *permission,
                                                 gboolean allowed,
                                                 gboolean can_acquire,
                                                 gboolean can_release);


# 122 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpollableinputstream.h" 1
# 26 "/usr/include/glib-2.0/gio/gpollableinputstream.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 27 "/usr/include/glib-2.0/gio/gpollableinputstream.h" 2


# 42 "/usr/include/glib-2.0/gio/gpollableinputstream.h"
typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
# 66 "/usr/include/glib-2.0/gio/gpollableinputstream.h"
struct _GPollableInputStreamInterface
{
  GTypeInterface g_iface;


  gboolean (*can_poll) (GPollableInputStream *stream);

  gboolean (*is_readable) (GPollableInputStream *stream);
  GSource * (*create_source) (GPollableInputStream *stream,
        GCancellable *cancellable);
  gssize (*read_nonblocking) (GPollableInputStream *stream,
        void *buffer,
        gsize count,
        GError **error);
};

extern
GType g_pollable_input_stream_get_type (void) __attribute__ ((__const__));

extern
gboolean g_pollable_input_stream_can_poll (GPollableInputStream *stream);

extern
gboolean g_pollable_input_stream_is_readable (GPollableInputStream *stream);
extern
GSource *g_pollable_input_stream_create_source (GPollableInputStream *stream,
         GCancellable *cancellable);

extern
gssize g_pollable_input_stream_read_nonblocking (GPollableInputStream *stream,
         void *buffer,
         gsize count,
         GCancellable *cancellable,
         GError **error);


# 123 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpollableoutputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gpollableoutputstream.h"

# 42 "/usr/include/glib-2.0/gio/gpollableoutputstream.h"
typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;
# 74 "/usr/include/glib-2.0/gio/gpollableoutputstream.h"
struct _GPollableOutputStreamInterface
{
  GTypeInterface g_iface;


  gboolean (*can_poll) (GPollableOutputStream *stream);

  gboolean (*is_writable) (GPollableOutputStream *stream);
  GSource * (*create_source) (GPollableOutputStream *stream,
         GCancellable *cancellable);
  gssize (*write_nonblocking) (GPollableOutputStream *stream,
         const void *buffer,
         gsize count,
         GError **error);
  GPollableReturn (*writev_nonblocking) (GPollableOutputStream *stream,
      const GOutputVector *vectors,
      gsize n_vectors,
      gsize *bytes_written,
      GError **error);
};

extern
GType g_pollable_output_stream_get_type (void) __attribute__ ((__const__));

extern
gboolean g_pollable_output_stream_can_poll (GPollableOutputStream *stream);

extern
gboolean g_pollable_output_stream_is_writable (GPollableOutputStream *stream);
extern
GSource *g_pollable_output_stream_create_source (GPollableOutputStream *stream,
           GCancellable *cancellable);

extern
gssize g_pollable_output_stream_write_nonblocking (GPollableOutputStream *stream,
           const void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);

extern
GPollableReturn g_pollable_output_stream_writev_nonblocking (GPollableOutputStream *stream,
            const GOutputVector *vectors,
            gsize n_vectors,
            gsize *bytes_written,
            GCancellable *cancellable,
            GError **error);


# 124 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpollableutils.h" 1
# 28 "/usr/include/glib-2.0/gio/gpollableutils.h"


extern
GSource *g_pollable_source_new (GObject *pollable_stream);

extern
GSource *g_pollable_source_new_full (gpointer pollable_stream,
          GSource *child_source,
          GCancellable *cancellable);

extern
gssize g_pollable_stream_read (GInputStream *stream,
          void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);

extern
gssize g_pollable_stream_write (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_pollable_stream_write_all (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);


# 125 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h" 1
# 29 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"

# 42 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
extern
GType g_power_profile_monitor_get_type (void);
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma GCC diagnostic push
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"

# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 typedef struct _GPowerProfileMonitor GPowerProfileMonitor; typedef struct _GPowerProfileMonitorInterface GPowerProfileMonitorInterface; typedef GPowerProfileMonitor *GPowerProfileMonitor_autoptr; typedef GList *GPowerProfileMonitor_listautoptr; typedef GSList *GPowerProfileMonitor_slistautoptr; typedef GQueue *GPowerProfileMonitor_queueautoptr;
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma GCC diagnostic push
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"

# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPowerProfileMonitor (GPowerProfileMonitor *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPowerProfileMonitor (GPowerProfileMonitor **_ptr) { glib_autoptr_clear_GPowerProfileMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPowerProfileMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPowerProfileMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPowerProfileMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) glib_autoptr_clear_GObject); }
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma GCC diagnostic pop
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 __attribute__ ((__unused__)) static inline GPowerProfileMonitor * g_power_profile_monitor (gpointer ptr) { return (((GPowerProfileMonitor*) (void *) g_type_check_instance_cast ((GTypeInstance*) (ptr), (g_power_profile_monitor_get_type ())))); } __attribute__ ((__unused__)) static inline gboolean g_IS_power_profile_monitor (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_power_profile_monitor_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GPowerProfileMonitorInterface * g_power_profile_monitor_GET_IFACE (gpointer ptr) { return (((GPowerProfileMonitorInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_power_profile_monitor_get_type ())))); }
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma GCC diagnostic pop
# 43 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"






struct _GPowerProfileMonitorInterface
{

  GTypeInterface g_iface;
};

extern
GPowerProfileMonitor *g_power_profile_monitor_dup_default (void);

extern
gboolean g_power_profile_monitor_get_power_saver_enabled (GPowerProfileMonitor *monitor);


# 126 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpropertyaction.h" 1
# 29 "/usr/include/glib-2.0/gio/gpropertyaction.h"








extern
GType g_property_action_get_type (void) __attribute__ ((__const__));

extern
GPropertyAction * g_property_action_new (const gchar *name,
                                                                         gpointer object,
                                                                         const gchar *property_name);


# 127 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxy.h" 1
# 32 "/usr/include/glib-2.0/gio/gproxy.h"

# 56 "/usr/include/glib-2.0/gio/gproxy.h"
typedef struct _GProxyInterface GProxyInterface;
# 71 "/usr/include/glib-2.0/gio/gproxy.h"
struct _GProxyInterface
{
  GTypeInterface g_iface;



  GIOStream * (* connect) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GError **error);

  void (* connect_async) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);

  GIOStream * (* connect_finish) (GProxy *proxy,
         GAsyncResult *result,
         GError **error);

  gboolean (* supports_hostname) (GProxy *proxy);
};

extern
GType g_proxy_get_type (void) __attribute__ ((__const__));

extern
GProxy *g_proxy_get_default_for_protocol (const gchar *protocol);

extern
GIOStream *g_proxy_connect (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GError **error);

extern
void g_proxy_connect_async (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);

extern
GIOStream *g_proxy_connect_finish (GProxy *proxy,
          GAsyncResult *result,
          GError **error);

extern
gboolean g_proxy_supports_hostname (GProxy *proxy);


# 128 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxyaddress.h" 1
# 30 "/usr/include/glib-2.0/gio/gproxyaddress.h"

# 39 "/usr/include/glib-2.0/gio/gproxyaddress.h"
typedef struct _GProxyAddressClass GProxyAddressClass;
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;

struct _GProxyAddress
{
  GInetSocketAddress parent_instance;


  GProxyAddressPrivate *priv;
};

struct _GProxyAddressClass
{
  GInetSocketAddressClass parent_class;
};


extern
GType g_proxy_address_get_type (void) __attribute__ ((__const__));

extern
GSocketAddress *g_proxy_address_new (GInetAddress *inetaddr,
          guint16 port,
          const gchar *protocol,
          const gchar *dest_hostname,
                               guint16 dest_port,
          const gchar *username,
          const gchar *password);

extern
const gchar *g_proxy_address_get_protocol (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_destination_protocol (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_destination_hostname (GProxyAddress *proxy);
extern
guint16 g_proxy_address_get_destination_port (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_username (GProxyAddress *proxy);
extern
const gchar *g_proxy_address_get_password (GProxyAddress *proxy);

extern
const gchar *g_proxy_address_get_uri (GProxyAddress *proxy);


# 129 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h" 1
# 28 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h"
# 1 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h" 1
# 28 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h"

# 43 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h"
typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;

struct _GSocketAddressEnumerator
{

  GObject parent_instance;
};
# 59 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h"
struct _GSocketAddressEnumeratorClass
{

  GObjectClass parent_class;




  GSocketAddress * (* next) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);

  void (* next_async) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
  GSocketAddress * (* next_finish) (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
};

extern
GType g_socket_address_enumerator_get_type (void) __attribute__ ((__const__));

extern
GSocketAddress *g_socket_address_enumerator_next (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);

extern
void g_socket_address_enumerator_next_async (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GSocketAddress *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);


# 29 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h" 2


# 47 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h"
typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;

struct _GProxyAddressEnumerator
{

  GSocketAddressEnumerator parent_instance;
  GProxyAddressEnumeratorPrivate *priv;
};






struct _GProxyAddressEnumeratorClass
{

  GSocketAddressEnumeratorClass parent_class;

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

extern
GType g_proxy_address_enumerator_get_type (void) __attribute__ ((__const__));


# 130 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxyresolver.h" 1
# 30 "/usr/include/glib-2.0/gio/gproxyresolver.h"

# 45 "/usr/include/glib-2.0/gio/gproxyresolver.h"
typedef struct _GProxyResolverInterface GProxyResolverInterface;

struct _GProxyResolverInterface {
  GTypeInterface g_iface;


  gboolean (* is_supported) (GProxyResolver *resolver);

  gchar ** (* lookup) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GError **error);

  void (* lookup_async) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);

  gchar ** (* lookup_finish) (GProxyResolver *resolver,
         GAsyncResult *result,
         GError **error);
};

extern
GType g_proxy_resolver_get_type (void) __attribute__ ((__const__));
extern
GProxyResolver *g_proxy_resolver_get_default (void);

extern
gboolean g_proxy_resolver_is_supported (GProxyResolver *resolver);
extern
gchar **g_proxy_resolver_lookup (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GError **error);
extern
void g_proxy_resolver_lookup_async (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
extern
gchar **g_proxy_resolver_lookup_finish (GProxyResolver *resolver,
       GAsyncResult *result,
       GError **error);



# 131 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gremoteactiongroup.h" 1
# 29 "/usr/include/glib-2.0/gio/gremoteactiongroup.h"

# 41 "/usr/include/glib-2.0/gio/gremoteactiongroup.h"
typedef struct _GRemoteActionGroupInterface GRemoteActionGroupInterface;

struct _GRemoteActionGroupInterface
{
  GTypeInterface g_iface;

  void (* activate_action_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *parameter,
                                     GVariant *platform_data);

  void (* change_action_state_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *value,
                                     GVariant *platform_data);
};

extern
GType g_remote_action_group_get_type (void) __attribute__ ((__const__));

extern
void g_remote_action_group_activate_action_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter,
                                                                         GVariant *platform_data);

extern
void g_remote_action_group_change_action_state_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *value,
                                                                         GVariant *platform_data);


# 132 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gresolver.h" 1
# 29 "/usr/include/glib-2.0/gio/gresolver.h"

# 38 "/usr/include/glib-2.0/gio/gresolver.h"
typedef struct _GResolverPrivate GResolverPrivate;
typedef struct _GResolverClass GResolverClass;

struct _GResolver {
  GObject parent_instance;

  GResolverPrivate *priv;
};
# 57 "/usr/include/glib-2.0/gio/gresolver.h"
typedef enum {
  G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1 << 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 1 << 1,
} GResolverNameLookupFlags;

struct _GResolverClass {
  GObjectClass parent_class;


  void ( *reload) (GResolver *resolver);


  GList * ( *lookup_by_name) (GResolver *resolver,
                                                const gchar *hostname,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_by_name_async) (GResolver *resolver,
                                                const gchar *hostname,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_by_name_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  gchar * ( *lookup_by_address) (GResolver *resolver,
                                                GInetAddress *address,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_by_address_async) (GResolver *resolver,
                                                GInetAddress *address,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  gchar * ( *lookup_by_address_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  GList * ( *lookup_service) (GResolver *resolver,
                                                const gchar *rrname,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_service_async) (GResolver *resolver,
                                                const gchar *rrname,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_service_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  GList * ( *lookup_records) (GResolver *resolver,
                                                const gchar *rrname,
                                                GResolverRecordType record_type,
                                                GCancellable *cancellable,
                                                GError **error);

  void ( *lookup_records_async) (GResolver *resolver,
                                                const gchar *rrname,
                                                GResolverRecordType record_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);

  GList * ( *lookup_records_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
# 141 "/usr/include/glib-2.0/gio/gresolver.h"
  void ( *lookup_by_name_with_flags_async) (GResolver *resolver,
                                                const gchar *hostname,
                                                GResolverNameLookupFlags flags,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
# 158 "/usr/include/glib-2.0/gio/gresolver.h"
  GList * ( *lookup_by_name_with_flags_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
# 176 "/usr/include/glib-2.0/gio/gresolver.h"
  GList * ( *lookup_by_name_with_flags) (GResolver *resolver,
                                                const gchar *hostname,
                                                GResolverNameLookupFlags flags,
                                                GCancellable *cancellable,
                                                GError **error);

};

extern
GType g_resolver_get_type (void) __attribute__ ((__const__));
extern
GResolver *g_resolver_get_default (void);
extern
void g_resolver_set_default (GResolver *resolver);
extern
GList *g_resolver_lookup_by_name (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GCancellable *cancellable,
                                                        GError **error);
extern
void g_resolver_lookup_by_name_async (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
extern
GList *g_resolver_lookup_by_name_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
extern
void g_resolver_lookup_by_name_with_flags_async (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GResolverNameLookupFlags flags,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
extern
GList *g_resolver_lookup_by_name_with_flags_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
extern
GList *g_resolver_lookup_by_name_with_flags (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GResolverNameLookupFlags flags,
                                                        GCancellable *cancellable,
                                                        GError **error);
extern
void g_resolver_free_addresses (GList *addresses);
extern
gchar *g_resolver_lookup_by_address (GResolver *resolver,
                                                        GInetAddress *address,
                                                        GCancellable *cancellable,
                                                        GError **error);
extern
void g_resolver_lookup_by_address_async (GResolver *resolver,
                                                        GInetAddress *address,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
extern
gchar *g_resolver_lookup_by_address_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
extern
GList *g_resolver_lookup_service (GResolver *resolver,
                                                        const gchar *service,
                                                        const gchar *protocol,
                                                        const gchar *domain,
                                                        GCancellable *cancellable,
                                                        GError **error);
extern
void g_resolver_lookup_service_async (GResolver *resolver,
                                                        const gchar *service,
                                                        const gchar *protocol,
                                                        const gchar *domain,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
extern
GList *g_resolver_lookup_service_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
extern
GList *g_resolver_lookup_records (GResolver *resolver,
                                                        const gchar *rrname,
                                                        GResolverRecordType record_type,
                                                        GCancellable *cancellable,
                                                        GError **error);
extern
void g_resolver_lookup_records_async (GResolver *resolver,
                                                        const gchar *rrname,
                                                        GResolverRecordType record_type,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
extern
GList *g_resolver_lookup_records_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
extern
void g_resolver_free_targets (GList *targets);
# 287 "/usr/include/glib-2.0/gio/gresolver.h"
extern
GQuark g_resolver_error_quark (void);


# 133 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gresource.h" 1
# 30 "/usr/include/glib-2.0/gio/gresource.h"

# 48 "/usr/include/glib-2.0/gio/gresource.h"
extern
GQuark g_resource_error_quark (void);

typedef struct _GStaticResource GStaticResource;

struct _GStaticResource {

  const guint8 *data;
  gsize data_len;
  GResource *resource;
  GStaticResource *next;
  gpointer padding;
};

extern
GType g_resource_get_type (void) __attribute__ ((__const__));
extern
GResource * g_resource_new_from_data (GBytes *data,
           GError **error);
extern
GResource * g_resource_ref (GResource *resource);
extern
void g_resource_unref (GResource *resource);
extern
GResource * g_resource_load (const gchar *filename,
           GError **error);
extern
GInputStream *g_resource_open_stream (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
GBytes * g_resource_lookup_data (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
char ** g_resource_enumerate_children (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
gboolean g_resource_get_info (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);

extern
void g_resources_register (GResource *resource);
extern
void g_resources_unregister (GResource *resource);
extern
GInputStream *g_resources_open_stream (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
GBytes * g_resources_lookup_data (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
char ** g_resources_enumerate_children (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
extern
gboolean g_resources_get_info (const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);


extern
void g_static_resource_init (GStaticResource *static_resource);
extern
void g_static_resource_fini (GStaticResource *static_resource);
extern
GResource *g_static_resource_get_resource (GStaticResource *static_resource);


# 134 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gseekable.h" 1
# 30 "/usr/include/glib-2.0/gio/gseekable.h"

# 42 "/usr/include/glib-2.0/gio/gseekable.h"
typedef struct _GSeekableIface GSeekableIface;
# 55 "/usr/include/glib-2.0/gio/gseekable.h"
struct _GSeekableIface
{
  GTypeInterface g_iface;



  goffset (* tell) (GSeekable *seekable);

  gboolean (* can_seek) (GSeekable *seekable);
  gboolean (* seek) (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);

  gboolean (* can_truncate) (GSeekable *seekable);
  gboolean (* truncate_fn) (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);


};

extern
GType g_seekable_get_type (void) __attribute__ ((__const__));

extern
goffset g_seekable_tell (GSeekable *seekable);
extern
gboolean g_seekable_can_seek (GSeekable *seekable);
extern
gboolean g_seekable_seek (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
extern
gboolean g_seekable_can_truncate (GSeekable *seekable);
extern
gboolean g_seekable_truncate (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);


# 135 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsettings.h" 1
# 27 "/usr/include/glib-2.0/gio/gsettings.h"
# 1 "/usr/include/glib-2.0/gio/gsettingsschema.h" 1
# 24 "/usr/include/glib-2.0/gio/gsettingsschema.h"


typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
typedef struct _GSettingsSchema GSettingsSchema;
typedef struct _GSettingsSchemaKey GSettingsSchemaKey;


extern
GType g_settings_schema_source_get_type (void) __attribute__ ((__const__));

extern
GSettingsSchemaSource * g_settings_schema_source_get_default (void);
extern
GSettingsSchemaSource * g_settings_schema_source_ref (GSettingsSchemaSource *source);
extern
void g_settings_schema_source_unref (GSettingsSchemaSource *source);

extern
GSettingsSchemaSource * g_settings_schema_source_new_from_directory (const gchar *directory,
                                                                         GSettingsSchemaSource *parent,
                                                                         gboolean trusted,
                                                                         GError **error);

extern
GSettingsSchema * g_settings_schema_source_lookup (GSettingsSchemaSource *source,
                                                                         const gchar *schema_id,
                                                                         gboolean recursive);

extern
void g_settings_schema_source_list_schemas (GSettingsSchemaSource *source,
                                                                         gboolean recursive,
                                                                         gchar ***non_relocatable,
                                                                         gchar ***relocatable);


extern
GType g_settings_schema_get_type (void) __attribute__ ((__const__));

extern
GSettingsSchema * g_settings_schema_ref (GSettingsSchema *schema);
extern
void g_settings_schema_unref (GSettingsSchema *schema);

extern
const gchar * g_settings_schema_get_id (GSettingsSchema *schema);
extern
const gchar * g_settings_schema_get_path (GSettingsSchema *schema);
extern
GSettingsSchemaKey * g_settings_schema_get_key (GSettingsSchema *schema,
                                                                         const gchar *name);
extern
gboolean g_settings_schema_has_key (GSettingsSchema *schema,
                                                                         const gchar *name);
extern
gchar** g_settings_schema_list_keys (GSettingsSchema *schema);


extern
gchar ** g_settings_schema_list_children (GSettingsSchema *schema);


extern
GType g_settings_schema_key_get_type (void) __attribute__ ((__const__));

extern
GSettingsSchemaKey * g_settings_schema_key_ref (GSettingsSchemaKey *key);
extern
void g_settings_schema_key_unref (GSettingsSchemaKey *key);

extern
const GVariantType * g_settings_schema_key_get_value_type (GSettingsSchemaKey *key);
extern
GVariant * g_settings_schema_key_get_default_value (GSettingsSchemaKey *key);
extern
GVariant * g_settings_schema_key_get_range (GSettingsSchemaKey *key);
extern
gboolean g_settings_schema_key_range_check (GSettingsSchemaKey *key,
                                                                         GVariant *value);

extern
const gchar * g_settings_schema_key_get_name (GSettingsSchemaKey *key);
extern
const gchar * g_settings_schema_key_get_summary (GSettingsSchemaKey *key);
extern
const gchar * g_settings_schema_key_get_description (GSettingsSchemaKey *key);


# 28 "/usr/include/glib-2.0/gio/gsettings.h" 2



# 42 "/usr/include/glib-2.0/gio/gsettings.h"
typedef struct _GSettingsPrivate GSettingsPrivate;
typedef struct _GSettingsClass GSettingsClass;

struct _GSettingsClass
{
  GObjectClass parent_class;


  void (*writable_changed) (GSettings *settings,
                                        const gchar *key);
  void (*changed) (GSettings *settings,
                                        const gchar *key);
  gboolean (*writable_change_event) (GSettings *settings,
                                        GQuark key);
  gboolean (*change_event) (GSettings *settings,
                                        const GQuark *keys,
                                        gint n_keys);

  gpointer padding[20];
};

struct _GSettings
{
  GObject parent_instance;
  GSettingsPrivate *priv;
};


extern
GType g_settings_get_type (void);

__attribute__((__deprecated__("Use '" "g_settings_schema_source_list_schemas" "' instead"))) extern
const gchar * const * g_settings_list_schemas (void);
__attribute__((__deprecated__("Use '" "g_settings_schema_source_list_schemas" "' instead"))) extern
const gchar * const * g_settings_list_relocatable_schemas (void);
extern
GSettings * g_settings_new (const gchar *schema_id);
extern
GSettings * g_settings_new_with_path (const gchar *schema_id,
                                                                         const gchar *path);
extern
GSettings * g_settings_new_with_backend (const gchar *schema_id,
                                                                         GSettingsBackend *backend);
extern
GSettings * g_settings_new_with_backend_and_path (const gchar *schema_id,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
extern
GSettings * g_settings_new_full (GSettingsSchema *schema,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
extern
gchar ** g_settings_list_children (GSettings *settings);
__attribute__((__deprecated__("Use '" "g_settings_schema_list_keys" "' instead"))) extern
gchar ** g_settings_list_keys (GSettings *settings);
__attribute__((__deprecated__("Use '" "g_settings_schema_key_get_range" "' instead"))) extern
GVariant * g_settings_get_range (GSettings *settings,
                                                                         const gchar *key);
__attribute__((__deprecated__("Use '" "g_settings_schema_key_range_check" "' instead"))) extern
gboolean g_settings_range_check (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);

extern
gboolean g_settings_set_value (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);
extern
GVariant * g_settings_get_value (GSettings *settings,
                                                                         const gchar *key);

extern
GVariant * g_settings_get_user_value (GSettings *settings,
                                                                         const gchar *key);
extern
GVariant * g_settings_get_default_value (GSettings *settings,
                                                                         const gchar *key);

extern
gboolean g_settings_set (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
extern
void g_settings_get (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
extern
void g_settings_reset (GSettings *settings,
                                                                         const gchar *key);

extern
gint g_settings_get_int (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_int (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
extern
gint64 g_settings_get_int64 (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_int64 (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint64 value);
extern
guint g_settings_get_uint (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_uint (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
extern
guint64 g_settings_get_uint64 (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_uint64 (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint64 value);
extern
gchar * g_settings_get_string (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_string (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *value);
extern
gboolean g_settings_get_boolean (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_boolean (GSettings *settings,
                                                                         const gchar *key,
                                                                         gboolean value);
extern
gdouble g_settings_get_double (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_double (GSettings *settings,
                                                                         const gchar *key,
                                                                         gdouble value);
extern
gchar ** g_settings_get_strv (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_strv (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *const *value);
extern
gint g_settings_get_enum (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_enum (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
extern
guint g_settings_get_flags (GSettings *settings,
                                                                         const gchar *key);
extern
gboolean g_settings_set_flags (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
extern
GSettings * g_settings_get_child (GSettings *settings,
                                                                         const gchar *name);

extern
gboolean g_settings_is_writable (GSettings *settings,
                                                                         const gchar *name);

extern
void g_settings_delay (GSettings *settings);
extern
void g_settings_apply (GSettings *settings);
extern
void g_settings_revert (GSettings *settings);
extern
gboolean g_settings_get_has_unapplied (GSettings *settings);
extern
void g_settings_sync (void);
# 235 "/usr/include/glib-2.0/gio/gsettings.h"
typedef GVariant * (*GSettingsBindSetMapping) (const GValue *value,
                                                                         const GVariantType *expected_type,
                                                                         gpointer user_data);
# 251 "/usr/include/glib-2.0/gio/gsettings.h"
typedef gboolean (*GSettingsBindGetMapping) (GValue *value,
                                                                         GVariant *variant,
                                                                         gpointer user_data);
# 275 "/usr/include/glib-2.0/gio/gsettings.h"
typedef gboolean (*GSettingsGetMapping) (GVariant *value,
                                                                         gpointer *result,
                                                                         gpointer user_data);
# 297 "/usr/include/glib-2.0/gio/gsettings.h"
typedef enum
{
  G_SETTINGS_BIND_DEFAULT,
  G_SETTINGS_BIND_GET = (1<<0),
  G_SETTINGS_BIND_SET = (1<<1),
  G_SETTINGS_BIND_NO_SENSITIVITY = (1<<2),
  G_SETTINGS_BIND_GET_NO_CHANGES = (1<<3),
  G_SETTINGS_BIND_INVERT_BOOLEAN = (1<<4)
} GSettingsBindFlags;

extern
void g_settings_bind (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags);
extern
void g_settings_bind_with_mapping (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags,
                                                                         GSettingsBindGetMapping get_mapping,
                                                                         GSettingsBindSetMapping set_mapping,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy);
extern
void g_settings_bind_writable (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         gboolean inverted);
extern
void g_settings_unbind (gpointer object,
                                                                         const gchar *property);

extern
GAction * g_settings_create_action (GSettings *settings,
                                                                         const gchar *key);

extern
gpointer g_settings_get_mapped (GSettings *settings,
                                                                         const gchar *key,
                                                                         GSettingsGetMapping mapping,
                                                                         gpointer user_data);


# 136 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gsimpleaction.h" 1
# 29 "/usr/include/glib-2.0/gio/gsimpleaction.h"








extern
GType g_simple_action_get_type (void) __attribute__ ((__const__));

extern
GSimpleAction * g_simple_action_new (const gchar *name,
                                                                         const GVariantType *parameter_type);

extern
GSimpleAction * g_simple_action_new_stateful (const gchar *name,
                                                                         const GVariantType *parameter_type,
                                                                         GVariant *state);

extern
void g_simple_action_set_enabled (GSimpleAction *simple,
                                                                         gboolean enabled);

extern
void g_simple_action_set_state (GSimpleAction *simple,
                                                                         GVariant *value);

extern
void g_simple_action_set_state_hint (GSimpleAction *simple,
                                                                         GVariant *state_hint);


# 138 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h" 1
# 27 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h"
# 1 "/usr/include/glib-2.0/gio/gactiongroup.h" 1
# 28 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h" 2
# 1 "/usr/include/glib-2.0/gio/gactionmap.h" 1
# 29 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h" 2


# 44 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h"
typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;
# 54 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h"
struct _GSimpleActionGroup
{

  GObject parent_instance;

  GSimpleActionGroupPrivate *priv;
};

struct _GSimpleActionGroupClass
{

  GObjectClass parent_class;


  gpointer padding[12];
};

extern
GType g_simple_action_group_get_type (void) __attribute__ ((__const__));

extern
GSimpleActionGroup * g_simple_action_group_new (void);

__attribute__((__deprecated__("Use '" "g_action_map_lookup_action" "' instead"))) extern
GAction * g_simple_action_group_lookup (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);

__attribute__((__deprecated__("Use '" "g_action_map_add_action" "' instead"))) extern
void g_simple_action_group_insert (GSimpleActionGroup *simple,
                                                                         GAction *action);

__attribute__((__deprecated__("Use '" "g_action_map_remove_action" "' instead"))) extern
void g_simple_action_group_remove (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);

__attribute__((__deprecated__("Use '" "g_action_map_add_action_entries" "' instead"))) extern
void g_simple_action_group_add_entries (GSimpleActionGroup *simple,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);


# 139 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h" 1
# 30 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h"

# 44 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h"
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;


extern
GType g_simple_async_result_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           gpointer source_tag);
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (gnu_printf, 6, 7)));
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_from_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           const GError *error);
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_take_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GError *error);

__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple,
                                                               gpointer op_res,
                                                               GDestroyNotify destroy_op_res);
__attribute__((__deprecated__)) extern
gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);

__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple,
                                                               gssize op_res);
__attribute__((__deprecated__)) extern
gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);

__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple,
                                                               gboolean op_res);
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);



extern
void g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple,
                                                                 GCancellable *check_cancellable);
__attribute__((__deprecated__)) extern
gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple,
           gboolean handle_cancellation);
__attribute__((__deprecated__)) extern
void g_simple_async_result_complete (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple,
           GSimpleAsyncThreadFunc func,
           int io_priority,
           GCancellable *cancellable);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple,
           const GError *error);
__attribute__((__deprecated__)) extern
void g_simple_async_result_take_error (GSimpleAsyncResult *simple,
           GError *error);
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple,
           GError **dest);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_error (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (gnu_printf, 4, 5)));
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           va_list args)
           __attribute__((__format__ (gnu_printf, 4, 0)));
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_is_valid (GAsyncResult *result,
                                                            GObject *source,
                                                            gpointer source_tag);

__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_error_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        GQuark domain,
        gint code,
        const char *format,
        ...) __attribute__((__format__ (gnu_printf, 6, 7)));
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_gerror_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        const GError *error);
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_take_gerror_in_idle (GObject *object,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data,
                                                GError *error);


# 140 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleiostream.h" 1
# 30 "/usr/include/glib-2.0/gio/gsimpleiostream.h"






extern
GType g_simple_io_stream_get_type (void) __attribute__ ((__const__));

extern
GIOStream *g_simple_io_stream_new (GInputStream *input_stream,
                                                          GOutputStream *output_stream);


# 141 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimplepermission.h" 1
# 29 "/usr/include/glib-2.0/gio/gsimplepermission.h"

# 38 "/usr/include/glib-2.0/gio/gsimplepermission.h"
extern
GType g_simple_permission_get_type (void);
extern
GPermission * g_simple_permission_new (gboolean allowed);


# 142 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleproxyresolver.h" 1
# 28 "/usr/include/glib-2.0/gio/gsimpleproxyresolver.h"

# 42 "/usr/include/glib-2.0/gio/gsimpleproxyresolver.h"
typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;

struct _GSimpleProxyResolver
{
  GObject parent_instance;


  GSimpleProxyResolverPrivate *priv;
};

struct _GSimpleProxyResolverClass
{
  GObjectClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType g_simple_proxy_resolver_get_type (void) __attribute__ ((__const__));

extern
GProxyResolver *g_simple_proxy_resolver_new (const gchar *default_proxy,
                                                           gchar **ignore_hosts);

extern
void g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *default_proxy);

extern
void g_simple_proxy_resolver_set_ignore_hosts (GSimpleProxyResolver *resolver,
                                                           gchar **ignore_hosts);

extern
void g_simple_proxy_resolver_set_uri_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *uri_scheme,
                                                           const gchar *proxy);


# 143 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocket.h" 1
# 32 "/usr/include/glib-2.0/gio/gsocket.h"

# 46 "/usr/include/glib-2.0/gio/gsocket.h"
typedef struct _GSocketPrivate GSocketPrivate;
typedef struct _GSocketClass GSocketClass;

struct _GSocketClass
{
  GObjectClass parent_class;




  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};

struct _GSocket
{
  GObject parent_instance;
  GSocketPrivate *priv;
};

extern
GType g_socket_get_type (void) __attribute__ ((__const__));
extern
GSocket * g_socket_new (GSocketFamily family,
        GSocketType type,
        GSocketProtocol protocol,
        GError **error);
extern
GSocket * g_socket_new_from_fd (gint fd,
        GError **error);
extern
int g_socket_get_fd (GSocket *socket);
extern
GSocketFamily g_socket_get_family (GSocket *socket);
extern
GSocketType g_socket_get_socket_type (GSocket *socket);
extern
GSocketProtocol g_socket_get_protocol (GSocket *socket);
extern
GSocketAddress * g_socket_get_local_address (GSocket *socket,
        GError **error);
extern
GSocketAddress * g_socket_get_remote_address (GSocket *socket,
        GError **error);
extern
void g_socket_set_blocking (GSocket *socket,
        gboolean blocking);
extern
gboolean g_socket_get_blocking (GSocket *socket);
extern
void g_socket_set_keepalive (GSocket *socket,
        gboolean keepalive);
extern
gboolean g_socket_get_keepalive (GSocket *socket);
extern
gint g_socket_get_listen_backlog (GSocket *socket);
extern
void g_socket_set_listen_backlog (GSocket *socket,
        gint backlog);
extern
guint g_socket_get_timeout (GSocket *socket);
extern
void g_socket_set_timeout (GSocket *socket,
        guint timeout);

extern
guint g_socket_get_ttl (GSocket *socket);
extern
void g_socket_set_ttl (GSocket *socket,
                                                         guint ttl);

extern
gboolean g_socket_get_broadcast (GSocket *socket);
extern
void g_socket_set_broadcast (GSocket *socket,
                                                         gboolean broadcast);

extern
gboolean g_socket_get_multicast_loopback (GSocket *socket);
extern
void g_socket_set_multicast_loopback (GSocket *socket,
                                                         gboolean loopback);
extern
guint g_socket_get_multicast_ttl (GSocket *socket);
extern
void g_socket_set_multicast_ttl (GSocket *socket,
                                                         guint ttl);
extern
gboolean g_socket_is_connected (GSocket *socket);
extern
gboolean g_socket_bind (GSocket *socket,
        GSocketAddress *address,
        gboolean allow_reuse,
        GError **error);
extern
gboolean g_socket_join_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
extern
gboolean g_socket_leave_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
extern
gboolean g_socket_join_multicast_group_ssm (GSocket *socket,
                                                             GInetAddress *group,
                                                             GInetAddress *source_specific,
                                                             const gchar *iface,
                                                             GError **error);
extern
gboolean g_socket_leave_multicast_group_ssm (GSocket *socket,
                                                             GInetAddress *group,
                                                             GInetAddress *source_specific,
                                                             const gchar *iface,
                                                             GError **error);
extern
gboolean g_socket_connect (GSocket *socket,
        GSocketAddress *address,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_check_connect_result (GSocket *socket,
        GError **error);

extern
gssize g_socket_get_available_bytes (GSocket *socket);

extern
GIOCondition g_socket_condition_check (GSocket *socket,
        GIOCondition condition);
extern
gboolean g_socket_condition_wait (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_condition_timed_wait (GSocket *socket,
        GIOCondition condition,
        gint64 timeout_us,
        GCancellable *cancellable,
        GError **error);
extern
GSocket * g_socket_accept (GSocket *socket,
        GCancellable *cancellable,
        GError **error);
extern
gboolean g_socket_listen (GSocket *socket,
        GError **error);
extern
gssize g_socket_receive (GSocket *socket,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_receive_from (GSocket *socket,
        GSocketAddress **address,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send (GSocket *socket,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send_to (GSocket *socket,
        GSocketAddress *address,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_receive_message (GSocket *socket,
        GSocketAddress **address,
        GInputVector *vectors,
        gint num_vectors,
        GSocketControlMessage ***messages,
        gint *num_messages,
        gint *flags,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send_message (GSocket *socket,
        GSocketAddress *address,
        GOutputVector *vectors,
        gint num_vectors,
        GSocketControlMessage **messages,
        gint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);

extern
gint g_socket_receive_messages (GSocket *socket,
                                                         GInputMessage *messages,
                                                         guint num_messages,
                                                         gint flags,
                                                         GCancellable *cancellable,
                                                         GError **error);
extern
gint g_socket_send_messages (GSocket *socket,
        GOutputMessage *messages,
        guint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);

extern
gboolean g_socket_close (GSocket *socket,
        GError **error);
extern
gboolean g_socket_shutdown (GSocket *socket,
        gboolean shutdown_read,
        gboolean shutdown_write,
        GError **error);
extern
gboolean g_socket_is_closed (GSocket *socket);
extern
GSource * g_socket_create_source (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable);
extern
gboolean g_socket_speaks_ipv4 (GSocket *socket);
extern
GCredentials *g_socket_get_credentials (GSocket *socket,
                                                         GError **error);

extern
gssize g_socket_receive_with_blocking (GSocket *socket,
        gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
extern
gssize g_socket_send_with_blocking (GSocket *socket,
        const gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
extern
GPollableReturn g_socket_send_message_with_timeout (GSocket *socket,
          GSocketAddress *address,
          const GOutputVector *vectors,
          gint num_vectors,
          GSocketControlMessage **messages,
          gint num_messages,
          gint flags,
          gint64 timeout_us,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);
extern
gboolean g_socket_get_option (GSocket *socket,
        gint level,
        gint optname,
        gint *value,
        GError **error);
extern
gboolean g_socket_set_option (GSocket *socket,
        gint level,
        gint optname,
        gint value,
        GError **error);


# 144 "/usr/include/glib-2.0/gio/gio.h" 2


# 1 "/usr/include/glib-2.0/gio/gsocketclient.h" 1
# 32 "/usr/include/glib-2.0/gio/gsocketclient.h"

# 46 "/usr/include/glib-2.0/gio/gsocketclient.h"
typedef struct _GSocketClientPrivate GSocketClientPrivate;
typedef struct _GSocketClientClass GSocketClientClass;

struct _GSocketClientClass
{
  GObjectClass parent_class;

  void (* event) (GSocketClient *client,
    GSocketClientEvent event,
    GSocketConnectable *connectable,
    GIOStream *connection);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};

struct _GSocketClient
{
  GObject parent_instance;
  GSocketClientPrivate *priv;
};

extern
GType g_socket_client_get_type (void) __attribute__ ((__const__));

extern
GSocketClient *g_socket_client_new (void);

extern
GSocketFamily g_socket_client_get_family (GSocketClient *client);
extern
void g_socket_client_set_family (GSocketClient *client,
          GSocketFamily family);
extern
GSocketType g_socket_client_get_socket_type (GSocketClient *client);
extern
void g_socket_client_set_socket_type (GSocketClient *client,
          GSocketType type);
extern
GSocketProtocol g_socket_client_get_protocol (GSocketClient *client);
extern
void g_socket_client_set_protocol (GSocketClient *client,
          GSocketProtocol protocol);
extern
GSocketAddress *g_socket_client_get_local_address (GSocketClient *client);
extern
void g_socket_client_set_local_address (GSocketClient *client,
          GSocketAddress *address);
extern
guint g_socket_client_get_timeout (GSocketClient *client);
extern
void g_socket_client_set_timeout (GSocketClient *client,
          guint timeout);
extern
gboolean g_socket_client_get_enable_proxy (GSocketClient *client);
extern
void g_socket_client_set_enable_proxy (GSocketClient *client,
              gboolean enable);

extern
gboolean g_socket_client_get_tls (GSocketClient *client);
extern
void g_socket_client_set_tls (GSocketClient *client,
          gboolean tls);
__attribute__((__deprecated__)) extern
GTlsCertificateFlags g_socket_client_get_tls_validation_flags (GSocketClient *client);
__attribute__((__deprecated__)) extern
void g_socket_client_set_tls_validation_flags (GSocketClient *client,
          GTlsCertificateFlags flags);
extern
GProxyResolver *g_socket_client_get_proxy_resolver (GSocketClient *client);
extern
void g_socket_client_set_proxy_resolver (GSocketClient *client,
                                                                         GProxyResolver *proxy_resolver);

extern
GSocketConnection * g_socket_client_connect (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
GSocketConnection * g_socket_client_connect_to_host (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
GSocketConnection * g_socket_client_connect_to_service (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
GSocketConnection * g_socket_client_connect_to_uri (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
void g_socket_client_connect_async (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_connect_to_host_async (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_to_host_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);

extern
void g_socket_client_connect_to_service_async (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_to_service_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_connect_to_uri_async (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocketConnection * g_socket_client_connect_to_uri_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
extern
void g_socket_client_add_application_proxy (GSocketClient *client,
          const gchar *protocol);


# 147 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketconnectable.h" 1
# 28 "/usr/include/glib-2.0/gio/gsocketconnectable.h"

# 40 "/usr/include/glib-2.0/gio/gsocketconnectable.h"
typedef struct _GSocketConnectableIface GSocketConnectableIface;
# 53 "/usr/include/glib-2.0/gio/gsocketconnectable.h"
struct _GSocketConnectableIface
{
  GTypeInterface g_iface;



  GSocketAddressEnumerator * (* enumerate) (GSocketConnectable *connectable);

  GSocketAddressEnumerator * (* proxy_enumerate) (GSocketConnectable *connectable);

  gchar * (* to_string) (GSocketConnectable *connectable);
};

extern
GType g_socket_connectable_get_type (void) __attribute__ ((__const__));

extern
GSocketAddressEnumerator *g_socket_connectable_enumerate (GSocketConnectable *connectable);

extern
GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);

extern
gchar *g_socket_connectable_to_string (GSocketConnectable *connectable);


# 148 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketconnection.h" 1
# 35 "/usr/include/glib-2.0/gio/gsocketconnection.h"

# 49 "/usr/include/glib-2.0/gio/gsocketconnection.h"
typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
typedef struct _GSocketConnectionClass GSocketConnectionClass;

struct _GSocketConnectionClass
{
  GIOStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketConnection
{
  GIOStream parent_instance;
  GSocketConnectionPrivate *priv;
};

extern
GType g_socket_connection_get_type (void) __attribute__ ((__const__));

extern
gboolean g_socket_connection_is_connected (GSocketConnection *connection);
extern
gboolean g_socket_connection_connect (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GError **error);
extern
void g_socket_connection_connect_async (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
extern
gboolean g_socket_connection_connect_finish (GSocketConnection *connection,
          GAsyncResult *result,
          GError **error);

extern
GSocket *g_socket_connection_get_socket (GSocketConnection *connection);
extern
GSocketAddress *g_socket_connection_get_local_address (GSocketConnection *connection,
          GError **error);
extern
GSocketAddress *g_socket_connection_get_remote_address (GSocketConnection *connection,
          GError **error);

extern
void g_socket_connection_factory_register_type (GType g_type,
          GSocketFamily family,
          GSocketType type,
          gint protocol);
extern
GType g_socket_connection_factory_lookup_type (GSocketFamily family,
          GSocketType type,
          gint protocol_id);
extern
GSocketConnection *g_socket_connection_factory_create_connection (GSocket *socket);


# 149 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h" 1
# 30 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h"

# 47 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h"
typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
# 61 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h"
struct _GSocketControlMessageClass
{
  GObjectClass parent_class;

  gsize (* get_size) (GSocketControlMessage *message);
  int (* get_level) (GSocketControlMessage *message);
  int (* get_type) (GSocketControlMessage *message);
  void (* serialize) (GSocketControlMessage *message,
     gpointer data);
  GSocketControlMessage *(* deserialize) (int level,
       int type,
       gsize size,
       gpointer data);




  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GSocketControlMessage
{
  GObject parent_instance;
  GSocketControlMessagePrivate *priv;
};

extern
GType g_socket_control_message_get_type (void) __attribute__ ((__const__));
extern
gsize g_socket_control_message_get_size (GSocketControlMessage *message);
extern
int g_socket_control_message_get_level (GSocketControlMessage *message);
extern
int g_socket_control_message_get_msg_type (GSocketControlMessage *message);
extern
void g_socket_control_message_serialize (GSocketControlMessage *message,
             gpointer data);
extern
GSocketControlMessage *g_socket_control_message_deserialize (int level,
             int type,
             gsize size,
             gpointer data);



# 150 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketlistener.h" 1
# 35 "/usr/include/glib-2.0/gio/gsocketlistener.h"

# 49 "/usr/include/glib-2.0/gio/gsocketlistener.h"
typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
typedef struct _GSocketListenerClass GSocketListenerClass;







struct _GSocketListenerClass
{
  GObjectClass parent_class;

  void (* changed) (GSocketListener *listener);

  void (* event) (GSocketListener *listener,
                  GSocketListenerEvent event,
                  GSocket *socket);


  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketListener
{
  GObject parent_instance;
  GSocketListenerPrivate *priv;
};

extern
GType g_socket_listener_get_type (void) __attribute__ ((__const__));

extern
GSocketListener * g_socket_listener_new (void);

extern
void g_socket_listener_set_backlog (GSocketListener *listener,
          int listen_backlog);

extern
gboolean g_socket_listener_add_socket (GSocketListener *listener,
                                                                         GSocket *socket,
          GObject *source_object,
          GError **error);
extern
gboolean g_socket_listener_add_address (GSocketListener *listener,
                                                                         GSocketAddress *address,
          GSocketType type,
          GSocketProtocol protocol,
          GObject *source_object,
                                                                         GSocketAddress **effective_address,
          GError **error);
extern
gboolean g_socket_listener_add_inet_port (GSocketListener *listener,
                                                                         guint16 port,
          GObject *source_object,
          GError **error);
extern
guint16 g_socket_listener_add_any_inet_port (GSocketListener *listener,
          GObject *source_object,
          GError **error);

extern
GSocket * g_socket_listener_accept_socket (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
extern
void g_socket_listener_accept_socket_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
extern
GSocket * g_socket_listener_accept_socket_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);


extern
GSocketConnection * g_socket_listener_accept (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);

extern
void g_socket_listener_accept_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);

extern
GSocketConnection * g_socket_listener_accept_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);

extern
void g_socket_listener_close (GSocketListener *listener);


# 151 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketservice.h" 1
# 32 "/usr/include/glib-2.0/gio/gsocketservice.h"

# 46 "/usr/include/glib-2.0/gio/gsocketservice.h"
typedef struct _GSocketServicePrivate GSocketServicePrivate;
typedef struct _GSocketServiceClass GSocketServiceClass;







struct _GSocketServiceClass
{
  GSocketListenerClass parent_class;

  gboolean (* incoming) (GSocketService *service,
                         GSocketConnection *connection,
    GObject *source_object);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketService
{
  GSocketListener parent_instance;
  GSocketServicePrivate *priv;
};

extern
GType g_socket_service_get_type (void);

extern
GSocketService *g_socket_service_new (void);
extern
void g_socket_service_start (GSocketService *service);
extern
void g_socket_service_stop (GSocketService *service);
extern
gboolean g_socket_service_is_active (GSocketService *service);



# 152 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsrvtarget.h" 1
# 28 "/usr/include/glib-2.0/gio/gsrvtarget.h"


extern
GType g_srv_target_get_type (void) __attribute__ ((__const__));


extern
GSrvTarget *g_srv_target_new (const gchar *hostname,
            guint16 port,
            guint16 priority,
            guint16 weight);
extern
GSrvTarget *g_srv_target_copy (GSrvTarget *target);
extern
void g_srv_target_free (GSrvTarget *target);

extern
const gchar *g_srv_target_get_hostname (GSrvTarget *target);
extern
guint16 g_srv_target_get_port (GSrvTarget *target);
extern
guint16 g_srv_target_get_priority (GSrvTarget *target);
extern
guint16 g_srv_target_get_weight (GSrvTarget *target);

extern
GList *g_srv_target_list_sort (GList *targets);


# 153 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsubprocess.h" 1
# 30 "/usr/include/glib-2.0/gio/gsubprocess.h"






extern
GType g_subprocess_get_type (void) __attribute__ ((__const__));



extern
GSubprocess * g_subprocess_new (GSubprocessFlags flags,
                                                         GError **error,
                                                         const gchar *argv0,
                                                         ...) __attribute__((__sentinel__));
extern
GSubprocess * g_subprocess_newv (const gchar * const *argv,
                                                         GSubprocessFlags flags,
                                                         GError **error);

extern
GOutputStream * g_subprocess_get_stdin_pipe (GSubprocess *subprocess);

extern
GInputStream * g_subprocess_get_stdout_pipe (GSubprocess *subprocess);

extern
GInputStream * g_subprocess_get_stderr_pipe (GSubprocess *subprocess);

extern
const gchar * g_subprocess_get_identifier (GSubprocess *subprocess);


extern
void g_subprocess_send_signal (GSubprocess *subprocess,
                                                         gint signal_num);


extern
void g_subprocess_force_exit (GSubprocess *subprocess);

extern
gboolean g_subprocess_wait (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);

extern
void g_subprocess_wait_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

extern
gboolean g_subprocess_wait_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);

extern
gboolean g_subprocess_wait_check (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);

extern
void g_subprocess_wait_check_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

extern
gboolean g_subprocess_wait_check_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);


extern
gint g_subprocess_get_status (GSubprocess *subprocess);

extern
gboolean g_subprocess_get_successful (GSubprocess *subprocess);

extern
gboolean g_subprocess_get_if_exited (GSubprocess *subprocess);

extern
gint g_subprocess_get_exit_status (GSubprocess *subprocess);

extern
gboolean g_subprocess_get_if_signaled (GSubprocess *subprocess);

extern
gint g_subprocess_get_term_sig (GSubprocess *subprocess);

extern
gboolean g_subprocess_communicate (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);
extern
void g_subprocess_communicate_async (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

extern
gboolean g_subprocess_communicate_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);

extern
gboolean g_subprocess_communicate_utf8 (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
extern
void g_subprocess_communicate_utf8_async (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

extern
gboolean g_subprocess_communicate_utf8_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);


# 154 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsubprocesslauncher.h" 1
# 32 "/usr/include/glib-2.0/gio/gsubprocesslauncher.h"






extern
GType g_subprocess_launcher_get_type (void) __attribute__ ((__const__));

extern
GSubprocessLauncher * g_subprocess_launcher_new (GSubprocessFlags flags);

extern
GSubprocess * g_subprocess_launcher_spawn (GSubprocessLauncher *self,
                                                                         GError **error,
                                                                         const gchar *argv0,
                                                                         ...) __attribute__((__sentinel__));

extern
GSubprocess * g_subprocess_launcher_spawnv (GSubprocessLauncher *self,
                                                                         const gchar * const *argv,
                                                                         GError **error);

extern
void g_subprocess_launcher_set_environ (GSubprocessLauncher *self,
                                                                         gchar **env);

extern
void g_subprocess_launcher_setenv (GSubprocessLauncher *self,
                                                                         const gchar *variable,
                                                                         const gchar *value,
                                                                         gboolean overwrite);

extern
void g_subprocess_launcher_unsetenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);

extern
const gchar * g_subprocess_launcher_getenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);

extern
void g_subprocess_launcher_set_cwd (GSubprocessLauncher *self,
                                                                         const gchar *cwd);
extern
void g_subprocess_launcher_set_flags (GSubprocessLauncher *self,
                                                                         GSubprocessFlags flags);



extern
void g_subprocess_launcher_set_stdin_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
extern
void g_subprocess_launcher_take_stdin_fd (GSubprocessLauncher *self,
                                                                         gint fd);
extern
void g_subprocess_launcher_set_stdout_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
extern
void g_subprocess_launcher_take_stdout_fd (GSubprocessLauncher *self,
                                                                         gint fd);
extern
void g_subprocess_launcher_set_stderr_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
extern
void g_subprocess_launcher_take_stderr_fd (GSubprocessLauncher *self,
                                                                         gint fd);

extern
void g_subprocess_launcher_take_fd (GSubprocessLauncher *self,
                                                                         gint source_fd,
                                                                         gint target_fd);

extern
void g_subprocess_launcher_close (GSubprocessLauncher *self);


extern
void g_subprocess_launcher_set_child_setup (GSubprocessLauncher *self,
                                                                         GSpawnChildSetupFunc child_setup,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy_notify);



# 155 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtask.h" 1
# 28 "/usr/include/glib-2.0/gio/gtask.h"

# 37 "/usr/include/glib-2.0/gio/gtask.h"
typedef struct _GTaskClass GTaskClass;

extern
GType g_task_get_type (void) __attribute__ ((__const__));

extern
GTask *g_task_new (gpointer source_object,
                                            GCancellable *cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data);

extern
void g_task_report_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GError *error);
extern
void g_task_report_new_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GQuark domain,
                                            gint code,
                                            const char *format,
                                            ...) __attribute__((__format__ (gnu_printf, 7, 8)));

extern
void g_task_set_task_data (GTask *task,
                                            gpointer task_data,
                                            GDestroyNotify task_data_destroy);
extern
void g_task_set_priority (GTask *task,
                                            gint priority);
extern
void g_task_set_check_cancellable (GTask *task,
                                            gboolean check_cancellable);
extern
void g_task_set_source_tag (GTask *task,
                                            gpointer source_tag);
extern
void g_task_set_name (GTask *task,
                                            const gchar *name);
# 91 "/usr/include/glib-2.0/gio/gtask.h"
extern
gpointer g_task_get_source_object (GTask *task);
extern
gpointer g_task_get_task_data (GTask *task);
extern
gint g_task_get_priority (GTask *task);
extern
GMainContext *g_task_get_context (GTask *task);
extern
GCancellable *g_task_get_cancellable (GTask *task);
extern
gboolean g_task_get_check_cancellable (GTask *task);
extern
gpointer g_task_get_source_tag (GTask *task);
extern
const gchar *g_task_get_name (GTask *task);

extern
gboolean g_task_is_valid (gpointer result,
                                            gpointer source_object);


typedef void (*GTaskThreadFunc) (GTask *task,
                                           gpointer source_object,
                                           gpointer task_data,
                                           GCancellable *cancellable);
extern
void g_task_run_in_thread (GTask *task,
                                           GTaskThreadFunc task_func);
extern
void g_task_run_in_thread_sync (GTask *task,
                                           GTaskThreadFunc task_func);
extern
gboolean g_task_set_return_on_cancel (GTask *task,
                                           gboolean return_on_cancel);
extern
gboolean g_task_get_return_on_cancel (GTask *task);

extern
void g_task_attach_source (GTask *task,
                                           GSource *source,
                                           GSourceFunc callback);


extern
void g_task_return_pointer (GTask *task,
                                                gpointer result,
                                                GDestroyNotify result_destroy);
extern
void g_task_return_boolean (GTask *task,
                                                gboolean result);
extern
void g_task_return_int (GTask *task,
                                                gssize result);

extern
void g_task_return_error (GTask *task,
                                                GError *error);
extern
void g_task_return_new_error (GTask *task,
                                                GQuark domain,
                                                gint code,
                                                const char *format,
                                                ...) __attribute__((__format__ (gnu_printf, 4, 5)));
extern
void g_task_return_value (GTask *task,
                                                GValue *result);

extern
gboolean g_task_return_error_if_cancelled (GTask *task);

extern
gpointer g_task_propagate_pointer (GTask *task,
                                                GError **error);
extern
gboolean g_task_propagate_boolean (GTask *task,
                                                GError **error);
extern
gssize g_task_propagate_int (GTask *task,
                                                GError **error);
extern
gboolean g_task_propagate_value (GTask *task,
                                                GValue *value,
                                                GError **error);
extern
gboolean g_task_had_error (GTask *task);
extern
gboolean g_task_get_completed (GTask *task);


# 156 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtcpconnection.h" 1
# 30 "/usr/include/glib-2.0/gio/gtcpconnection.h"

# 44 "/usr/include/glib-2.0/gio/gtcpconnection.h"
typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
typedef struct _GTcpConnectionClass GTcpConnectionClass;

struct _GTcpConnectionClass
{
  GSocketConnectionClass parent_class;
};

struct _GTcpConnection
{
  GSocketConnection parent_instance;
  GTcpConnectionPrivate *priv;
};

extern
GType g_tcp_connection_get_type (void) __attribute__ ((__const__));

extern
void g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection,
         gboolean graceful_disconnect);
extern
gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);


# 157 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtcpwrapperconnection.h" 1
# 30 "/usr/include/glib-2.0/gio/gtcpwrapperconnection.h"

# 44 "/usr/include/glib-2.0/gio/gtcpwrapperconnection.h"
typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;

struct _GTcpWrapperConnectionClass
{
  GTcpConnectionClass parent_class;
};

struct _GTcpWrapperConnection
{
  GTcpConnection parent_instance;
  GTcpWrapperConnectionPrivate *priv;
};

extern
GType g_tcp_wrapper_connection_get_type (void) __attribute__ ((__const__));

extern
GSocketConnection *g_tcp_wrapper_connection_new (GIOStream *base_io_stream,
        GSocket *socket);
extern
GIOStream *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);


# 158 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtestdbus.h" 1
# 32 "/usr/include/glib-2.0/gio/gtestdbus.h"

# 42 "/usr/include/glib-2.0/gio/gtestdbus.h"
extern
GType g_test_dbus_get_type (void) __attribute__ ((__const__));

extern
GTestDBus * g_test_dbus_new (GTestDBusFlags flags);

extern
GTestDBusFlags g_test_dbus_get_flags (GTestDBus *self);

extern
const gchar * g_test_dbus_get_bus_address (GTestDBus *self);

extern
void g_test_dbus_add_service_dir (GTestDBus *self,
                                            const gchar *path);

extern
void g_test_dbus_up (GTestDBus *self);

extern
void g_test_dbus_stop (GTestDBus *self);

extern
void g_test_dbus_down (GTestDBus *self);

extern
void g_test_dbus_unset (void);


# 159 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gthemedicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gthemedicon.h"

# 44 "/usr/include/glib-2.0/gio/gthemedicon.h"
typedef struct _GThemedIconClass GThemedIconClass;

extern
GType g_themed_icon_get_type (void) __attribute__ ((__const__));

extern
GIcon *g_themed_icon_new (const char *iconname);
extern
GIcon *g_themed_icon_new_with_default_fallbacks (const char *iconname);
extern
GIcon *g_themed_icon_new_from_names (char **iconnames,
                                                 int len);
extern
void g_themed_icon_prepend_name (GThemedIcon *icon,
                                                 const char *iconname);
extern
void g_themed_icon_append_name (GThemedIcon *icon,
                                                 const char *iconname);

extern
const gchar* const * g_themed_icon_get_names (GThemedIcon *icon);


# 160 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gthreadedsocketservice.h" 1
# 32 "/usr/include/glib-2.0/gio/gthreadedsocketservice.h"

# 49 "/usr/include/glib-2.0/gio/gthreadedsocketservice.h"
typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate;
typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;

struct _GThreadedSocketServiceClass
{
  GSocketServiceClass parent_class;

  gboolean (* run) (GThreadedSocketService *service,
                    GSocketConnection *connection,
                    GObject *source_object);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GThreadedSocketService
{
  GSocketService parent_instance;
  GThreadedSocketServicePrivate *priv;
};

extern
GType g_threaded_socket_service_get_type (void);
extern
GSocketService * g_threaded_socket_service_new (int max_threads);


# 161 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsbackend.h" 1
# 29 "/usr/include/glib-2.0/gio/gtlsbackend.h"

# 44 "/usr/include/glib-2.0/gio/gtlsbackend.h"
typedef struct _GTlsBackend GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;
# 64 "/usr/include/glib-2.0/gio/gtlsbackend.h"
struct _GTlsBackendInterface
{
  GTypeInterface g_iface;


  gboolean ( *supports_tls) (GTlsBackend *backend);
  GType ( *get_certificate_type) (void);
  GType ( *get_client_connection_type) (void);
  GType ( *get_server_connection_type) (void);
  GType ( *get_file_database_type) (void);
  GTlsDatabase * ( *get_default_database) (GTlsBackend *backend);
  gboolean ( *supports_dtls) (GTlsBackend *backend);
  GType ( *get_dtls_client_connection_type) (void);
  GType ( *get_dtls_server_connection_type) (void);
};

extern
GType g_tls_backend_get_type (void) __attribute__ ((__const__));

extern
GTlsBackend * g_tls_backend_get_default (void);

extern
GTlsDatabase * g_tls_backend_get_default_database (GTlsBackend *backend);
extern
void g_tls_backend_set_default_database (GTlsBackend *backend,
                                                         GTlsDatabase *database);

extern
gboolean g_tls_backend_supports_tls (GTlsBackend *backend);
extern
gboolean g_tls_backend_supports_dtls (GTlsBackend *backend);

extern
GType g_tls_backend_get_certificate_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_client_connection_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_server_connection_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_file_database_type (GTlsBackend *backend);

extern
GType g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);
extern
GType g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);


# 162 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlscertificate.h" 1
# 28 "/usr/include/glib-2.0/gio/gtlscertificate.h"

# 37 "/usr/include/glib-2.0/gio/gtlscertificate.h"
typedef struct _GTlsCertificateClass GTlsCertificateClass;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;

struct _GTlsCertificate {
  GObject parent_instance;

  GTlsCertificatePrivate *priv;
};

struct _GTlsCertificateClass
{
  GObjectClass parent_class;

  GTlsCertificateFlags (* verify) (GTlsCertificate *cert,
        GSocketConnectable *identity,
        GTlsCertificate *trusted_ca);



  gpointer padding[8];
};

extern
GType g_tls_certificate_get_type (void) __attribute__ ((__const__));

extern
GTlsCertificate *g_tls_certificate_new_from_pem (const gchar *data,
           gssize length,
           GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_pkcs12 (const guint8 *data,
                                                              gsize length,
                                                              const gchar *password,
                                                              GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_file_with_password (const gchar *file,
                                                                     const gchar *password,
                                                                     GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_file (const gchar *file,
           GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_files (const gchar *cert_file,
           const gchar *key_file,
           GError **error);
extern
GTlsCertificate *g_tls_certificate_new_from_pkcs11_uris (const gchar *pkcs11_uri,
                                                              const gchar *private_key_pkcs11_uri,
                                                              GError **error);

extern
GList *g_tls_certificate_list_new_from_file (const gchar *file,
           GError **error);

extern
GTlsCertificate *g_tls_certificate_get_issuer (GTlsCertificate *cert);

extern
GTlsCertificateFlags g_tls_certificate_verify (GTlsCertificate *cert,
           GSocketConnectable *identity,
           GTlsCertificate *trusted_ca);

extern
gboolean g_tls_certificate_is_same (GTlsCertificate *cert_one,
                                                            GTlsCertificate *cert_two);

extern
GDateTime *g_tls_certificate_get_not_valid_before (GTlsCertificate *cert);

extern
GDateTime *g_tls_certificate_get_not_valid_after (GTlsCertificate *cert);

extern
gchar *g_tls_certificate_get_subject_name (GTlsCertificate *cert);

extern
gchar *g_tls_certificate_get_issuer_name (GTlsCertificate *cert);

extern
GPtrArray *g_tls_certificate_get_dns_names (GTlsCertificate *cert);

extern
GPtrArray *g_tls_certificate_get_ip_addresses (GTlsCertificate *cert);


# 163 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsclientconnection.h" 1
# 26 "/usr/include/glib-2.0/gio/gtlsclientconnection.h"
# 1 "/usr/include/glib-2.0/gio/gtlsconnection.h" 1
# 28 "/usr/include/glib-2.0/gio/gtlsconnection.h"

# 37 "/usr/include/glib-2.0/gio/gtlsconnection.h"
typedef struct _GTlsConnectionClass GTlsConnectionClass;
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;

struct _GTlsConnection {
  GIOStream parent_instance;

  GTlsConnectionPrivate *priv;
};
# 60 "/usr/include/glib-2.0/gio/gtlsconnection.h"
struct _GTlsConnectionClass
{
  GIOStreamClass parent_class;


  gboolean ( *accept_certificate) (GTlsConnection *connection,
         GTlsCertificate *peer_cert,
         GTlsCertificateFlags errors);


  gboolean ( *handshake ) (GTlsConnection *conn,
      GCancellable *cancellable,
      GError **error);

  void ( *handshake_async ) (GTlsConnection *conn,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
  gboolean ( *handshake_finish ) (GTlsConnection *conn,
      GAsyncResult *result,
      GError **error);


# 83 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic push
# 83 "/usr/include/glib-2.0/gio/gtlsconnection.h"

# 83 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/glib-2.0/gio/gtlsconnection.h"

  gboolean ( *get_binding_data) (GTlsConnection *conn,
                                  GTlsChannelBindingType type,
                                  GByteArray *data,
                                  GError **error);

# 88 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic pop
# 88 "/usr/include/glib-2.0/gio/gtlsconnection.h"


  const gchar *(*get_negotiated_protocol) (GTlsConnection *conn);



  gpointer padding[6];
};

extern
GType g_tls_connection_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
void g_tls_connection_set_use_system_certdb (GTlsConnection *conn,
                                                                    gboolean use_system_certdb);
__attribute__((__deprecated__)) extern
gboolean g_tls_connection_get_use_system_certdb (GTlsConnection *conn);

extern
void g_tls_connection_set_database (GTlsConnection *conn,
            GTlsDatabase *database);
extern
GTlsDatabase * g_tls_connection_get_database (GTlsConnection *conn);

extern
void g_tls_connection_set_certificate (GTlsConnection *conn,
                                                                    GTlsCertificate *certificate);
extern
GTlsCertificate *g_tls_connection_get_certificate (GTlsConnection *conn);

extern
void g_tls_connection_set_interaction (GTlsConnection *conn,
                                                                    GTlsInteraction *interaction);
extern
GTlsInteraction * g_tls_connection_get_interaction (GTlsConnection *conn);

extern
GTlsCertificate *g_tls_connection_get_peer_certificate (GTlsConnection *conn);
extern
GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors (GTlsConnection *conn);

extern
void g_tls_connection_set_require_close_notify (GTlsConnection *conn,
            gboolean require_close_notify);
extern
gboolean g_tls_connection_get_require_close_notify (GTlsConnection *conn);


# 135 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic push
# 135 "/usr/include/glib-2.0/gio/gtlsconnection.h"

# 135 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 135 "/usr/include/glib-2.0/gio/gtlsconnection.h"

__attribute__((__deprecated__)) extern
void g_tls_connection_set_rehandshake_mode (GTlsConnection *conn,
            GTlsRehandshakeMode mode);
__attribute__((__deprecated__)) extern
GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode (GTlsConnection *conn);

# 141 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic pop
# 141 "/usr/include/glib-2.0/gio/gtlsconnection.h"


extern
void g_tls_connection_set_advertised_protocols (GTlsConnection *conn,
                                                                    const gchar * const *protocols);

extern
const gchar * g_tls_connection_get_negotiated_protocol (GTlsConnection *conn);


# 150 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic push
# 150 "/usr/include/glib-2.0/gio/gtlsconnection.h"

# 150 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 150 "/usr/include/glib-2.0/gio/gtlsconnection.h"

extern
gboolean g_tls_connection_get_channel_binding_data (GTlsConnection *conn,
                                                                    GTlsChannelBindingType type,
                                                                    GByteArray *data,
                                                                    GError **error);

# 156 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma GCC diagnostic pop
# 156 "/usr/include/glib-2.0/gio/gtlsconnection.h"


extern
gboolean g_tls_connection_handshake (GTlsConnection *conn,
            GCancellable *cancellable,
            GError **error);

extern
void g_tls_connection_handshake_async (GTlsConnection *conn,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
extern
gboolean g_tls_connection_handshake_finish (GTlsConnection *conn,
            GAsyncResult *result,
            GError **error);

extern
GTlsProtocolVersion g_tls_connection_get_protocol_version (GTlsConnection *conn);

extern
gchar * g_tls_connection_get_ciphersuite_name (GTlsConnection *conn);
# 188 "/usr/include/glib-2.0/gio/gtlsconnection.h"
extern
GQuark g_tls_error_quark (void);
# 201 "/usr/include/glib-2.0/gio/gtlsconnection.h"
extern
GQuark g_tls_channel_binding_error_quark (void);


extern
gboolean g_tls_connection_emit_accept_certificate (GTlsConnection *conn,
            GTlsCertificate *peer_cert,
            GTlsCertificateFlags errors);


# 27 "/usr/include/glib-2.0/gio/gtlsclientconnection.h" 2








typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;
# 46 "/usr/include/glib-2.0/gio/gtlsclientconnection.h"
struct _GTlsClientConnectionInterface
{
  GTypeInterface g_iface;

  void ( *copy_session_state ) (GTlsClientConnection *conn,
                                        GTlsClientConnection *source);
};

extern
GType g_tls_client_connection_get_type (void) __attribute__ ((__const__));

extern
GIOStream * g_tls_client_connection_new (GIOStream *base_io_stream,
            GSocketConnectable *server_identity,
            GError **error);

__attribute__((__deprecated__)) extern
GTlsCertificateFlags g_tls_client_connection_get_validation_flags (GTlsClientConnection *conn);
__attribute__((__deprecated__)) extern
void g_tls_client_connection_set_validation_flags (GTlsClientConnection *conn,
            GTlsCertificateFlags flags);
extern
GSocketConnectable *g_tls_client_connection_get_server_identity (GTlsClientConnection *conn);
extern
void g_tls_client_connection_set_server_identity (GTlsClientConnection *conn,
            GSocketConnectable *identity);
__attribute__((__deprecated__)) extern
gboolean g_tls_client_connection_get_use_ssl3 (GTlsClientConnection *conn);
__attribute__((__deprecated__)) extern
void g_tls_client_connection_set_use_ssl3 (GTlsClientConnection *conn,
            gboolean use_ssl3);
extern
GList * g_tls_client_connection_get_accepted_cas (GTlsClientConnection *conn);

extern
void g_tls_client_connection_copy_session_state (GTlsClientConnection *conn,
                                                                    GTlsClientConnection *source);


# 164 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gtlsdatabase.h" 1
# 30 "/usr/include/glib-2.0/gio/gtlsdatabase.h"

# 42 "/usr/include/glib-2.0/gio/gtlsdatabase.h"
typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;

struct _GTlsDatabase
{
  GObject parent_instance;

  GTlsDatabasePrivate *priv;
};

struct _GTlsDatabaseClass
{
  GObjectClass parent_class;



  GTlsCertificateFlags (*verify_chain) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*verify_chain_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GTlsCertificateFlags (*verify_chain_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);

  gchar* (*create_certificate_handle) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate);

  GTlsCertificate* (*lookup_certificate_for_handle) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*lookup_certificate_for_handle_async) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GTlsCertificate* (*lookup_certificate_for_handle_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);

  GTlsCertificate* (*lookup_certificate_issuer) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*lookup_certificate_issuer_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GTlsCertificate* (*lookup_certificate_issuer_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);

  GList* (*lookup_certificates_issued_by) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*lookup_certificates_issued_by_async) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GList* (*lookup_certificates_issued_by_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);



  gpointer padding[16];
};

extern
GType g_tls_database_get_type (void) __attribute__ ((__const__));

extern
GTlsCertificateFlags g_tls_database_verify_chain (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

extern
void g_tls_database_verify_chain_async (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);

extern
GTlsCertificateFlags g_tls_database_verify_chain_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);

extern
gchar* g_tls_database_create_certificate_handle (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate);

extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

extern
void g_tls_database_lookup_certificate_for_handle_async (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);

extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);

extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

extern
void g_tls_database_lookup_certificate_issuer_async (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);

extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);

extern
GList* g_tls_database_lookup_certificates_issued_by (GTlsDatabase *self,
                                                                           GByteArray *issuer_raw_dn,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

extern
void g_tls_database_lookup_certificates_issued_by_async (GTlsDatabase *self,
                                                                            GByteArray *issuer_raw_dn,
                                                                            GTlsInteraction *interaction,
                                                                            GTlsDatabaseLookupFlags flags,
                                                                            GCancellable *cancellable,
                                                                            GAsyncReadyCallback callback,
                                                                            gpointer user_data);

extern
GList* g_tls_database_lookup_certificates_issued_by_finish (GTlsDatabase *self,
                                                                            GAsyncResult *result,
                                                                            GError **error);


# 166 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsfiledatabase.h" 1
# 24 "/usr/include/glib-2.0/gio/gtlsfiledatabase.h"







typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
# 40 "/usr/include/glib-2.0/gio/gtlsfiledatabase.h"
struct _GTlsFileDatabaseInterface
{
  GTypeInterface g_iface;



  gpointer padding[8];
};

extern
GType g_tls_file_database_get_type (void) __attribute__ ((__const__));

extern
GTlsDatabase* g_tls_file_database_new (const gchar *anchors,
                                                                        GError **error);


# 167 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsinteraction.h" 1
# 30 "/usr/include/glib-2.0/gio/gtlsinteraction.h"

# 39 "/usr/include/glib-2.0/gio/gtlsinteraction.h"
typedef struct _GTlsInteractionClass GTlsInteractionClass;
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;

struct _GTlsInteraction
{

  GObject parent_instance;
  GTlsInteractionPrivate *priv;
};

struct _GTlsInteractionClass
{

  GObjectClass parent_class;


  GTlsInteractionResult (* ask_password) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GError **error);

  void (* ask_password_async) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);

  GTlsInteractionResult (* ask_password_finish) (GTlsInteraction *interaction,
                                                  GAsyncResult *result,
                                                  GError **error);

  GTlsInteractionResult (* request_certificate) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GError **error);

  void (* request_certificate_async) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

  GTlsInteractionResult (* request_certificate_finish) (GTlsInteraction *interaction,
                                                         GAsyncResult *result,
                                                         GError **error);



  gpointer padding[21];
};

extern
GType g_tls_interaction_get_type (void) __attribute__ ((__const__));

extern
GTlsInteractionResult g_tls_interaction_invoke_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);

extern
GTlsInteractionResult g_tls_interaction_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);

extern
void g_tls_interaction_ask_password_async (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GAsyncReadyCallback callback,
                                                              gpointer user_data);

extern
GTlsInteractionResult g_tls_interaction_ask_password_finish (GTlsInteraction *interaction,
                                                              GAsyncResult *result,
                                                              GError **error);

extern
GTlsInteractionResult g_tls_interaction_invoke_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

extern
GTlsInteractionResult g_tls_interaction_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

extern
void g_tls_interaction_request_certificate_async (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);

extern
GTlsInteractionResult g_tls_interaction_request_certificate_finish (GTlsInteraction *interaction,
                                                                     GAsyncResult *result,
                                                                     GError **error);


# 168 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlspassword.h" 1
# 30 "/usr/include/glib-2.0/gio/gtlspassword.h"

# 39 "/usr/include/glib-2.0/gio/gtlspassword.h"
typedef struct _GTlsPasswordClass GTlsPasswordClass;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;

struct _GTlsPassword
{
  GObject parent_instance;

  GTlsPasswordPrivate *priv;
};
# 58 "/usr/include/glib-2.0/gio/gtlspassword.h"
struct _GTlsPasswordClass
{
  GObjectClass parent_class;



  const guchar * ( *get_value) (GTlsPassword *password,
                                              gsize *length);

  void ( *set_value) (GTlsPassword *password,
                                              guchar *value,
                                              gssize length,
                                              GDestroyNotify destroy);

  const gchar* ( *get_default_warning) (GTlsPassword *password);



  gpointer padding[4];
};

extern
GType g_tls_password_get_type (void) __attribute__ ((__const__));

extern
GTlsPassword * g_tls_password_new (GTlsPasswordFlags flags,
                                                      const gchar *description);

extern
const guchar * g_tls_password_get_value (GTlsPassword *password,
                                                      gsize *length);
extern
void g_tls_password_set_value (GTlsPassword *password,
                                                      const guchar *value,
                                                      gssize length);
extern
void g_tls_password_set_value_full (GTlsPassword *password,
                                                      guchar *value,
                                                      gssize length,
                                                      GDestroyNotify destroy);

extern
GTlsPasswordFlags g_tls_password_get_flags (GTlsPassword *password);
extern
void g_tls_password_set_flags (GTlsPassword *password,
                                                      GTlsPasswordFlags flags);

extern
const gchar* g_tls_password_get_description (GTlsPassword *password);
extern
void g_tls_password_set_description (GTlsPassword *password,
                                                      const gchar *description);

extern
const gchar * g_tls_password_get_warning (GTlsPassword *password);
extern
void g_tls_password_set_warning (GTlsPassword *password,
                                                      const gchar *warning);


# 169 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsserverconnection.h" 1
# 28 "/usr/include/glib-2.0/gio/gtlsserverconnection.h"

# 43 "/usr/include/glib-2.0/gio/gtlsserverconnection.h"
typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;
# 53 "/usr/include/glib-2.0/gio/gtlsserverconnection.h"
struct _GTlsServerConnectionInterface
{
  GTypeInterface g_iface;

};

extern
GType g_tls_server_connection_get_type (void) __attribute__ ((__const__));

extern
GIOStream * g_tls_server_connection_new (GIOStream *base_io_stream,
         GTlsCertificate *certificate,
         GError **error);


# 170 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvfs.h" 1
# 30 "/usr/include/glib-2.0/gio/gvfs.h"

# 57 "/usr/include/glib-2.0/gio/gvfs.h"
typedef GFile * (* GVfsFileLookupFunc) (GVfs *vfs,
                                        const char *identifier,
                                        gpointer user_data);
# 74 "/usr/include/glib-2.0/gio/gvfs.h"
typedef struct _GVfsClass GVfsClass;

struct _GVfs
{
  GObject parent_instance;
};

struct _GVfsClass
{
  GObjectClass parent_class;



  gboolean (* is_active) (GVfs *vfs);
  GFile * (* get_file_for_path) (GVfs *vfs,
                                                       const char *path);
  GFile * (* get_file_for_uri) (GVfs *vfs,
                                                       const char *uri);
  const gchar * const * (* get_supported_uri_schemes) (GVfs *vfs);
  GFile * (* parse_name) (GVfs *vfs,
                                                       const char *parse_name);


  void (* local_file_add_info) (GVfs *vfs,
             const char *filename,
             guint64 device,
             GFileAttributeMatcher *attribute_matcher,
             GFileInfo *info,
             GCancellable *cancellable,
             gpointer *extra_data,
             GDestroyNotify *free_extra_data);
  void (* add_writable_namespaces) (GVfs *vfs,
             GFileAttributeInfoList *list);
  gboolean (* local_file_set_attributes) (GVfs *vfs,
             const char *filename,
             GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
             GError **error);
  void (* local_file_removed) (GVfs *vfs,
             const char *filename);
  void (* local_file_moved) (GVfs *vfs,
             const char *source,
             const char *dest);
  GIcon * (* deserialize_icon) (GVfs *vfs,
                                                       GVariant *value);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

extern
GType g_vfs_get_type (void) __attribute__ ((__const__));

extern
gboolean g_vfs_is_active (GVfs *vfs);
extern
GFile * g_vfs_get_file_for_path (GVfs *vfs,
                                                       const char *path);
extern
GFile * g_vfs_get_file_for_uri (GVfs *vfs,
                                                       const char *uri);
extern
const gchar* const * g_vfs_get_supported_uri_schemes (GVfs *vfs);

extern
GFile * g_vfs_parse_name (GVfs *vfs,
                                                       const char *parse_name);

extern
GVfs * g_vfs_get_default (void);
extern
GVfs * g_vfs_get_local (void);

extern
gboolean g_vfs_register_uri_scheme (GVfs *vfs,
                                                       const char *scheme,
                                                       GVfsFileLookupFunc uri_func,
                                                       gpointer uri_data,
                                                       GDestroyNotify uri_destroy,
                                                       GVfsFileLookupFunc parse_name_func,
                                                       gpointer parse_name_data,
                                                       GDestroyNotify parse_name_destroy);
extern
gboolean g_vfs_unregister_uri_scheme (GVfs *vfs,
                                                       const char *scheme);



# 171 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvolume.h" 1
# 31 "/usr/include/glib-2.0/gio/gvolume.h"

# 124 "/usr/include/glib-2.0/gio/gvolume.h"
typedef struct _GVolumeIface GVolumeIface;

struct _GVolumeIface
{
  GTypeInterface g_iface;



  void (* changed) (GVolume *volume);
  void (* removed) (GVolume *volume);



  char * (* get_name) (GVolume *volume);
  GIcon * (* get_icon) (GVolume *volume);
  char * (* get_uuid) (GVolume *volume);
  GDrive * (* get_drive) (GVolume *volume);
  GMount * (* get_mount) (GVolume *volume);
  gboolean (* can_mount) (GVolume *volume);
  gboolean (* can_eject) (GVolume *volume);
  void (* mount_fn) (GVolume *volume,
                                         GMountMountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* mount_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  void (* eject) (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);

  char * (* get_identifier) (GVolume *volume,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GVolume *volume);

  gboolean (* should_automount) (GVolume *volume);

  GFile * (* get_activation_root) (GVolume *volume);

  void (* eject_with_operation) (GVolume *volume,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GVolume *volume,
                                             GAsyncResult *result,
                                             GError **error);

  const gchar * (* get_sort_key) (GVolume *volume);
  GIcon * (* get_symbolic_icon) (GVolume *volume);
};

extern
GType g_volume_get_type (void) __attribute__ ((__const__));

extern
char * g_volume_get_name (GVolume *volume);
extern
GIcon * g_volume_get_icon (GVolume *volume);
extern
GIcon * g_volume_get_symbolic_icon (GVolume *volume);
extern
char * g_volume_get_uuid (GVolume *volume);
extern
GDrive * g_volume_get_drive (GVolume *volume);
extern
GMount * g_volume_get_mount (GVolume *volume);
extern
gboolean g_volume_can_mount (GVolume *volume);
extern
gboolean g_volume_can_eject (GVolume *volume);
extern
gboolean g_volume_should_automount (GVolume *volume);
extern
void g_volume_mount (GVolume *volume,
      GMountMountFlags flags,
      GMountOperation *mount_operation,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
extern
gboolean g_volume_mount_finish (GVolume *volume,
      GAsyncResult *result,
      GError **error);
__attribute__((__deprecated__("Use '" "g_volume_eject_with_operation" "' instead"))) extern
void g_volume_eject (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);

__attribute__((__deprecated__("Use '" "g_volume_eject_with_operation_finish" "' instead"))) extern
gboolean g_volume_eject_finish (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
extern
char * g_volume_get_identifier (GVolume *volume,
      const char *kind);
extern
char ** g_volume_enumerate_identifiers (GVolume *volume);

extern
GFile * g_volume_get_activation_root (GVolume *volume);

extern
void g_volume_eject_with_operation (GVolume *volume,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
extern
gboolean g_volume_eject_with_operation_finish (GVolume *volume,
                                               GAsyncResult *result,
                                               GError **error);

extern
const gchar *g_volume_get_sort_key (GVolume *volume);


# 172 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gzlibcompressor.h" 1
# 31 "/usr/include/glib-2.0/gio/gzlibcompressor.h"

# 40 "/usr/include/glib-2.0/gio/gzlibcompressor.h"
typedef struct _GZlibCompressorClass GZlibCompressorClass;

struct _GZlibCompressorClass
{
  GObjectClass parent_class;
};

extern
GType g_zlib_compressor_get_type (void) __attribute__ ((__const__));

extern
GZlibCompressor *g_zlib_compressor_new (GZlibCompressorFormat format,
     int level);

extern
GFileInfo *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);
extern
void g_zlib_compressor_set_file_info (GZlibCompressor *compressor,
                                                  GFileInfo *file_info);


# 174 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gzlibdecompressor.h" 1
# 31 "/usr/include/glib-2.0/gio/gzlibdecompressor.h"

# 40 "/usr/include/glib-2.0/gio/gzlibdecompressor.h"
typedef struct _GZlibDecompressorClass GZlibDecompressorClass;

struct _GZlibDecompressorClass
{
  GObjectClass parent_class;
};

extern
GType g_zlib_decompressor_get_type (void) __attribute__ ((__const__));

extern
GZlibDecompressor *g_zlib_decompressor_new (GZlibCompressorFormat format);

extern
GFileInfo *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);


# 175 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gio-autocleanups.h" 1
# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
typedef GAction *GAction_autoptr; typedef GList *GAction_listautoptr; typedef GSList *GAction_slistautoptr; typedef GQueue *GAction_queueautoptr;
# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAction (GAction *_ptr) { if (_ptr) (g_object_unref) ((GAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAction (GAction **_ptr) { glib_autoptr_clear_GAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 24 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GActionMap *GActionMap_autoptr; typedef GList *GActionMap_listautoptr; typedef GSList *GActionMap_slistautoptr; typedef GQueue *GActionMap_queueautoptr;
# 25 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 25 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 25 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 25 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GActionMap (GActionMap *_ptr) { if (_ptr) (g_object_unref) ((GActionMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GActionMap (GActionMap **_ptr) { glib_autoptr_clear_GActionMap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GActionMap (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GActionMap (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GActionMap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 25 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 25 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GAppInfo *GAppInfo_autoptr; typedef GList *GAppInfo_listautoptr; typedef GSList *GAppInfo_slistautoptr; typedef GQueue *GAppInfo_queueautoptr;
# 26 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 26 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 26 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 26 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppInfo (GAppInfo *_ptr) { if (_ptr) (g_object_unref) ((GAppInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppInfo (GAppInfo **_ptr) { glib_autoptr_clear_GAppInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 26 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 26 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GAppLaunchContext *GAppLaunchContext_autoptr; typedef GList *GAppLaunchContext_listautoptr; typedef GSList *GAppLaunchContext_slistautoptr; typedef GQueue *GAppLaunchContext_queueautoptr;
# 27 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 27 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 27 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 27 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppLaunchContext (GAppLaunchContext *_ptr) { if (_ptr) (g_object_unref) ((GAppLaunchContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppLaunchContext (GAppLaunchContext **_ptr) { glib_autoptr_clear_GAppLaunchContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppLaunchContext (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppLaunchContext (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppLaunchContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 27 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 27 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GAppInfoMonitor *GAppInfoMonitor_autoptr; typedef GList *GAppInfoMonitor_listautoptr; typedef GSList *GAppInfoMonitor_slistautoptr; typedef GQueue *GAppInfoMonitor_queueautoptr;
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppInfoMonitor (GAppInfoMonitor *_ptr) { if (_ptr) (g_object_unref) ((GAppInfoMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppInfoMonitor (GAppInfoMonitor **_ptr) { glib_autoptr_clear_GAppInfoMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppInfoMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppInfoMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppInfoMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GApplicationCommandLine *GApplicationCommandLine_autoptr; typedef GList *GApplicationCommandLine_listautoptr; typedef GSList *GApplicationCommandLine_slistautoptr; typedef GQueue *GApplicationCommandLine_queueautoptr;
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GApplicationCommandLine (GApplicationCommandLine *_ptr) { if (_ptr) (g_object_unref) ((GApplicationCommandLine *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GApplicationCommandLine (GApplicationCommandLine **_ptr) { glib_autoptr_clear_GApplicationCommandLine (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GApplicationCommandLine (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GApplicationCommandLine (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GApplicationCommandLine (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GApplication *GApplication_autoptr; typedef GList *GApplication_listautoptr; typedef GSList *GApplication_slistautoptr; typedef GQueue *GApplication_queueautoptr;
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GApplication (GApplication *_ptr) { if (_ptr) (g_object_unref) ((GApplication *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GApplication (GApplication **_ptr) { glib_autoptr_clear_GApplication (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GApplication (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GApplication (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GApplication (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GAsyncInitable *GAsyncInitable_autoptr; typedef GList *GAsyncInitable_listautoptr; typedef GSList *GAsyncInitable_slistautoptr; typedef GQueue *GAsyncInitable_queueautoptr;
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncInitable (GAsyncInitable *_ptr) { if (_ptr) (g_object_unref) ((GAsyncInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncInitable (GAsyncInitable **_ptr) { glib_autoptr_clear_GAsyncInitable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncInitable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncInitable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncInitable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GAsyncResult *GAsyncResult_autoptr; typedef GList *GAsyncResult_listautoptr; typedef GSList *GAsyncResult_slistautoptr; typedef GQueue *GAsyncResult_queueautoptr;
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncResult (GAsyncResult *_ptr) { if (_ptr) (g_object_unref) ((GAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncResult (GAsyncResult **_ptr) { glib_autoptr_clear_GAsyncResult (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncResult (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncResult (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncResult (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GBufferedInputStream *GBufferedInputStream_autoptr; typedef GList *GBufferedInputStream_listautoptr; typedef GSList *GBufferedInputStream_slistautoptr; typedef GQueue *GBufferedInputStream_queueautoptr;
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBufferedInputStream (GBufferedInputStream *_ptr) { if (_ptr) (g_object_unref) ((GBufferedInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBufferedInputStream (GBufferedInputStream **_ptr) { glib_autoptr_clear_GBufferedInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBufferedInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBufferedInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBufferedInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GBufferedOutputStream *GBufferedOutputStream_autoptr; typedef GList *GBufferedOutputStream_listautoptr; typedef GSList *GBufferedOutputStream_slistautoptr; typedef GQueue *GBufferedOutputStream_queueautoptr;
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBufferedOutputStream (GBufferedOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GBufferedOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBufferedOutputStream (GBufferedOutputStream **_ptr) { glib_autoptr_clear_GBufferedOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBufferedOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBufferedOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBufferedOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GBytesIcon *GBytesIcon_autoptr; typedef GList *GBytesIcon_listautoptr; typedef GSList *GBytesIcon_slistautoptr; typedef GQueue *GBytesIcon_queueautoptr;
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBytesIcon (GBytesIcon *_ptr) { if (_ptr) (g_object_unref) ((GBytesIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBytesIcon (GBytesIcon **_ptr) { glib_autoptr_clear_GBytesIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBytesIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBytesIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBytesIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GCancellable *GCancellable_autoptr; typedef GList *GCancellable_listautoptr; typedef GSList *GCancellable_slistautoptr; typedef GQueue *GCancellable_queueautoptr;
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCancellable (GCancellable *_ptr) { if (_ptr) (g_object_unref) ((GCancellable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCancellable (GCancellable **_ptr) { glib_autoptr_clear_GCancellable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCancellable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCancellable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCancellable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GCharsetConverter *GCharsetConverter_autoptr; typedef GList *GCharsetConverter_listautoptr; typedef GSList *GCharsetConverter_slistautoptr; typedef GQueue *GCharsetConverter_queueautoptr;
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCharsetConverter (GCharsetConverter *_ptr) { if (_ptr) (g_object_unref) ((GCharsetConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCharsetConverter (GCharsetConverter **_ptr) { glib_autoptr_clear_GCharsetConverter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCharsetConverter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCharsetConverter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCharsetConverter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GConverter *GConverter_autoptr; typedef GList *GConverter_listautoptr; typedef GSList *GConverter_slistautoptr; typedef GQueue *GConverter_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverter (GConverter *_ptr) { if (_ptr) (g_object_unref) ((GConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverter (GConverter **_ptr) { glib_autoptr_clear_GConverter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GConverterInputStream *GConverterInputStream_autoptr; typedef GList *GConverterInputStream_listautoptr; typedef GSList *GConverterInputStream_slistautoptr; typedef GQueue *GConverterInputStream_queueautoptr;
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverterInputStream (GConverterInputStream *_ptr) { if (_ptr) (g_object_unref) ((GConverterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverterInputStream (GConverterInputStream **_ptr) { glib_autoptr_clear_GConverterInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverterInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverterInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverterInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GConverterOutputStream *GConverterOutputStream_autoptr; typedef GList *GConverterOutputStream_listautoptr; typedef GSList *GConverterOutputStream_slistautoptr; typedef GQueue *GConverterOutputStream_queueautoptr;
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverterOutputStream (GConverterOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GConverterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverterOutputStream (GConverterOutputStream **_ptr) { glib_autoptr_clear_GConverterOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverterOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverterOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverterOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GCredentials *GCredentials_autoptr; typedef GList *GCredentials_listautoptr; typedef GSList *GCredentials_slistautoptr; typedef GQueue *GCredentials_queueautoptr;
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCredentials (GCredentials *_ptr) { if (_ptr) (g_object_unref) ((GCredentials *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCredentials (GCredentials **_ptr) { glib_autoptr_clear_GCredentials (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCredentials (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCredentials (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCredentials (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDatagramBased *GDatagramBased_autoptr; typedef GList *GDatagramBased_listautoptr; typedef GSList *GDatagramBased_slistautoptr; typedef GQueue *GDatagramBased_queueautoptr;
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDatagramBased (GDatagramBased *_ptr) { if (_ptr) (g_object_unref) ((GDatagramBased *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDatagramBased (GDatagramBased **_ptr) { glib_autoptr_clear_GDatagramBased (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDatagramBased (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDatagramBased (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDatagramBased (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDataInputStream *GDataInputStream_autoptr; typedef GList *GDataInputStream_listautoptr; typedef GSList *GDataInputStream_slistautoptr; typedef GQueue *GDataInputStream_queueautoptr;
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDataInputStream (GDataInputStream *_ptr) { if (_ptr) (g_object_unref) ((GDataInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDataInputStream (GDataInputStream **_ptr) { glib_autoptr_clear_GDataInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDataInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDataInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDataInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDataOutputStream *GDataOutputStream_autoptr; typedef GList *GDataOutputStream_listautoptr; typedef GSList *GDataOutputStream_slistautoptr; typedef GQueue *GDataOutputStream_queueautoptr;
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDataOutputStream (GDataOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GDataOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDataOutputStream (GDataOutputStream **_ptr) { glib_autoptr_clear_GDataOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDataOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDataOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDataOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusActionGroup *GDBusActionGroup_autoptr; typedef GList *GDBusActionGroup_listautoptr; typedef GSList *GDBusActionGroup_slistautoptr; typedef GQueue *GDBusActionGroup_queueautoptr;
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusActionGroup (GDBusActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GDBusActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusActionGroup (GDBusActionGroup **_ptr) { glib_autoptr_clear_GDBusActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusActionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusActionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusAuthObserver *GDBusAuthObserver_autoptr; typedef GList *GDBusAuthObserver_listautoptr; typedef GSList *GDBusAuthObserver_slistautoptr; typedef GQueue *GDBusAuthObserver_queueautoptr;
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusAuthObserver (GDBusAuthObserver *_ptr) { if (_ptr) (g_object_unref) ((GDBusAuthObserver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusAuthObserver (GDBusAuthObserver **_ptr) { glib_autoptr_clear_GDBusAuthObserver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusAuthObserver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusAuthObserver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusAuthObserver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusConnection *GDBusConnection_autoptr; typedef GList *GDBusConnection_listautoptr; typedef GSList *GDBusConnection_slistautoptr; typedef GQueue *GDBusConnection_queueautoptr;
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusConnection (GDBusConnection *_ptr) { if (_ptr) (g_object_unref) ((GDBusConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusConnection (GDBusConnection **_ptr) { glib_autoptr_clear_GDBusConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusInterface *GDBusInterface_autoptr; typedef GList *GDBusInterface_listautoptr; typedef GSList *GDBusInterface_slistautoptr; typedef GQueue *GDBusInterface_queueautoptr;
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusInterface (GDBusInterface *_ptr) { if (_ptr) (g_object_unref) ((GDBusInterface *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusInterface (GDBusInterface **_ptr) { glib_autoptr_clear_GDBusInterface (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusInterface (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusInterface (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusInterface (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusInterfaceSkeleton *GDBusInterfaceSkeleton_autoptr; typedef GList *GDBusInterfaceSkeleton_listautoptr; typedef GSList *GDBusInterfaceSkeleton_slistautoptr; typedef GQueue *GDBusInterfaceSkeleton_queueautoptr;
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton *_ptr) { if (_ptr) (g_object_unref) ((GDBusInterfaceSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton **_ptr) { glib_autoptr_clear_GDBusInterfaceSkeleton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusInterfaceSkeleton (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusInterfaceSkeleton (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusInterfaceSkeleton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusMenuModel *GDBusMenuModel_autoptr; typedef GList *GDBusMenuModel_listautoptr; typedef GSList *GDBusMenuModel_slistautoptr; typedef GQueue *GDBusMenuModel_queueautoptr;
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMenuModel (GDBusMenuModel *_ptr) { if (_ptr) (g_object_unref) ((GDBusMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMenuModel (GDBusMenuModel **_ptr) { glib_autoptr_clear_GDBusMenuModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMenuModel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMenuModel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMenuModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusMessage *GDBusMessage_autoptr; typedef GList *GDBusMessage_listautoptr; typedef GSList *GDBusMessage_slistautoptr; typedef GQueue *GDBusMessage_queueautoptr;
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMessage (GDBusMessage *_ptr) { if (_ptr) (g_object_unref) ((GDBusMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMessage (GDBusMessage **_ptr) { glib_autoptr_clear_GDBusMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMessage (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMessage (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusMethodInvocation *GDBusMethodInvocation_autoptr; typedef GList *GDBusMethodInvocation_listautoptr; typedef GSList *GDBusMethodInvocation_slistautoptr; typedef GQueue *GDBusMethodInvocation_queueautoptr;
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMethodInvocation (GDBusMethodInvocation *_ptr) { if (_ptr) (g_object_unref) ((GDBusMethodInvocation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMethodInvocation (GDBusMethodInvocation **_ptr) { glib_autoptr_clear_GDBusMethodInvocation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMethodInvocation (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMethodInvocation (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMethodInvocation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusNodeInfo *GDBusNodeInfo_autoptr; typedef GList *GDBusNodeInfo_listautoptr; typedef GSList *GDBusNodeInfo_slistautoptr; typedef GQueue *GDBusNodeInfo_queueautoptr;
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusNodeInfo (GDBusNodeInfo *_ptr) { if (_ptr) (g_dbus_node_info_unref) ((GDBusNodeInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusNodeInfo (GDBusNodeInfo **_ptr) { glib_autoptr_clear_GDBusNodeInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusNodeInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dbus_node_info_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusNodeInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_dbus_node_info_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusNodeInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_dbus_node_info_unref); }
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusObject *GDBusObject_autoptr; typedef GList *GDBusObject_listautoptr; typedef GSList *GDBusObject_slistautoptr; typedef GQueue *GDBusObject_queueautoptr;
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObject (GDBusObject *_ptr) { if (_ptr) (g_object_unref) ((GDBusObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObject (GDBusObject **_ptr) { glib_autoptr_clear_GDBusObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObject (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObject (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusObjectManagerClient *GDBusObjectManagerClient_autoptr; typedef GList *GDBusObjectManagerClient_listautoptr; typedef GSList *GDBusObjectManagerClient_slistautoptr; typedef GQueue *GDBusObjectManagerClient_queueautoptr;
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManagerClient (GDBusObjectManagerClient *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManagerClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManagerClient (GDBusObjectManagerClient **_ptr) { glib_autoptr_clear_GDBusObjectManagerClient (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManagerClient (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManagerClient (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManagerClient (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusObjectManager *GDBusObjectManager_autoptr; typedef GList *GDBusObjectManager_listautoptr; typedef GSList *GDBusObjectManager_slistautoptr; typedef GQueue *GDBusObjectManager_queueautoptr;
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManager (GDBusObjectManager *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManager (GDBusObjectManager **_ptr) { glib_autoptr_clear_GDBusObjectManager (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManager (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManager (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManager (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusObjectManagerServer *GDBusObjectManagerServer_autoptr; typedef GList *GDBusObjectManagerServer_listautoptr; typedef GSList *GDBusObjectManagerServer_slistautoptr; typedef GQueue *GDBusObjectManagerServer_queueautoptr;
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManagerServer (GDBusObjectManagerServer *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManagerServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManagerServer (GDBusObjectManagerServer **_ptr) { glib_autoptr_clear_GDBusObjectManagerServer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManagerServer (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManagerServer (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManagerServer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusObjectProxy *GDBusObjectProxy_autoptr; typedef GList *GDBusObjectProxy_listautoptr; typedef GSList *GDBusObjectProxy_slistautoptr; typedef GQueue *GDBusObjectProxy_queueautoptr;
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectProxy (GDBusObjectProxy *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectProxy (GDBusObjectProxy **_ptr) { glib_autoptr_clear_GDBusObjectProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectProxy (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectProxy (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusObjectSkeleton *GDBusObjectSkeleton_autoptr; typedef GList *GDBusObjectSkeleton_listautoptr; typedef GSList *GDBusObjectSkeleton_slistautoptr; typedef GQueue *GDBusObjectSkeleton_queueautoptr;
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectSkeleton (GDBusObjectSkeleton *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectSkeleton (GDBusObjectSkeleton **_ptr) { glib_autoptr_clear_GDBusObjectSkeleton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectSkeleton (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectSkeleton (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectSkeleton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusProxy *GDBusProxy_autoptr; typedef GList *GDBusProxy_listautoptr; typedef GSList *GDBusProxy_slistautoptr; typedef GQueue *GDBusProxy_queueautoptr;
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusProxy (GDBusProxy *_ptr) { if (_ptr) (g_object_unref) ((GDBusProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusProxy (GDBusProxy **_ptr) { glib_autoptr_clear_GDBusProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusProxy (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusProxy (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDBusServer *GDBusServer_autoptr; typedef GList *GDBusServer_listautoptr; typedef GSList *GDBusServer_slistautoptr; typedef GQueue *GDBusServer_queueautoptr;
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusServer (GDBusServer *_ptr) { if (_ptr) (g_object_unref) ((GDBusServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusServer (GDBusServer **_ptr) { glib_autoptr_clear_GDBusServer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusServer (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusServer (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusServer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GDrive *GDrive_autoptr; typedef GList *GDrive_listautoptr; typedef GSList *GDrive_slistautoptr; typedef GQueue *GDrive_queueautoptr;
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDrive (GDrive *_ptr) { if (_ptr) (g_object_unref) ((GDrive *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDrive (GDrive **_ptr) { glib_autoptr_clear_GDrive (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDrive (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDrive (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDrive (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GEmblemedIcon *GEmblemedIcon_autoptr; typedef GList *GEmblemedIcon_listautoptr; typedef GSList *GEmblemedIcon_slistautoptr; typedef GQueue *GEmblemedIcon_queueautoptr;
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEmblemedIcon (GEmblemedIcon *_ptr) { if (_ptr) (g_object_unref) ((GEmblemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEmblemedIcon (GEmblemedIcon **_ptr) { glib_autoptr_clear_GEmblemedIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEmblemedIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEmblemedIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEmblemedIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GEmblem *GEmblem_autoptr; typedef GList *GEmblem_listautoptr; typedef GSList *GEmblem_slistautoptr; typedef GQueue *GEmblem_queueautoptr;
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEmblem (GEmblem *_ptr) { if (_ptr) (g_object_unref) ((GEmblem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEmblem (GEmblem **_ptr) { glib_autoptr_clear_GEmblem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEmblem (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEmblem (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEmblem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileEnumerator *GFileEnumerator_autoptr; typedef GList *GFileEnumerator_listautoptr; typedef GSList *GFileEnumerator_slistautoptr; typedef GQueue *GFileEnumerator_queueautoptr;
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileEnumerator (GFileEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GFileEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileEnumerator (GFileEnumerator **_ptr) { glib_autoptr_clear_GFileEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileEnumerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileEnumerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFile *GFile_autoptr; typedef GList *GFile_listautoptr; typedef GSList *GFile_slistautoptr; typedef GQueue *GFile_queueautoptr;
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFile (GFile *_ptr) { if (_ptr) (g_object_unref) ((GFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFile (GFile **_ptr) { glib_autoptr_clear_GFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFile (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFile (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileAttributeInfoList *GFileAttributeInfoList_autoptr; typedef GList *GFileAttributeInfoList_listautoptr; typedef GSList *GFileAttributeInfoList_slistautoptr; typedef GQueue *GFileAttributeInfoList_queueautoptr;
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileAttributeInfoList (GFileAttributeInfoList *_ptr) { if (_ptr) (g_file_attribute_info_list_unref) ((GFileAttributeInfoList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileAttributeInfoList (GFileAttributeInfoList **_ptr) { glib_autoptr_clear_GFileAttributeInfoList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileAttributeInfoList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_file_attribute_info_list_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileAttributeInfoList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_file_attribute_info_list_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileAttributeInfoList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_file_attribute_info_list_unref); }
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileIcon *GFileIcon_autoptr; typedef GList *GFileIcon_listautoptr; typedef GSList *GFileIcon_slistautoptr; typedef GQueue *GFileIcon_queueautoptr;
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileIcon (GFileIcon *_ptr) { if (_ptr) (g_object_unref) ((GFileIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileIcon (GFileIcon **_ptr) { glib_autoptr_clear_GFileIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileInfo *GFileInfo_autoptr; typedef GList *GFileInfo_listautoptr; typedef GSList *GFileInfo_slistautoptr; typedef GQueue *GFileInfo_queueautoptr;
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileInfo (GFileInfo *_ptr) { if (_ptr) (g_object_unref) ((GFileInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileInfo (GFileInfo **_ptr) { glib_autoptr_clear_GFileInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileInfo (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileInfo (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileInputStream *GFileInputStream_autoptr; typedef GList *GFileInputStream_listautoptr; typedef GSList *GFileInputStream_slistautoptr; typedef GQueue *GFileInputStream_queueautoptr;
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileInputStream (GFileInputStream *_ptr) { if (_ptr) (g_object_unref) ((GFileInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileInputStream (GFileInputStream **_ptr) { glib_autoptr_clear_GFileInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileIOStream *GFileIOStream_autoptr; typedef GList *GFileIOStream_listautoptr; typedef GSList *GFileIOStream_slistautoptr; typedef GQueue *GFileIOStream_queueautoptr;
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileIOStream (GFileIOStream *_ptr) { if (_ptr) (g_object_unref) ((GFileIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileIOStream (GFileIOStream **_ptr) { glib_autoptr_clear_GFileIOStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileIOStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileIOStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileIOStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileMonitor *GFileMonitor_autoptr; typedef GList *GFileMonitor_listautoptr; typedef GSList *GFileMonitor_slistautoptr; typedef GQueue *GFileMonitor_queueautoptr;
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileMonitor (GFileMonitor *_ptr) { if (_ptr) (g_object_unref) ((GFileMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileMonitor (GFileMonitor **_ptr) { glib_autoptr_clear_GFileMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFilenameCompleter *GFilenameCompleter_autoptr; typedef GList *GFilenameCompleter_listautoptr; typedef GSList *GFilenameCompleter_slistautoptr; typedef GQueue *GFilenameCompleter_queueautoptr;
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilenameCompleter (GFilenameCompleter *_ptr) { if (_ptr) (g_object_unref) ((GFilenameCompleter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilenameCompleter (GFilenameCompleter **_ptr) { glib_autoptr_clear_GFilenameCompleter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilenameCompleter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilenameCompleter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilenameCompleter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFileOutputStream *GFileOutputStream_autoptr; typedef GList *GFileOutputStream_listautoptr; typedef GSList *GFileOutputStream_slistautoptr; typedef GQueue *GFileOutputStream_queueautoptr;
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileOutputStream (GFileOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GFileOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileOutputStream (GFileOutputStream **_ptr) { glib_autoptr_clear_GFileOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFilterInputStream *GFilterInputStream_autoptr; typedef GList *GFilterInputStream_listautoptr; typedef GSList *GFilterInputStream_slistautoptr; typedef GQueue *GFilterInputStream_queueautoptr;
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilterInputStream (GFilterInputStream *_ptr) { if (_ptr) (g_object_unref) ((GFilterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilterInputStream (GFilterInputStream **_ptr) { glib_autoptr_clear_GFilterInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilterInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilterInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilterInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GFilterOutputStream *GFilterOutputStream_autoptr; typedef GList *GFilterOutputStream_listautoptr; typedef GSList *GFilterOutputStream_slistautoptr; typedef GQueue *GFilterOutputStream_queueautoptr;
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilterOutputStream (GFilterOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GFilterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilterOutputStream (GFilterOutputStream **_ptr) { glib_autoptr_clear_GFilterOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilterOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilterOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilterOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GIcon *GIcon_autoptr; typedef GList *GIcon_listautoptr; typedef GSList *GIcon_slistautoptr; typedef GQueue *GIcon_queueautoptr;
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIcon (GIcon *_ptr) { if (_ptr) (g_object_unref) ((GIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIcon (GIcon **_ptr) { glib_autoptr_clear_GIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GInetAddress *GInetAddress_autoptr; typedef GList *GInetAddress_listautoptr; typedef GSList *GInetAddress_slistautoptr; typedef GQueue *GInetAddress_queueautoptr;
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetAddress (GInetAddress *_ptr) { if (_ptr) (g_object_unref) ((GInetAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetAddress (GInetAddress **_ptr) { glib_autoptr_clear_GInetAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GInetAddressMask *GInetAddressMask_autoptr; typedef GList *GInetAddressMask_listautoptr; typedef GSList *GInetAddressMask_slistautoptr; typedef GQueue *GInetAddressMask_queueautoptr;
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetAddressMask (GInetAddressMask *_ptr) { if (_ptr) (g_object_unref) ((GInetAddressMask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetAddressMask (GInetAddressMask **_ptr) { glib_autoptr_clear_GInetAddressMask (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetAddressMask (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetAddressMask (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetAddressMask (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GInetSocketAddress *GInetSocketAddress_autoptr; typedef GList *GInetSocketAddress_listautoptr; typedef GSList *GInetSocketAddress_slistautoptr; typedef GQueue *GInetSocketAddress_queueautoptr;
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetSocketAddress (GInetSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GInetSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetSocketAddress (GInetSocketAddress **_ptr) { glib_autoptr_clear_GInetSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetSocketAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetSocketAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GInitable *GInitable_autoptr; typedef GList *GInitable_listautoptr; typedef GSList *GInitable_slistautoptr; typedef GQueue *GInitable_queueautoptr;
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInitable (GInitable *_ptr) { if (_ptr) (g_object_unref) ((GInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInitable (GInitable **_ptr) { glib_autoptr_clear_GInitable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInitable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInitable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInitable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GInputStream *GInputStream_autoptr; typedef GList *GInputStream_listautoptr; typedef GSList *GInputStream_slistautoptr; typedef GQueue *GInputStream_queueautoptr;
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInputStream (GInputStream *_ptr) { if (_ptr) (g_object_unref) ((GInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInputStream (GInputStream **_ptr) { glib_autoptr_clear_GInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GIOModule *GIOModule_autoptr; typedef GList *GIOModule_listautoptr; typedef GSList *GIOModule_slistautoptr; typedef GQueue *GIOModule_queueautoptr;
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOModule (GIOModule *_ptr) { if (_ptr) (g_object_unref) ((GIOModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOModule (GIOModule **_ptr) { glib_autoptr_clear_GIOModule (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOModule (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOModule (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOModule (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GIOStream *GIOStream_autoptr; typedef GList *GIOStream_listautoptr; typedef GSList *GIOStream_slistautoptr; typedef GQueue *GIOStream_queueautoptr;
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOStream (GIOStream *_ptr) { if (_ptr) (g_object_unref) ((GIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOStream (GIOStream **_ptr) { glib_autoptr_clear_GIOStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GLoadableIcon *GLoadableIcon_autoptr; typedef GList *GLoadableIcon_listautoptr; typedef GSList *GLoadableIcon_slistautoptr; typedef GQueue *GLoadableIcon_queueautoptr;
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GLoadableIcon (GLoadableIcon *_ptr) { if (_ptr) (g_object_unref) ((GLoadableIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GLoadableIcon (GLoadableIcon **_ptr) { glib_autoptr_clear_GLoadableIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GLoadableIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GLoadableIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GLoadableIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMemoryInputStream *GMemoryInputStream_autoptr; typedef GList *GMemoryInputStream_listautoptr; typedef GSList *GMemoryInputStream_slistautoptr; typedef GQueue *GMemoryInputStream_queueautoptr;
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryInputStream (GMemoryInputStream *_ptr) { if (_ptr) (g_object_unref) ((GMemoryInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryInputStream (GMemoryInputStream **_ptr) { glib_autoptr_clear_GMemoryInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMemoryOutputStream *GMemoryOutputStream_autoptr; typedef GList *GMemoryOutputStream_listautoptr; typedef GSList *GMemoryOutputStream_slistautoptr; typedef GQueue *GMemoryOutputStream_queueautoptr;
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryOutputStream (GMemoryOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GMemoryOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryOutputStream (GMemoryOutputStream **_ptr) { glib_autoptr_clear_GMemoryOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMenu *GMenu_autoptr; typedef GList *GMenu_listautoptr; typedef GSList *GMenu_slistautoptr; typedef GQueue *GMenu_queueautoptr;
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenu (GMenu *_ptr) { if (_ptr) (g_object_unref) ((GMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenu (GMenu **_ptr) { glib_autoptr_clear_GMenu (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenu (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenu (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenu (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMenuItem *GMenuItem_autoptr; typedef GList *GMenuItem_listautoptr; typedef GSList *GMenuItem_slistautoptr; typedef GQueue *GMenuItem_queueautoptr;
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuItem (GMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuItem (GMenuItem **_ptr) { glib_autoptr_clear_GMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuItem (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuItem (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMenuModel *GMenuModel_autoptr; typedef GList *GMenuModel_listautoptr; typedef GSList *GMenuModel_slistautoptr; typedef GQueue *GMenuModel_queueautoptr;
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuModel (GMenuModel *_ptr) { if (_ptr) (g_object_unref) ((GMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuModel (GMenuModel **_ptr) { glib_autoptr_clear_GMenuModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuModel (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuModel (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMenuAttributeIter *GMenuAttributeIter_autoptr; typedef GList *GMenuAttributeIter_listautoptr; typedef GSList *GMenuAttributeIter_slistautoptr; typedef GQueue *GMenuAttributeIter_queueautoptr;
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuAttributeIter (GMenuAttributeIter *_ptr) { if (_ptr) (g_object_unref) ((GMenuAttributeIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuAttributeIter (GMenuAttributeIter **_ptr) { glib_autoptr_clear_GMenuAttributeIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuAttributeIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuAttributeIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuAttributeIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMenuLinkIter *GMenuLinkIter_autoptr; typedef GList *GMenuLinkIter_listautoptr; typedef GSList *GMenuLinkIter_slistautoptr; typedef GQueue *GMenuLinkIter_queueautoptr;
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuLinkIter (GMenuLinkIter *_ptr) { if (_ptr) (g_object_unref) ((GMenuLinkIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuLinkIter (GMenuLinkIter **_ptr) { glib_autoptr_clear_GMenuLinkIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuLinkIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuLinkIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuLinkIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMount *GMount_autoptr; typedef GList *GMount_listautoptr; typedef GSList *GMount_slistautoptr; typedef GQueue *GMount_queueautoptr;
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMount (GMount *_ptr) { if (_ptr) (g_object_unref) ((GMount *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMount (GMount **_ptr) { glib_autoptr_clear_GMount (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMount (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMount (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMount (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GMountOperation *GMountOperation_autoptr; typedef GList *GMountOperation_listautoptr; typedef GSList *GMountOperation_slistautoptr; typedef GQueue *GMountOperation_queueautoptr;
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMountOperation (GMountOperation *_ptr) { if (_ptr) (g_object_unref) ((GMountOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMountOperation (GMountOperation **_ptr) { glib_autoptr_clear_GMountOperation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMountOperation (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMountOperation (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMountOperation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GNativeVolumeMonitor *GNativeVolumeMonitor_autoptr; typedef GList *GNativeVolumeMonitor_listautoptr; typedef GSList *GNativeVolumeMonitor_slistautoptr; typedef GQueue *GNativeVolumeMonitor_queueautoptr;
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNativeVolumeMonitor (GNativeVolumeMonitor *_ptr) { if (_ptr) (g_object_unref) ((GNativeVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNativeVolumeMonitor (GNativeVolumeMonitor **_ptr) { glib_autoptr_clear_GNativeVolumeMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNativeVolumeMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNativeVolumeMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNativeVolumeMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GNetworkAddress *GNetworkAddress_autoptr; typedef GList *GNetworkAddress_listautoptr; typedef GSList *GNetworkAddress_slistautoptr; typedef GQueue *GNetworkAddress_queueautoptr;
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkAddress (GNetworkAddress *_ptr) { if (_ptr) (g_object_unref) ((GNetworkAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkAddress (GNetworkAddress **_ptr) { glib_autoptr_clear_GNetworkAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GNetworkMonitor *GNetworkMonitor_autoptr; typedef GList *GNetworkMonitor_listautoptr; typedef GSList *GNetworkMonitor_slistautoptr; typedef GQueue *GNetworkMonitor_queueautoptr;
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkMonitor (GNetworkMonitor *_ptr) { if (_ptr) (g_object_unref) ((GNetworkMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkMonitor (GNetworkMonitor **_ptr) { glib_autoptr_clear_GNetworkMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GNetworkService *GNetworkService_autoptr; typedef GList *GNetworkService_listautoptr; typedef GSList *GNetworkService_slistautoptr; typedef GQueue *GNetworkService_queueautoptr;
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkService (GNetworkService *_ptr) { if (_ptr) (g_object_unref) ((GNetworkService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkService (GNetworkService **_ptr) { glib_autoptr_clear_GNetworkService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkService (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkService (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GNotification *GNotification_autoptr; typedef GList *GNotification_listautoptr; typedef GSList *GNotification_slistautoptr; typedef GQueue *GNotification_queueautoptr;
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNotification (GNotification *_ptr) { if (_ptr) (g_object_unref) ((GNotification *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNotification (GNotification **_ptr) { glib_autoptr_clear_GNotification (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNotification (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNotification (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNotification (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GOutputStream *GOutputStream_autoptr; typedef GList *GOutputStream_listautoptr; typedef GSList *GOutputStream_slistautoptr; typedef GQueue *GOutputStream_queueautoptr;
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOutputStream (GOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOutputStream (GOutputStream **_ptr) { glib_autoptr_clear_GOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GPermission *GPermission_autoptr; typedef GList *GPermission_listautoptr; typedef GSList *GPermission_slistautoptr; typedef GQueue *GPermission_queueautoptr;
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPermission (GPermission *_ptr) { if (_ptr) (g_object_unref) ((GPermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPermission (GPermission **_ptr) { glib_autoptr_clear_GPermission (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPermission (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPermission (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPermission (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GPollableInputStream *GPollableInputStream_autoptr; typedef GList *GPollableInputStream_listautoptr; typedef GSList *GPollableInputStream_slistautoptr; typedef GQueue *GPollableInputStream_queueautoptr;
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPollableInputStream (GPollableInputStream *_ptr) { if (_ptr) (g_object_unref) ((GPollableInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPollableInputStream (GPollableInputStream **_ptr) { glib_autoptr_clear_GPollableInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPollableInputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPollableInputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPollableInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GPollableOutputStream *GPollableOutputStream_autoptr; typedef GList *GPollableOutputStream_listautoptr; typedef GSList *GPollableOutputStream_slistautoptr; typedef GQueue *GPollableOutputStream_queueautoptr;
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPollableOutputStream (GPollableOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GPollableOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPollableOutputStream (GPollableOutputStream **_ptr) { glib_autoptr_clear_GPollableOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPollableOutputStream (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPollableOutputStream (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPollableOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GPropertyAction *GPropertyAction_autoptr; typedef GList *GPropertyAction_listautoptr; typedef GSList *GPropertyAction_slistautoptr; typedef GQueue *GPropertyAction_queueautoptr;
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPropertyAction (GPropertyAction *_ptr) { if (_ptr) (g_object_unref) ((GPropertyAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPropertyAction (GPropertyAction **_ptr) { glib_autoptr_clear_GPropertyAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPropertyAction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPropertyAction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPropertyAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GProxyAddressEnumerator *GProxyAddressEnumerator_autoptr; typedef GList *GProxyAddressEnumerator_listautoptr; typedef GSList *GProxyAddressEnumerator_slistautoptr; typedef GQueue *GProxyAddressEnumerator_queueautoptr;
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyAddressEnumerator (GProxyAddressEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GProxyAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyAddressEnumerator (GProxyAddressEnumerator **_ptr) { glib_autoptr_clear_GProxyAddressEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyAddressEnumerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyAddressEnumerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyAddressEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GProxyAddress *GProxyAddress_autoptr; typedef GList *GProxyAddress_listautoptr; typedef GSList *GProxyAddress_slistautoptr; typedef GQueue *GProxyAddress_queueautoptr;
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyAddress (GProxyAddress *_ptr) { if (_ptr) (g_object_unref) ((GProxyAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyAddress (GProxyAddress **_ptr) { glib_autoptr_clear_GProxyAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GProxy *GProxy_autoptr; typedef GList *GProxy_listautoptr; typedef GSList *GProxy_slistautoptr; typedef GQueue *GProxy_queueautoptr;
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxy (GProxy *_ptr) { if (_ptr) (g_object_unref) ((GProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxy (GProxy **_ptr) { glib_autoptr_clear_GProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxy (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxy (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GProxyResolver *GProxyResolver_autoptr; typedef GList *GProxyResolver_listautoptr; typedef GSList *GProxyResolver_slistautoptr; typedef GQueue *GProxyResolver_queueautoptr;
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyResolver (GProxyResolver *_ptr) { if (_ptr) (g_object_unref) ((GProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyResolver (GProxyResolver **_ptr) { glib_autoptr_clear_GProxyResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyResolver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyResolver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GRemoteActionGroup *GRemoteActionGroup_autoptr; typedef GList *GRemoteActionGroup_listautoptr; typedef GSList *GRemoteActionGroup_slistautoptr; typedef GQueue *GRemoteActionGroup_queueautoptr;
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRemoteActionGroup (GRemoteActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GRemoteActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRemoteActionGroup (GRemoteActionGroup **_ptr) { glib_autoptr_clear_GRemoteActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRemoteActionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRemoteActionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRemoteActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GResolver *GResolver_autoptr; typedef GList *GResolver_listautoptr; typedef GSList *GResolver_slistautoptr; typedef GQueue *GResolver_queueautoptr;
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GResolver (GResolver *_ptr) { if (_ptr) (g_object_unref) ((GResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GResolver (GResolver **_ptr) { glib_autoptr_clear_GResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GResolver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GResolver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GResource *GResource_autoptr; typedef GList *GResource_listautoptr; typedef GSList *GResource_slistautoptr; typedef GQueue *GResource_queueautoptr;
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GResource (GResource *_ptr) { if (_ptr) (g_resource_unref) ((GResource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GResource (GResource **_ptr) { glib_autoptr_clear_GResource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GResource (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_resource_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GResource (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_resource_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GResource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_resource_unref); }
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSeekable *GSeekable_autoptr; typedef GList *GSeekable_listautoptr; typedef GSList *GSeekable_slistautoptr; typedef GQueue *GSeekable_queueautoptr;
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSeekable (GSeekable *_ptr) { if (_ptr) (g_object_unref) ((GSeekable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSeekable (GSeekable **_ptr) { glib_autoptr_clear_GSeekable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSeekable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSeekable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSeekable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSettingsBackend *GSettingsBackend_autoptr; typedef GList *GSettingsBackend_listautoptr; typedef GSList *GSettingsBackend_slistautoptr; typedef GQueue *GSettingsBackend_queueautoptr;
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsBackend (GSettingsBackend *_ptr) { if (_ptr) (g_object_unref) ((GSettingsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsBackend (GSettingsBackend **_ptr) { glib_autoptr_clear_GSettingsBackend (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsBackend (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsBackend (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsBackend (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSettingsSchema *GSettingsSchema_autoptr; typedef GList *GSettingsSchema_listautoptr; typedef GSList *GSettingsSchema_slistautoptr; typedef GQueue *GSettingsSchema_queueautoptr;
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchema (GSettingsSchema *_ptr) { if (_ptr) (g_settings_schema_unref) ((GSettingsSchema *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchema (GSettingsSchema **_ptr) { glib_autoptr_clear_GSettingsSchema (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchema (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchema (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchema (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_settings_schema_unref); }
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSettingsSchemaKey *GSettingsSchemaKey_autoptr; typedef GList *GSettingsSchemaKey_listautoptr; typedef GSList *GSettingsSchemaKey_slistautoptr; typedef GQueue *GSettingsSchemaKey_queueautoptr;
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchemaKey (GSettingsSchemaKey *_ptr) { if (_ptr) (g_settings_schema_key_unref) ((GSettingsSchemaKey *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchemaKey (GSettingsSchemaKey **_ptr) { glib_autoptr_clear_GSettingsSchemaKey (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchemaKey (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_key_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchemaKey (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_key_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchemaKey (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_settings_schema_key_unref); }
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSettingsSchemaSource *GSettingsSchemaSource_autoptr; typedef GList *GSettingsSchemaSource_listautoptr; typedef GSList *GSettingsSchemaSource_slistautoptr; typedef GQueue *GSettingsSchemaSource_queueautoptr;
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchemaSource (GSettingsSchemaSource *_ptr) { if (_ptr) (g_settings_schema_source_unref) ((GSettingsSchemaSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchemaSource (GSettingsSchemaSource **_ptr) { glib_autoptr_clear_GSettingsSchemaSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchemaSource (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_source_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchemaSource (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_settings_schema_source_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchemaSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_settings_schema_source_unref); }
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSettings *GSettings_autoptr; typedef GList *GSettings_listautoptr; typedef GSList *GSettings_slistautoptr; typedef GQueue *GSettings_queueautoptr;
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettings (GSettings *_ptr) { if (_ptr) (g_object_unref) ((GSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettings (GSettings **_ptr) { glib_autoptr_clear_GSettings (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettings (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettings (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettings (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSimpleActionGroup *GSimpleActionGroup_autoptr; typedef GList *GSimpleActionGroup_listautoptr; typedef GSList *GSimpleActionGroup_slistautoptr; typedef GQueue *GSimpleActionGroup_queueautoptr;
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleActionGroup (GSimpleActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GSimpleActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleActionGroup (GSimpleActionGroup **_ptr) { glib_autoptr_clear_GSimpleActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleActionGroup (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleActionGroup (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSimpleAction *GSimpleAction_autoptr; typedef GList *GSimpleAction_listautoptr; typedef GSList *GSimpleAction_slistautoptr; typedef GQueue *GSimpleAction_queueautoptr;
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleAction (GSimpleAction *_ptr) { if (_ptr) (g_object_unref) ((GSimpleAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleAction (GSimpleAction **_ptr) { glib_autoptr_clear_GSimpleAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleAction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleAction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSimpleAsyncResult *GSimpleAsyncResult_autoptr; typedef GList *GSimpleAsyncResult_listautoptr; typedef GSList *GSimpleAsyncResult_slistautoptr; typedef GQueue *GSimpleAsyncResult_queueautoptr;
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleAsyncResult (GSimpleAsyncResult *_ptr) { if (_ptr) (g_object_unref) ((GSimpleAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleAsyncResult (GSimpleAsyncResult **_ptr) { glib_autoptr_clear_GSimpleAsyncResult (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleAsyncResult (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleAsyncResult (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleAsyncResult (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSimplePermission *GSimplePermission_autoptr; typedef GList *GSimplePermission_listautoptr; typedef GSList *GSimplePermission_slistautoptr; typedef GQueue *GSimplePermission_queueautoptr;
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimplePermission (GSimplePermission *_ptr) { if (_ptr) (g_object_unref) ((GSimplePermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimplePermission (GSimplePermission **_ptr) { glib_autoptr_clear_GSimplePermission (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimplePermission (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimplePermission (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimplePermission (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSimpleProxyResolver *GSimpleProxyResolver_autoptr; typedef GList *GSimpleProxyResolver_listautoptr; typedef GSList *GSimpleProxyResolver_slistautoptr; typedef GQueue *GSimpleProxyResolver_queueautoptr;
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleProxyResolver (GSimpleProxyResolver *_ptr) { if (_ptr) (g_object_unref) ((GSimpleProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleProxyResolver (GSimpleProxyResolver **_ptr) { glib_autoptr_clear_GSimpleProxyResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleProxyResolver (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleProxyResolver (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleProxyResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketAddressEnumerator *GSocketAddressEnumerator_autoptr; typedef GList *GSocketAddressEnumerator_listautoptr; typedef GSList *GSocketAddressEnumerator_slistautoptr; typedef GQueue *GSocketAddressEnumerator_queueautoptr;
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketAddressEnumerator (GSocketAddressEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GSocketAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketAddressEnumerator (GSocketAddressEnumerator **_ptr) { glib_autoptr_clear_GSocketAddressEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketAddressEnumerator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketAddressEnumerator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketAddressEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketAddress *GSocketAddress_autoptr; typedef GList *GSocketAddress_listautoptr; typedef GSList *GSocketAddress_slistautoptr; typedef GQueue *GSocketAddress_queueautoptr;
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketAddress (GSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketAddress (GSocketAddress **_ptr) { glib_autoptr_clear_GSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketAddress (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketAddress (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketClient *GSocketClient_autoptr; typedef GList *GSocketClient_listautoptr; typedef GSList *GSocketClient_slistautoptr; typedef GQueue *GSocketClient_queueautoptr;
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketClient (GSocketClient *_ptr) { if (_ptr) (g_object_unref) ((GSocketClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketClient (GSocketClient **_ptr) { glib_autoptr_clear_GSocketClient (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketClient (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketClient (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketClient (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketConnectable *GSocketConnectable_autoptr; typedef GList *GSocketConnectable_listautoptr; typedef GSList *GSocketConnectable_slistautoptr; typedef GQueue *GSocketConnectable_queueautoptr;
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketConnectable (GSocketConnectable *_ptr) { if (_ptr) (g_object_unref) ((GSocketConnectable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketConnectable (GSocketConnectable **_ptr) { glib_autoptr_clear_GSocketConnectable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketConnectable (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketConnectable (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketConnectable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketConnection *GSocketConnection_autoptr; typedef GList *GSocketConnection_listautoptr; typedef GSList *GSocketConnection_slistautoptr; typedef GQueue *GSocketConnection_queueautoptr;
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketConnection (GSocketConnection *_ptr) { if (_ptr) (g_object_unref) ((GSocketConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketConnection (GSocketConnection **_ptr) { glib_autoptr_clear_GSocketConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketControlMessage *GSocketControlMessage_autoptr; typedef GList *GSocketControlMessage_listautoptr; typedef GSList *GSocketControlMessage_slistautoptr; typedef GQueue *GSocketControlMessage_queueautoptr;
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketControlMessage (GSocketControlMessage *_ptr) { if (_ptr) (g_object_unref) ((GSocketControlMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketControlMessage (GSocketControlMessage **_ptr) { glib_autoptr_clear_GSocketControlMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketControlMessage (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketControlMessage (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketControlMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocket *GSocket_autoptr; typedef GList *GSocket_listautoptr; typedef GSList *GSocket_slistautoptr; typedef GQueue *GSocket_queueautoptr;
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocket (GSocket *_ptr) { if (_ptr) (g_object_unref) ((GSocket *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocket (GSocket **_ptr) { glib_autoptr_clear_GSocket (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocket (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocket (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocket (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketListener *GSocketListener_autoptr; typedef GList *GSocketListener_listautoptr; typedef GSList *GSocketListener_slistautoptr; typedef GQueue *GSocketListener_queueautoptr;
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketListener (GSocketListener *_ptr) { if (_ptr) (g_object_unref) ((GSocketListener *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketListener (GSocketListener **_ptr) { glib_autoptr_clear_GSocketListener (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketListener (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketListener (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketListener (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSocketService *GSocketService_autoptr; typedef GList *GSocketService_listautoptr; typedef GSList *GSocketService_slistautoptr; typedef GQueue *GSocketService_queueautoptr;
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketService (GSocketService *_ptr) { if (_ptr) (g_object_unref) ((GSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketService (GSocketService **_ptr) { glib_autoptr_clear_GSocketService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketService (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketService (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSubprocess *GSubprocess_autoptr; typedef GList *GSubprocess_listautoptr; typedef GSList *GSubprocess_slistautoptr; typedef GQueue *GSubprocess_queueautoptr;
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSubprocess (GSubprocess *_ptr) { if (_ptr) (g_object_unref) ((GSubprocess *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSubprocess (GSubprocess **_ptr) { glib_autoptr_clear_GSubprocess (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSubprocess (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSubprocess (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSubprocess (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GSubprocessLauncher *GSubprocessLauncher_autoptr; typedef GList *GSubprocessLauncher_listautoptr; typedef GSList *GSubprocessLauncher_slistautoptr; typedef GQueue *GSubprocessLauncher_queueautoptr;
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSubprocessLauncher (GSubprocessLauncher *_ptr) { if (_ptr) (g_object_unref) ((GSubprocessLauncher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSubprocessLauncher (GSubprocessLauncher **_ptr) { glib_autoptr_clear_GSubprocessLauncher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSubprocessLauncher (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSubprocessLauncher (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSubprocessLauncher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTask *GTask_autoptr; typedef GList *GTask_listautoptr; typedef GSList *GTask_slistautoptr; typedef GQueue *GTask_queueautoptr;
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTask (GTask *_ptr) { if (_ptr) (g_object_unref) ((GTask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTask (GTask **_ptr) { glib_autoptr_clear_GTask (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTask (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTask (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTask (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTcpConnection *GTcpConnection_autoptr; typedef GList *GTcpConnection_listautoptr; typedef GSList *GTcpConnection_slistautoptr; typedef GQueue *GTcpConnection_queueautoptr;
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTcpConnection (GTcpConnection *_ptr) { if (_ptr) (g_object_unref) ((GTcpConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTcpConnection (GTcpConnection **_ptr) { glib_autoptr_clear_GTcpConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTcpConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTcpConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTcpConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTcpWrapperConnection *GTcpWrapperConnection_autoptr; typedef GList *GTcpWrapperConnection_listautoptr; typedef GSList *GTcpWrapperConnection_slistautoptr; typedef GQueue *GTcpWrapperConnection_queueautoptr;
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTcpWrapperConnection (GTcpWrapperConnection *_ptr) { if (_ptr) (g_object_unref) ((GTcpWrapperConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTcpWrapperConnection (GTcpWrapperConnection **_ptr) { glib_autoptr_clear_GTcpWrapperConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTcpWrapperConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTcpWrapperConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTcpWrapperConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTestDBus *GTestDBus_autoptr; typedef GList *GTestDBus_listautoptr; typedef GSList *GTestDBus_slistautoptr; typedef GQueue *GTestDBus_queueautoptr;
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTestDBus (GTestDBus *_ptr) { if (_ptr) (g_object_unref) ((GTestDBus *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTestDBus (GTestDBus **_ptr) { glib_autoptr_clear_GTestDBus (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTestDBus (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTestDBus (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTestDBus (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GThemedIcon *GThemedIcon_autoptr; typedef GList *GThemedIcon_listautoptr; typedef GSList *GThemedIcon_slistautoptr; typedef GQueue *GThemedIcon_queueautoptr;
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThemedIcon (GThemedIcon *_ptr) { if (_ptr) (g_object_unref) ((GThemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThemedIcon (GThemedIcon **_ptr) { glib_autoptr_clear_GThemedIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThemedIcon (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThemedIcon (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThemedIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GThreadedSocketService *GThreadedSocketService_autoptr; typedef GList *GThreadedSocketService_listautoptr; typedef GSList *GThreadedSocketService_slistautoptr; typedef GQueue *GThreadedSocketService_queueautoptr;
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThreadedSocketService (GThreadedSocketService *_ptr) { if (_ptr) (g_object_unref) ((GThreadedSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThreadedSocketService (GThreadedSocketService **_ptr) { glib_autoptr_clear_GThreadedSocketService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThreadedSocketService (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThreadedSocketService (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThreadedSocketService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsBackend *GTlsBackend_autoptr; typedef GList *GTlsBackend_listautoptr; typedef GSList *GTlsBackend_slistautoptr; typedef GQueue *GTlsBackend_queueautoptr;
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsBackend (GTlsBackend *_ptr) { if (_ptr) (g_object_unref) ((GTlsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsBackend (GTlsBackend **_ptr) { glib_autoptr_clear_GTlsBackend (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsBackend (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsBackend (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsBackend (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsCertificate *GTlsCertificate_autoptr; typedef GList *GTlsCertificate_listautoptr; typedef GSList *GTlsCertificate_slistautoptr; typedef GQueue *GTlsCertificate_queueautoptr;
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsCertificate (GTlsCertificate *_ptr) { if (_ptr) (g_object_unref) ((GTlsCertificate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsCertificate (GTlsCertificate **_ptr) { glib_autoptr_clear_GTlsCertificate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsCertificate (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsCertificate (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsCertificate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsClientConnection *GTlsClientConnection_autoptr; typedef GList *GTlsClientConnection_listautoptr; typedef GSList *GTlsClientConnection_slistautoptr; typedef GQueue *GTlsClientConnection_queueautoptr;
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsClientConnection (GTlsClientConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsClientConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsClientConnection (GTlsClientConnection **_ptr) { glib_autoptr_clear_GTlsClientConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsClientConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsClientConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsClientConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsConnection *GTlsConnection_autoptr; typedef GList *GTlsConnection_listautoptr; typedef GSList *GTlsConnection_slistautoptr; typedef GQueue *GTlsConnection_queueautoptr;
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsConnection (GTlsConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsConnection (GTlsConnection **_ptr) { glib_autoptr_clear_GTlsConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsDatabase *GTlsDatabase_autoptr; typedef GList *GTlsDatabase_listautoptr; typedef GSList *GTlsDatabase_slistautoptr; typedef GQueue *GTlsDatabase_queueautoptr;
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsDatabase (GTlsDatabase *_ptr) { if (_ptr) (g_object_unref) ((GTlsDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsDatabase (GTlsDatabase **_ptr) { glib_autoptr_clear_GTlsDatabase (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsDatabase (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsDatabase (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsDatabase (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsFileDatabase *GTlsFileDatabase_autoptr; typedef GList *GTlsFileDatabase_listautoptr; typedef GSList *GTlsFileDatabase_slistautoptr; typedef GQueue *GTlsFileDatabase_queueautoptr;
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsFileDatabase (GTlsFileDatabase *_ptr) { if (_ptr) (g_object_unref) ((GTlsFileDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsFileDatabase (GTlsFileDatabase **_ptr) { glib_autoptr_clear_GTlsFileDatabase (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsFileDatabase (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsFileDatabase (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsFileDatabase (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsInteraction *GTlsInteraction_autoptr; typedef GList *GTlsInteraction_listautoptr; typedef GSList *GTlsInteraction_slistautoptr; typedef GQueue *GTlsInteraction_queueautoptr;
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsInteraction (GTlsInteraction *_ptr) { if (_ptr) (g_object_unref) ((GTlsInteraction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsInteraction (GTlsInteraction **_ptr) { glib_autoptr_clear_GTlsInteraction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsInteraction (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsInteraction (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsInteraction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsPassword *GTlsPassword_autoptr; typedef GList *GTlsPassword_listautoptr; typedef GSList *GTlsPassword_slistautoptr; typedef GQueue *GTlsPassword_queueautoptr;
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsPassword (GTlsPassword *_ptr) { if (_ptr) (g_object_unref) ((GTlsPassword *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsPassword (GTlsPassword **_ptr) { glib_autoptr_clear_GTlsPassword (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsPassword (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsPassword (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsPassword (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GTlsServerConnection *GTlsServerConnection_autoptr; typedef GList *GTlsServerConnection_listautoptr; typedef GSList *GTlsServerConnection_slistautoptr; typedef GQueue *GTlsServerConnection_queueautoptr;
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsServerConnection (GTlsServerConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsServerConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsServerConnection (GTlsServerConnection **_ptr) { glib_autoptr_clear_GTlsServerConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsServerConnection (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsServerConnection (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsServerConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GVfs *GVfs_autoptr; typedef GList *GVfs_listautoptr; typedef GSList *GVfs_slistautoptr; typedef GQueue *GVfs_queueautoptr;
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVfs (GVfs *_ptr) { if (_ptr) (g_object_unref) ((GVfs *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVfs (GVfs **_ptr) { glib_autoptr_clear_GVfs (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVfs (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVfs (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVfs (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GVolume *GVolume_autoptr; typedef GList *GVolume_listautoptr; typedef GSList *GVolume_slistautoptr; typedef GQueue *GVolume_queueautoptr;
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVolume (GVolume *_ptr) { if (_ptr) (g_object_unref) ((GVolume *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVolume (GVolume **_ptr) { glib_autoptr_clear_GVolume (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVolume (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVolume (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVolume (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GVolumeMonitor *GVolumeMonitor_autoptr; typedef GList *GVolumeMonitor_listautoptr; typedef GSList *GVolumeMonitor_slistautoptr; typedef GQueue *GVolumeMonitor_queueautoptr;
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVolumeMonitor (GVolumeMonitor *_ptr) { if (_ptr) (g_object_unref) ((GVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVolumeMonitor (GVolumeMonitor **_ptr) { glib_autoptr_clear_GVolumeMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVolumeMonitor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVolumeMonitor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVolumeMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GZlibCompressor *GZlibCompressor_autoptr; typedef GList *GZlibCompressor_listautoptr; typedef GSList *GZlibCompressor_slistautoptr; typedef GQueue *GZlibCompressor_queueautoptr;
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GZlibCompressor (GZlibCompressor *_ptr) { if (_ptr) (g_object_unref) ((GZlibCompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GZlibCompressor (GZlibCompressor **_ptr) { glib_autoptr_clear_GZlibCompressor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GZlibCompressor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GZlibCompressor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GZlibCompressor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

typedef GZlibDecompressor *GZlibDecompressor_autoptr; typedef GList *GZlibDecompressor_listautoptr; typedef GSList *GZlibDecompressor_slistautoptr; typedef GQueue *GZlibDecompressor_queueautoptr;
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic push
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GZlibDecompressor (GZlibDecompressor *_ptr) { if (_ptr) (g_object_unref) ((GZlibDecompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GZlibDecompressor (GZlibDecompressor **_ptr) { glib_autoptr_clear_GZlibDecompressor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GZlibDecompressor (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GZlibDecompressor (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GZlibDecompressor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma GCC diagnostic pop
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"

# 177 "/usr/include/glib-2.0/gio/gio.h" 2
# 31 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 1
# 31 "/usr/include/gtk-2.0/gdk/gdkscreen.h"
# 1 "/usr/include/cairo/cairo.h" 1
# 41 "/usr/include/cairo/cairo.h"
# 1 "/usr/include/cairo/cairo-version.h" 1
# 42 "/usr/include/cairo/cairo.h" 2
# 1 "/usr/include/cairo/cairo-features.h" 1
# 43 "/usr/include/cairo/cairo.h" 2
# 1 "/usr/include/cairo/cairo-deprecated.h" 1
# 44 "/usr/include/cairo/cairo.h" 2
# 61 "/usr/include/cairo/cairo.h"

# 85 "/usr/include/cairo/cairo.h"
 int
cairo_version (void);

 const char*
cairo_version_string (void);
# 107 "/usr/include/cairo/cairo.h"
typedef int cairo_bool_t;
# 124 "/usr/include/cairo/cairo.h"
typedef struct _cairo cairo_t;
# 153 "/usr/include/cairo/cairo.h"
typedef struct _cairo_surface cairo_surface_t;
# 171 "/usr/include/cairo/cairo.h"
typedef struct _cairo_device cairo_device_t;
# 192 "/usr/include/cairo/cairo.h"
typedef struct _cairo_matrix {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;
# 220 "/usr/include/cairo/cairo.h"
typedef struct _cairo_pattern cairo_pattern_t;
# 232 "/usr/include/cairo/cairo.h"
typedef void (*cairo_destroy_func_t) (void *data);
# 246 "/usr/include/cairo/cairo.h"
typedef struct _cairo_user_data_key {
    int unused;
} cairo_user_data_key_t;
# 314 "/usr/include/cairo/cairo.h"
typedef enum _cairo_status {
    CAIRO_STATUS_SUCCESS = 0,

    CAIRO_STATUS_NO_MEMORY,
    CAIRO_STATUS_INVALID_RESTORE,
    CAIRO_STATUS_INVALID_POP_GROUP,
    CAIRO_STATUS_NO_CURRENT_POINT,
    CAIRO_STATUS_INVALID_MATRIX,
    CAIRO_STATUS_INVALID_STATUS,
    CAIRO_STATUS_NULL_POINTER,
    CAIRO_STATUS_INVALID_STRING,
    CAIRO_STATUS_INVALID_PATH_DATA,
    CAIRO_STATUS_READ_ERROR,
    CAIRO_STATUS_WRITE_ERROR,
    CAIRO_STATUS_SURFACE_FINISHED,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
    CAIRO_STATUS_INVALID_CONTENT,
    CAIRO_STATUS_INVALID_FORMAT,
    CAIRO_STATUS_INVALID_VISUAL,
    CAIRO_STATUS_FILE_NOT_FOUND,
    CAIRO_STATUS_INVALID_DASH,
    CAIRO_STATUS_INVALID_DSC_COMMENT,
    CAIRO_STATUS_INVALID_INDEX,
    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
    CAIRO_STATUS_TEMP_FILE_ERROR,
    CAIRO_STATUS_INVALID_STRIDE,
    CAIRO_STATUS_FONT_TYPE_MISMATCH,
    CAIRO_STATUS_USER_FONT_IMMUTABLE,
    CAIRO_STATUS_USER_FONT_ERROR,
    CAIRO_STATUS_NEGATIVE_COUNT,
    CAIRO_STATUS_INVALID_CLUSTERS,
    CAIRO_STATUS_INVALID_SLANT,
    CAIRO_STATUS_INVALID_WEIGHT,
    CAIRO_STATUS_INVALID_SIZE,
    CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
    CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
    CAIRO_STATUS_DEVICE_ERROR,
    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
    CAIRO_STATUS_DEVICE_FINISHED,
    CAIRO_STATUS_JBIG2_GLOBAL_MISSING,
    CAIRO_STATUS_PNG_ERROR,
    CAIRO_STATUS_FREETYPE_ERROR,
    CAIRO_STATUS_WIN32_GDI_ERROR,
    CAIRO_STATUS_TAG_ERROR,

    CAIRO_STATUS_LAST_STATUS
} cairo_status_t;
# 379 "/usr/include/cairo/cairo.h"
typedef enum _cairo_content {
    CAIRO_CONTENT_COLOR = 0x1000,
    CAIRO_CONTENT_ALPHA = 0x2000,
    CAIRO_CONTENT_COLOR_ALPHA = 0x3000
} cairo_content_t;
# 416 "/usr/include/cairo/cairo.h"
typedef enum _cairo_format {
    CAIRO_FORMAT_INVALID = -1,
    CAIRO_FORMAT_ARGB32 = 0,
    CAIRO_FORMAT_RGB24 = 1,
    CAIRO_FORMAT_A8 = 2,
    CAIRO_FORMAT_A1 = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30 = 5
} cairo_format_t;
# 445 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_write_func_t) (void *closure,
           const unsigned char *data,
           unsigned int length);
# 467 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_read_func_t) (void *closure,
          unsigned char *data,
          unsigned int length);
# 483 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle_int {
    int x, y;
    int width, height;
} cairo_rectangle_int_t;



 cairo_t *
cairo_create (cairo_surface_t *target);

 cairo_t *
cairo_reference (cairo_t *cr);

 void
cairo_destroy (cairo_t *cr);

 unsigned int
cairo_get_reference_count (cairo_t *cr);

 void *
cairo_get_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key);

 cairo_status_t
cairo_set_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);

 void
cairo_save (cairo_t *cr);

 void
cairo_restore (cairo_t *cr);

 void
cairo_push_group (cairo_t *cr);

 void
cairo_push_group_with_content (cairo_t *cr, cairo_content_t content);

 cairo_pattern_t *
cairo_pop_group (cairo_t *cr);

 void
cairo_pop_group_to_source (cairo_t *cr);
# 613 "/usr/include/cairo/cairo.h"
typedef enum _cairo_operator {
    CAIRO_OPERATOR_CLEAR,

    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,

    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,

    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE,

    CAIRO_OPERATOR_MULTIPLY,
    CAIRO_OPERATOR_SCREEN,
    CAIRO_OPERATOR_OVERLAY,
    CAIRO_OPERATOR_DARKEN,
    CAIRO_OPERATOR_LIGHTEN,
    CAIRO_OPERATOR_COLOR_DODGE,
    CAIRO_OPERATOR_COLOR_BURN,
    CAIRO_OPERATOR_HARD_LIGHT,
    CAIRO_OPERATOR_SOFT_LIGHT,
    CAIRO_OPERATOR_DIFFERENCE,
    CAIRO_OPERATOR_EXCLUSION,
    CAIRO_OPERATOR_HSL_HUE,
    CAIRO_OPERATOR_HSL_SATURATION,
    CAIRO_OPERATOR_HSL_COLOR,
    CAIRO_OPERATOR_HSL_LUMINOSITY
} cairo_operator_t;

 void
cairo_set_operator (cairo_t *cr, cairo_operator_t op);

 void
cairo_set_source (cairo_t *cr, cairo_pattern_t *source);

 void
cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);

 void
cairo_set_source_rgba (cairo_t *cr,
         double red, double green, double blue,
         double alpha);

 void
cairo_set_source_surface (cairo_t *cr,
     cairo_surface_t *surface,
     double x,
     double y);

 void
cairo_set_tolerance (cairo_t *cr, double tolerance);
# 709 "/usr/include/cairo/cairo.h"
typedef enum _cairo_antialias {
    CAIRO_ANTIALIAS_DEFAULT,


    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL,


    CAIRO_ANTIALIAS_FAST,
    CAIRO_ANTIALIAS_GOOD,
    CAIRO_ANTIALIAS_BEST
} cairo_antialias_t;

 void
cairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);
# 753 "/usr/include/cairo/cairo.h"
typedef enum _cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;

 void
cairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);

 void
cairo_set_line_width (cairo_t *cr, double width);
# 776 "/usr/include/cairo/cairo.h"
typedef enum _cairo_line_cap {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE
} cairo_line_cap_t;

 void
cairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);
# 800 "/usr/include/cairo/cairo.h"
typedef enum _cairo_line_join {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL
} cairo_line_join_t;

 void
cairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);

 void
cairo_set_dash (cairo_t *cr,
  const double *dashes,
  int num_dashes,
  double offset);

 void
cairo_set_miter_limit (cairo_t *cr, double limit);

 void
cairo_translate (cairo_t *cr, double tx, double ty);

 void
cairo_scale (cairo_t *cr, double sx, double sy);

 void
cairo_rotate (cairo_t *cr, double angle);

 void
cairo_transform (cairo_t *cr,
   const cairo_matrix_t *matrix);

 void
cairo_set_matrix (cairo_t *cr,
    const cairo_matrix_t *matrix);

 void
cairo_identity_matrix (cairo_t *cr);

 void
cairo_user_to_device (cairo_t *cr, double *x, double *y);

 void
cairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);

 void
cairo_device_to_user (cairo_t *cr, double *x, double *y);

 void
cairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);


 void
cairo_new_path (cairo_t *cr);

 void
cairo_move_to (cairo_t *cr, double x, double y);

 void
cairo_new_sub_path (cairo_t *cr);

 void
cairo_line_to (cairo_t *cr, double x, double y);

 void
cairo_curve_to (cairo_t *cr,
  double x1, double y1,
  double x2, double y2,
  double x3, double y3);

 void
cairo_arc (cairo_t *cr,
    double xc, double yc,
    double radius,
    double angle1, double angle2);

 void
cairo_arc_negative (cairo_t *cr,
      double xc, double yc,
      double radius,
      double angle1, double angle2);
# 889 "/usr/include/cairo/cairo.h"
 void
cairo_rel_move_to (cairo_t *cr, double dx, double dy);

 void
cairo_rel_line_to (cairo_t *cr, double dx, double dy);

 void
cairo_rel_curve_to (cairo_t *cr,
      double dx1, double dy1,
      double dx2, double dy2,
      double dx3, double dy3);

 void
cairo_rectangle (cairo_t *cr,
   double x, double y,
   double width, double height);






 void
cairo_close_path (cairo_t *cr);

 void
cairo_path_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);


 void
cairo_paint (cairo_t *cr);

 void
cairo_paint_with_alpha (cairo_t *cr,
   double alpha);

 void
cairo_mask (cairo_t *cr,
     cairo_pattern_t *pattern);

 void
cairo_mask_surface (cairo_t *cr,
      cairo_surface_t *surface,
      double surface_x,
      double surface_y);

 void
cairo_stroke (cairo_t *cr);

 void
cairo_stroke_preserve (cairo_t *cr);

 void
cairo_fill (cairo_t *cr);

 void
cairo_fill_preserve (cairo_t *cr);

 void
cairo_copy_page (cairo_t *cr);

 void
cairo_show_page (cairo_t *cr);


 cairo_bool_t
cairo_in_stroke (cairo_t *cr, double x, double y);

 cairo_bool_t
cairo_in_fill (cairo_t *cr, double x, double y);

 cairo_bool_t
cairo_in_clip (cairo_t *cr, double x, double y);


 void
cairo_stroke_extents (cairo_t *cr,
        double *x1, double *y1,
        double *x2, double *y2);

 void
cairo_fill_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);


 void
cairo_reset_clip (cairo_t *cr);

 void
cairo_clip (cairo_t *cr);

 void
cairo_clip_preserve (cairo_t *cr);

 void
cairo_clip_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);
# 1002 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle {
    double x, y, width, height;
} cairo_rectangle_t;
# 1017 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle_list {
    cairo_status_t status;
    cairo_rectangle_t *rectangles;
    int num_rectangles;
} cairo_rectangle_list_t;

 cairo_rectangle_list_t *
cairo_copy_clip_rectangle_list (cairo_t *cr);

 void
cairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);






 void
cairo_tag_begin (cairo_t *cr, const char *tag_name, const char *attributes);

 void
cairo_tag_end (cairo_t *cr, const char *tag_name);
# 1059 "/usr/include/cairo/cairo.h"
typedef struct _cairo_scaled_font cairo_scaled_font_t;
# 1080 "/usr/include/cairo/cairo.h"
typedef struct _cairo_font_face cairo_font_face_t;
# 1108 "/usr/include/cairo/cairo.h"
typedef struct {
    unsigned long index;
    double x;
    double y;
} cairo_glyph_t;

 cairo_glyph_t *
cairo_glyph_allocate (int num_glyphs);

 void
cairo_glyph_free (cairo_glyph_t *glyphs);
# 1140 "/usr/include/cairo/cairo.h"
typedef struct {
    int num_bytes;
    int num_glyphs;
} cairo_text_cluster_t;

 cairo_text_cluster_t *
cairo_text_cluster_allocate (int num_clusters);

 void
cairo_text_cluster_free (cairo_text_cluster_t *clusters);
# 1160 "/usr/include/cairo/cairo.h"
typedef enum _cairo_text_cluster_flags {
    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001
} cairo_text_cluster_flags_t;
# 1193 "/usr/include/cairo/cairo.h"
typedef struct {
    double x_bearing;
    double y_bearing;
    double width;
    double height;
    double x_advance;
    double y_advance;
} cairo_text_extents_t;
# 1245 "/usr/include/cairo/cairo.h"
typedef struct {
    double ascent;
    double descent;
    double height;
    double max_x_advance;
    double max_y_advance;
} cairo_font_extents_t;
# 1263 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_slant {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
} cairo_font_slant_t;
# 1278 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_weight {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
} cairo_font_weight_t;
# 1302 "/usr/include/cairo/cairo.h"
typedef enum _cairo_subpixel_order {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR
} cairo_subpixel_order_t;
# 1334 "/usr/include/cairo/cairo.h"
typedef enum _cairo_hint_style {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL
} cairo_hint_style_t;
# 1357 "/usr/include/cairo/cairo.h"
typedef enum _cairo_hint_metrics {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON
} cairo_hint_metrics_t;
# 1385 "/usr/include/cairo/cairo.h"
typedef struct _cairo_font_options cairo_font_options_t;

 cairo_font_options_t *
cairo_font_options_create (void);

 cairo_font_options_t *
cairo_font_options_copy (const cairo_font_options_t *original);

 void
cairo_font_options_destroy (cairo_font_options_t *options);

 cairo_status_t
cairo_font_options_status (cairo_font_options_t *options);

 void
cairo_font_options_merge (cairo_font_options_t *options,
     const cairo_font_options_t *other);
 cairo_bool_t
cairo_font_options_equal (const cairo_font_options_t *options,
     const cairo_font_options_t *other);

 unsigned long
cairo_font_options_hash (const cairo_font_options_t *options);

 void
cairo_font_options_set_antialias (cairo_font_options_t *options,
      cairo_antialias_t antialias);
 cairo_antialias_t
cairo_font_options_get_antialias (const cairo_font_options_t *options);

 void
cairo_font_options_set_subpixel_order (cairo_font_options_t *options,
           cairo_subpixel_order_t subpixel_order);
 cairo_subpixel_order_t
cairo_font_options_get_subpixel_order (const cairo_font_options_t *options);

 void
cairo_font_options_set_hint_style (cairo_font_options_t *options,
       cairo_hint_style_t hint_style);
 cairo_hint_style_t
cairo_font_options_get_hint_style (const cairo_font_options_t *options);

 void
cairo_font_options_set_hint_metrics (cairo_font_options_t *options,
         cairo_hint_metrics_t hint_metrics);
 cairo_hint_metrics_t
cairo_font_options_get_hint_metrics (const cairo_font_options_t *options);

 const char *
cairo_font_options_get_variations (cairo_font_options_t *options);

 void
cairo_font_options_set_variations (cairo_font_options_t *options,
                                   const char *variations);




 void
cairo_select_font_face (cairo_t *cr,
   const char *family,
   cairo_font_slant_t slant,
   cairo_font_weight_t weight);

 void
cairo_set_font_size (cairo_t *cr, double size);

 void
cairo_set_font_matrix (cairo_t *cr,
         const cairo_matrix_t *matrix);

 void
cairo_get_font_matrix (cairo_t *cr,
         cairo_matrix_t *matrix);

 void
cairo_set_font_options (cairo_t *cr,
   const cairo_font_options_t *options);

 void
cairo_get_font_options (cairo_t *cr,
   cairo_font_options_t *options);

 void
cairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);

 cairo_font_face_t *
cairo_get_font_face (cairo_t *cr);

 void
cairo_set_scaled_font (cairo_t *cr,
         const cairo_scaled_font_t *scaled_font);

 cairo_scaled_font_t *
cairo_get_scaled_font (cairo_t *cr);

 void
cairo_show_text (cairo_t *cr, const char *utf8);

 void
cairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

 void
cairo_show_text_glyphs (cairo_t *cr,
   const char *utf8,
   int utf8_len,
   const cairo_glyph_t *glyphs,
   int num_glyphs,
   const cairo_text_cluster_t *clusters,
   int num_clusters,
   cairo_text_cluster_flags_t cluster_flags);

 void
cairo_text_path (cairo_t *cr, const char *utf8);

 void
cairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

 void
cairo_text_extents (cairo_t *cr,
      const char *utf8,
      cairo_text_extents_t *extents);

 void
cairo_glyph_extents (cairo_t *cr,
       const cairo_glyph_t *glyphs,
       int num_glyphs,
       cairo_text_extents_t *extents);

 void
cairo_font_extents (cairo_t *cr,
      cairo_font_extents_t *extents);



 cairo_font_face_t *
cairo_font_face_reference (cairo_font_face_t *font_face);

 void
cairo_font_face_destroy (cairo_font_face_t *font_face);

 unsigned int
cairo_font_face_get_reference_count (cairo_font_face_t *font_face);

 cairo_status_t
cairo_font_face_status (cairo_font_face_t *font_face);
# 1572 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_type {
    CAIRO_FONT_TYPE_TOY,
    CAIRO_FONT_TYPE_FT,
    CAIRO_FONT_TYPE_WIN32,
    CAIRO_FONT_TYPE_QUARTZ,
    CAIRO_FONT_TYPE_USER
} cairo_font_type_t;

 cairo_font_type_t
cairo_font_face_get_type (cairo_font_face_t *font_face);

 void *
cairo_font_face_get_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key);

 cairo_status_t
cairo_font_face_set_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key,
          void *user_data,
          cairo_destroy_func_t destroy);



 cairo_scaled_font_t *
cairo_scaled_font_create (cairo_font_face_t *font_face,
     const cairo_matrix_t *font_matrix,
     const cairo_matrix_t *ctm,
     const cairo_font_options_t *options);

 cairo_scaled_font_t *
cairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);

 void
cairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);

 unsigned int
cairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);

 cairo_status_t
cairo_scaled_font_status (cairo_scaled_font_t *scaled_font);

 cairo_font_type_t
cairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);

 void *
cairo_scaled_font_get_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key);

 cairo_status_t
cairo_scaled_font_set_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key,
     void *user_data,
     cairo_destroy_func_t destroy);

 void
cairo_scaled_font_extents (cairo_scaled_font_t *scaled_font,
      cairo_font_extents_t *extents);

 void
cairo_scaled_font_text_extents (cairo_scaled_font_t *scaled_font,
    const char *utf8,
    cairo_text_extents_t *extents);

 void
cairo_scaled_font_glyph_extents (cairo_scaled_font_t *scaled_font,
     const cairo_glyph_t *glyphs,
     int num_glyphs,
     cairo_text_extents_t *extents);

 cairo_status_t
cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t *scaled_font,
      double x,
      double y,
      const char *utf8,
      int utf8_len,
      cairo_glyph_t **glyphs,
      int *num_glyphs,
      cairo_text_cluster_t **clusters,
      int *num_clusters,
      cairo_text_cluster_flags_t *cluster_flags);

 cairo_font_face_t *
cairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);

 void
cairo_scaled_font_get_font_matrix (cairo_scaled_font_t *scaled_font,
       cairo_matrix_t *font_matrix);

 void
cairo_scaled_font_get_ctm (cairo_scaled_font_t *scaled_font,
      cairo_matrix_t *ctm);

 void
cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t *scaled_font,
        cairo_matrix_t *scale_matrix);

 void
cairo_scaled_font_get_font_options (cairo_scaled_font_t *scaled_font,
        cairo_font_options_t *options);




 cairo_font_face_t *
cairo_toy_font_face_create (const char *family,
       cairo_font_slant_t slant,
       cairo_font_weight_t weight);

 const char *
cairo_toy_font_face_get_family (cairo_font_face_t *font_face);

 cairo_font_slant_t
cairo_toy_font_face_get_slant (cairo_font_face_t *font_face);

 cairo_font_weight_t
cairo_toy_font_face_get_weight (cairo_font_face_t *font_face);




 cairo_font_face_t *
cairo_user_font_face_create (void);
# 1729 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_init_func_t) (cairo_scaled_font_t *scaled_font,
             cairo_t *cr,
             cairo_font_extents_t *extents);
# 1776 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t) (cairo_scaled_font_t *scaled_font,
              unsigned long glyph,
              cairo_t *cr,
              cairo_text_extents_t *extents);
# 1846 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t) (cairo_scaled_font_t *scaled_font,
         const char *utf8,
         int utf8_len,
         cairo_glyph_t **glyphs,
         int *num_glyphs,
         cairo_text_cluster_t **clusters,
         int *num_clusters,
         cairo_text_cluster_flags_t *cluster_flags);
# 1893 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t) (cairo_scaled_font_t *scaled_font,
           unsigned long unicode,
           unsigned long *glyph_index);



 void
cairo_user_font_face_set_init_func (cairo_font_face_t *font_face,
        cairo_user_scaled_font_init_func_t init_func);

 void
cairo_user_font_face_set_render_glyph_func (cairo_font_face_t *font_face,
         cairo_user_scaled_font_render_glyph_func_t render_glyph_func);

 void
cairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t *font_face,
           cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func);

 void
cairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t *font_face,
             cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func);



 cairo_user_scaled_font_init_func_t
cairo_user_font_face_get_init_func (cairo_font_face_t *font_face);

 cairo_user_scaled_font_render_glyph_func_t
cairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);

 cairo_user_scaled_font_text_to_glyphs_func_t
cairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);

 cairo_user_scaled_font_unicode_to_glyph_func_t
cairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);




 cairo_operator_t
cairo_get_operator (cairo_t *cr);

 cairo_pattern_t *
cairo_get_source (cairo_t *cr);

 double
cairo_get_tolerance (cairo_t *cr);

 cairo_antialias_t
cairo_get_antialias (cairo_t *cr);

 cairo_bool_t
cairo_has_current_point (cairo_t *cr);

 void
cairo_get_current_point (cairo_t *cr, double *x, double *y);

 cairo_fill_rule_t
cairo_get_fill_rule (cairo_t *cr);

 double
cairo_get_line_width (cairo_t *cr);

 cairo_line_cap_t
cairo_get_line_cap (cairo_t *cr);

 cairo_line_join_t
cairo_get_line_join (cairo_t *cr);

 double
cairo_get_miter_limit (cairo_t *cr);

 int
cairo_get_dash_count (cairo_t *cr);

 void
cairo_get_dash (cairo_t *cr, double *dashes, double *offset);

 void
cairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);

 cairo_surface_t *
cairo_get_target (cairo_t *cr);

 cairo_surface_t *
cairo_get_group_target (cairo_t *cr);
# 1993 "/usr/include/cairo/cairo.h"
typedef enum _cairo_path_data_type {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH
} cairo_path_data_type_t;
# 2068 "/usr/include/cairo/cairo.h"
typedef union _cairo_path_data_t cairo_path_data_t;
union _cairo_path_data_t {
    struct {
 cairo_path_data_type_t type;
 int length;
    } header;
    struct {
 double x, y;
    } point;
};
# 2100 "/usr/include/cairo/cairo.h"
typedef struct cairo_path {
    cairo_status_t status;
    cairo_path_data_t *data;
    int num_data;
} cairo_path_t;

 cairo_path_t *
cairo_copy_path (cairo_t *cr);

 cairo_path_t *
cairo_copy_path_flat (cairo_t *cr);

 void
cairo_append_path (cairo_t *cr,
     const cairo_path_t *path);

 void
cairo_path_destroy (cairo_path_t *path);



 cairo_status_t
cairo_status (cairo_t *cr);

 const char *
cairo_status_to_string (cairo_status_t status);



 cairo_device_t *
cairo_device_reference (cairo_device_t *device);
# 2163 "/usr/include/cairo/cairo.h"
typedef enum _cairo_device_type {
    CAIRO_DEVICE_TYPE_DRM,
    CAIRO_DEVICE_TYPE_GL,
    CAIRO_DEVICE_TYPE_SCRIPT,
    CAIRO_DEVICE_TYPE_XCB,
    CAIRO_DEVICE_TYPE_XLIB,
    CAIRO_DEVICE_TYPE_XML,
    CAIRO_DEVICE_TYPE_COGL,
    CAIRO_DEVICE_TYPE_WIN32,

    CAIRO_DEVICE_TYPE_INVALID = -1
} cairo_device_type_t;

 cairo_device_type_t
cairo_device_get_type (cairo_device_t *device);

 cairo_status_t
cairo_device_status (cairo_device_t *device);

 cairo_status_t
cairo_device_acquire (cairo_device_t *device);

 void
cairo_device_release (cairo_device_t *device);

 void
cairo_device_flush (cairo_device_t *device);

 void
cairo_device_finish (cairo_device_t *device);

 void
cairo_device_destroy (cairo_device_t *device);

 unsigned int
cairo_device_get_reference_count (cairo_device_t *device);

 void *
cairo_device_get_user_data (cairo_device_t *device,
       const cairo_user_data_key_t *key);

 cairo_status_t
cairo_device_set_user_data (cairo_device_t *device,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);




 cairo_surface_t *
cairo_surface_create_similar (cairo_surface_t *other,
         cairo_content_t content,
         int width,
         int height);

 cairo_surface_t *
cairo_surface_create_similar_image (cairo_surface_t *other,
        cairo_format_t format,
        int width,
        int height);

 cairo_surface_t *
cairo_surface_map_to_image (cairo_surface_t *surface,
       const cairo_rectangle_int_t *extents);

 void
cairo_surface_unmap_image (cairo_surface_t *surface,
      cairo_surface_t *image);

 cairo_surface_t *
cairo_surface_create_for_rectangle (cairo_surface_t *target,
                                    double x,
                                    double y,
                                    double width,
                                    double height);
# 2249 "/usr/include/cairo/cairo.h"
typedef enum {
 CAIRO_SURFACE_OBSERVER_NORMAL = 0,
 CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 0x1
} cairo_surface_observer_mode_t;

 cairo_surface_t *
cairo_surface_create_observer (cairo_surface_t *target,
          cairo_surface_observer_mode_t mode);

typedef void (*cairo_surface_observer_callback_t) (cairo_surface_t *observer,
         cairo_surface_t *target,
         void *data);

 cairo_status_t
cairo_surface_observer_add_paint_callback (cairo_surface_t *abstract_surface,
        cairo_surface_observer_callback_t func,
        void *data);

 cairo_status_t
cairo_surface_observer_add_mask_callback (cairo_surface_t *abstract_surface,
       cairo_surface_observer_callback_t func,
       void *data);

 cairo_status_t
cairo_surface_observer_add_fill_callback (cairo_surface_t *abstract_surface,
       cairo_surface_observer_callback_t func,
       void *data);

 cairo_status_t
cairo_surface_observer_add_stroke_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);

 cairo_status_t
cairo_surface_observer_add_glyphs_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);

 cairo_status_t
cairo_surface_observer_add_flush_callback (cairo_surface_t *abstract_surface,
        cairo_surface_observer_callback_t func,
        void *data);

 cairo_status_t
cairo_surface_observer_add_finish_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);

 cairo_status_t
cairo_surface_observer_print (cairo_surface_t *surface,
         cairo_write_func_t write_func,
         void *closure);
 double
cairo_surface_observer_elapsed (cairo_surface_t *surface);

 cairo_status_t
cairo_device_observer_print (cairo_device_t *device,
        cairo_write_func_t write_func,
        void *closure);

 double
cairo_device_observer_elapsed (cairo_device_t *device);

 double
cairo_device_observer_paint_elapsed (cairo_device_t *device);

 double
cairo_device_observer_mask_elapsed (cairo_device_t *device);

 double
cairo_device_observer_fill_elapsed (cairo_device_t *device);

 double
cairo_device_observer_stroke_elapsed (cairo_device_t *device);

 double
cairo_device_observer_glyphs_elapsed (cairo_device_t *device);

 cairo_surface_t *
cairo_surface_reference (cairo_surface_t *surface);

 void
cairo_surface_finish (cairo_surface_t *surface);

 void
cairo_surface_destroy (cairo_surface_t *surface);

 cairo_device_t *
cairo_surface_get_device (cairo_surface_t *surface);

 unsigned int
cairo_surface_get_reference_count (cairo_surface_t *surface);

 cairo_status_t
cairo_surface_status (cairo_surface_t *surface);
# 2397 "/usr/include/cairo/cairo.h"
typedef enum _cairo_surface_type {
    CAIRO_SURFACE_TYPE_IMAGE,
    CAIRO_SURFACE_TYPE_PDF,
    CAIRO_SURFACE_TYPE_PS,
    CAIRO_SURFACE_TYPE_XLIB,
    CAIRO_SURFACE_TYPE_XCB,
    CAIRO_SURFACE_TYPE_GLITZ,
    CAIRO_SURFACE_TYPE_QUARTZ,
    CAIRO_SURFACE_TYPE_WIN32,
    CAIRO_SURFACE_TYPE_BEOS,
    CAIRO_SURFACE_TYPE_DIRECTFB,
    CAIRO_SURFACE_TYPE_SVG,
    CAIRO_SURFACE_TYPE_OS2,
    CAIRO_SURFACE_TYPE_WIN32_PRINTING,
    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
    CAIRO_SURFACE_TYPE_SCRIPT,
    CAIRO_SURFACE_TYPE_QT,
    CAIRO_SURFACE_TYPE_RECORDING,
    CAIRO_SURFACE_TYPE_VG,
    CAIRO_SURFACE_TYPE_GL,
    CAIRO_SURFACE_TYPE_DRM,
    CAIRO_SURFACE_TYPE_TEE,
    CAIRO_SURFACE_TYPE_XML,
    CAIRO_SURFACE_TYPE_SKIA,
    CAIRO_SURFACE_TYPE_SUBSURFACE,
    CAIRO_SURFACE_TYPE_COGL
} cairo_surface_type_t;

 cairo_surface_type_t
cairo_surface_get_type (cairo_surface_t *surface);

 cairo_content_t
cairo_surface_get_content (cairo_surface_t *surface);



 cairo_status_t
cairo_surface_write_to_png (cairo_surface_t *surface,
       const char *filename);

 cairo_status_t
cairo_surface_write_to_png_stream (cairo_surface_t *surface,
       cairo_write_func_t write_func,
       void *closure);



 void *
cairo_surface_get_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key);

 cairo_status_t
cairo_surface_set_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
# 2467 "/usr/include/cairo/cairo.h"
 void
cairo_surface_get_mime_data (cairo_surface_t *surface,
                             const char *mime_type,
                             const unsigned char **data,
                             unsigned long *length);

 cairo_status_t
cairo_surface_set_mime_data (cairo_surface_t *surface,
                             const char *mime_type,
                             const unsigned char *data,
                             unsigned long length,
        cairo_destroy_func_t destroy,
        void *closure);

 cairo_bool_t
cairo_surface_supports_mime_type (cairo_surface_t *surface,
      const char *mime_type);

 void
cairo_surface_get_font_options (cairo_surface_t *surface,
    cairo_font_options_t *options);

 void
cairo_surface_flush (cairo_surface_t *surface);

 void
cairo_surface_mark_dirty (cairo_surface_t *surface);

 void
cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface,
        int x,
        int y,
        int width,
        int height);

 void
cairo_surface_set_device_scale (cairo_surface_t *surface,
    double x_scale,
    double y_scale);

 void
cairo_surface_get_device_scale (cairo_surface_t *surface,
    double *x_scale,
    double *y_scale);

 void
cairo_surface_set_device_offset (cairo_surface_t *surface,
     double x_offset,
     double y_offset);

 void
cairo_surface_get_device_offset (cairo_surface_t *surface,
     double *x_offset,
     double *y_offset);

 void
cairo_surface_set_fallback_resolution (cairo_surface_t *surface,
           double x_pixels_per_inch,
           double y_pixels_per_inch);

 void
cairo_surface_get_fallback_resolution (cairo_surface_t *surface,
           double *x_pixels_per_inch,
           double *y_pixels_per_inch);

 void
cairo_surface_copy_page (cairo_surface_t *surface);

 void
cairo_surface_show_page (cairo_surface_t *surface);

 cairo_bool_t
cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);



 cairo_surface_t *
cairo_image_surface_create (cairo_format_t format,
       int width,
       int height);

 int
cairo_format_stride_for_width (cairo_format_t format,
          int width);

 cairo_surface_t *
cairo_image_surface_create_for_data (unsigned char *data,
         cairo_format_t format,
         int width,
         int height,
         int stride);

 unsigned char *
cairo_image_surface_get_data (cairo_surface_t *surface);

 cairo_format_t
cairo_image_surface_get_format (cairo_surface_t *surface);

 int
cairo_image_surface_get_width (cairo_surface_t *surface);

 int
cairo_image_surface_get_height (cairo_surface_t *surface);

 int
cairo_image_surface_get_stride (cairo_surface_t *surface);



 cairo_surface_t *
cairo_image_surface_create_from_png (const char *filename);

 cairo_surface_t *
cairo_image_surface_create_from_png_stream (cairo_read_func_t read_func,
         void *closure);





 cairo_surface_t *
cairo_recording_surface_create (cairo_content_t content,
                                const cairo_rectangle_t *extents);

 void
cairo_recording_surface_ink_extents (cairo_surface_t *surface,
                                     double *x0,
                                     double *y0,
                                     double *width,
                                     double *height);

 cairo_bool_t
cairo_recording_surface_get_extents (cairo_surface_t *surface,
         cairo_rectangle_t *extents);
# 2628 "/usr/include/cairo/cairo.h"
typedef cairo_surface_t *
(*cairo_raster_source_acquire_func_t) (cairo_pattern_t *pattern,
           void *callback_data,
           cairo_surface_t *target,
           const cairo_rectangle_int_t *extents);
# 2647 "/usr/include/cairo/cairo.h"
typedef void
(*cairo_raster_source_release_func_t) (cairo_pattern_t *pattern,
           void *callback_data,
           cairo_surface_t *surface);
# 2668 "/usr/include/cairo/cairo.h"
typedef cairo_status_t
(*cairo_raster_source_snapshot_func_t) (cairo_pattern_t *pattern,
     void *callback_data);
# 2686 "/usr/include/cairo/cairo.h"
typedef cairo_status_t
(*cairo_raster_source_copy_func_t) (cairo_pattern_t *pattern,
        void *callback_data,
        const cairo_pattern_t *other);
# 2701 "/usr/include/cairo/cairo.h"
typedef void
(*cairo_raster_source_finish_func_t) (cairo_pattern_t *pattern,
          void *callback_data);

 cairo_pattern_t *
cairo_pattern_create_raster_source (void *user_data,
        cairo_content_t content,
        int width, int height);

 void
cairo_raster_source_pattern_set_callback_data (cairo_pattern_t *pattern,
            void *data);

 void *
cairo_raster_source_pattern_get_callback_data (cairo_pattern_t *pattern);

 void
cairo_raster_source_pattern_set_acquire (cairo_pattern_t *pattern,
      cairo_raster_source_acquire_func_t acquire,
      cairo_raster_source_release_func_t release);

 void
cairo_raster_source_pattern_get_acquire (cairo_pattern_t *pattern,
      cairo_raster_source_acquire_func_t *acquire,
      cairo_raster_source_release_func_t *release);
 void
cairo_raster_source_pattern_set_snapshot (cairo_pattern_t *pattern,
       cairo_raster_source_snapshot_func_t snapshot);

 cairo_raster_source_snapshot_func_t
cairo_raster_source_pattern_get_snapshot (cairo_pattern_t *pattern);

 void
cairo_raster_source_pattern_set_copy (cairo_pattern_t *pattern,
          cairo_raster_source_copy_func_t copy);

 cairo_raster_source_copy_func_t
cairo_raster_source_pattern_get_copy (cairo_pattern_t *pattern);

 void
cairo_raster_source_pattern_set_finish (cairo_pattern_t *pattern,
     cairo_raster_source_finish_func_t finish);

 cairo_raster_source_finish_func_t
cairo_raster_source_pattern_get_finish (cairo_pattern_t *pattern);



 cairo_pattern_t *
cairo_pattern_create_rgb (double red, double green, double blue);

 cairo_pattern_t *
cairo_pattern_create_rgba (double red, double green, double blue,
      double alpha);

 cairo_pattern_t *
cairo_pattern_create_for_surface (cairo_surface_t *surface);

 cairo_pattern_t *
cairo_pattern_create_linear (double x0, double y0,
        double x1, double y1);

 cairo_pattern_t *
cairo_pattern_create_radial (double cx0, double cy0, double radius0,
        double cx1, double cy1, double radius1);

 cairo_pattern_t *
cairo_pattern_create_mesh (void);

 cairo_pattern_t *
cairo_pattern_reference (cairo_pattern_t *pattern);

 void
cairo_pattern_destroy (cairo_pattern_t *pattern);

 unsigned int
cairo_pattern_get_reference_count (cairo_pattern_t *pattern);

 cairo_status_t
cairo_pattern_status (cairo_pattern_t *pattern);

 void *
cairo_pattern_get_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key);

 cairo_status_t
cairo_pattern_set_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
# 2824 "/usr/include/cairo/cairo.h"
typedef enum _cairo_pattern_type {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL,
    CAIRO_PATTERN_TYPE_MESH,
    CAIRO_PATTERN_TYPE_RASTER_SOURCE
} cairo_pattern_type_t;

 cairo_pattern_type_t
cairo_pattern_get_type (cairo_pattern_t *pattern);

 void
cairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern,
      double offset,
      double red, double green, double blue);

 void
cairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern,
       double offset,
       double red, double green, double blue,
       double alpha);

 void
cairo_mesh_pattern_begin_patch (cairo_pattern_t *pattern);

 void
cairo_mesh_pattern_end_patch (cairo_pattern_t *pattern);

 void
cairo_mesh_pattern_curve_to (cairo_pattern_t *pattern,
        double x1, double y1,
        double x2, double y2,
        double x3, double y3);

 void
cairo_mesh_pattern_line_to (cairo_pattern_t *pattern,
       double x, double y);

 void
cairo_mesh_pattern_move_to (cairo_pattern_t *pattern,
       double x, double y);

 void
cairo_mesh_pattern_set_control_point (cairo_pattern_t *pattern,
          unsigned int point_num,
          double x, double y);

 void
cairo_mesh_pattern_set_corner_color_rgb (cairo_pattern_t *pattern,
      unsigned int corner_num,
      double red, double green, double blue);

 void
cairo_mesh_pattern_set_corner_color_rgba (cairo_pattern_t *pattern,
       unsigned int corner_num,
       double red, double green, double blue,
       double alpha);

 void
cairo_pattern_set_matrix (cairo_pattern_t *pattern,
     const cairo_matrix_t *matrix);

 void
cairo_pattern_get_matrix (cairo_pattern_t *pattern,
     cairo_matrix_t *matrix);
# 2916 "/usr/include/cairo/cairo.h"
typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD
} cairo_extend_t;

 void
cairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);

 cairo_extend_t
cairo_pattern_get_extend (cairo_pattern_t *pattern);
# 2949 "/usr/include/cairo/cairo.h"
typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;

 void
cairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);

 cairo_filter_t
cairo_pattern_get_filter (cairo_pattern_t *pattern);

 cairo_status_t
cairo_pattern_get_rgba (cairo_pattern_t *pattern,
   double *red, double *green,
   double *blue, double *alpha);

 cairo_status_t
cairo_pattern_get_surface (cairo_pattern_t *pattern,
      cairo_surface_t **surface);


 cairo_status_t
cairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern,
       int index, double *offset,
       double *red, double *green,
       double *blue, double *alpha);

 cairo_status_t
cairo_pattern_get_color_stop_count (cairo_pattern_t *pattern,
        int *count);

 cairo_status_t
cairo_pattern_get_linear_points (cairo_pattern_t *pattern,
     double *x0, double *y0,
     double *x1, double *y1);

 cairo_status_t
cairo_pattern_get_radial_circles (cairo_pattern_t *pattern,
      double *x0, double *y0, double *r0,
      double *x1, double *y1, double *r1);

 cairo_status_t
cairo_mesh_pattern_get_patch_count (cairo_pattern_t *pattern,
        unsigned int *count);

 cairo_path_t *
cairo_mesh_pattern_get_path (cairo_pattern_t *pattern,
        unsigned int patch_num);

 cairo_status_t
cairo_mesh_pattern_get_corner_color_rgba (cairo_pattern_t *pattern,
       unsigned int patch_num,
       unsigned int corner_num,
       double *red, double *green,
       double *blue, double *alpha);

 cairo_status_t
cairo_mesh_pattern_get_control_point (cairo_pattern_t *pattern,
          unsigned int patch_num,
          unsigned int point_num,
          double *x, double *y);



 void
cairo_matrix_init (cairo_matrix_t *matrix,
     double xx, double yx,
     double xy, double yy,
     double x0, double y0);

 void
cairo_matrix_init_identity (cairo_matrix_t *matrix);

 void
cairo_matrix_init_translate (cairo_matrix_t *matrix,
        double tx, double ty);

 void
cairo_matrix_init_scale (cairo_matrix_t *matrix,
    double sx, double sy);

 void
cairo_matrix_init_rotate (cairo_matrix_t *matrix,
     double radians);

 void
cairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);

 void
cairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);

 void
cairo_matrix_rotate (cairo_matrix_t *matrix, double radians);

 cairo_status_t
cairo_matrix_invert (cairo_matrix_t *matrix);

 void
cairo_matrix_multiply (cairo_matrix_t *result,
         const cairo_matrix_t *a,
         const cairo_matrix_t *b);

 void
cairo_matrix_transform_distance (const cairo_matrix_t *matrix,
     double *dx, double *dy);

 void
cairo_matrix_transform_point (const cairo_matrix_t *matrix,
         double *x, double *y);
# 3078 "/usr/include/cairo/cairo.h"
typedef struct _cairo_region cairo_region_t;
# 3091 "/usr/include/cairo/cairo.h"
typedef enum _cairo_region_overlap {
    CAIRO_REGION_OVERLAP_IN,
    CAIRO_REGION_OVERLAP_OUT,
    CAIRO_REGION_OVERLAP_PART
} cairo_region_overlap_t;

 cairo_region_t *
cairo_region_create (void);

 cairo_region_t *
cairo_region_create_rectangle (const cairo_rectangle_int_t *rectangle);

 cairo_region_t *
cairo_region_create_rectangles (const cairo_rectangle_int_t *rects,
    int count);

 cairo_region_t *
cairo_region_copy (const cairo_region_t *original);

 cairo_region_t *
cairo_region_reference (cairo_region_t *region);

 void
cairo_region_destroy (cairo_region_t *region);

 cairo_bool_t
cairo_region_equal (const cairo_region_t *a, const cairo_region_t *b);

 cairo_status_t
cairo_region_status (const cairo_region_t *region);

 void
cairo_region_get_extents (const cairo_region_t *region,
     cairo_rectangle_int_t *extents);

 int
cairo_region_num_rectangles (const cairo_region_t *region);

 void
cairo_region_get_rectangle (const cairo_region_t *region,
       int nth,
       cairo_rectangle_int_t *rectangle);

 cairo_bool_t
cairo_region_is_empty (const cairo_region_t *region);

 cairo_region_overlap_t
cairo_region_contains_rectangle (const cairo_region_t *region,
     const cairo_rectangle_int_t *rectangle);

 cairo_bool_t
cairo_region_contains_point (const cairo_region_t *region, int x, int y);

 void
cairo_region_translate (cairo_region_t *region, int dx, int dy);

 cairo_status_t
cairo_region_subtract (cairo_region_t *dst, const cairo_region_t *other);

 cairo_status_t
cairo_region_subtract_rectangle (cairo_region_t *dst,
     const cairo_rectangle_int_t *rectangle);

 cairo_status_t
cairo_region_intersect (cairo_region_t *dst, const cairo_region_t *other);

 cairo_status_t
cairo_region_intersect_rectangle (cairo_region_t *dst,
      const cairo_rectangle_int_t *rectangle);

 cairo_status_t
cairo_region_union (cairo_region_t *dst, const cairo_region_t *other);

 cairo_status_t
cairo_region_union_rectangle (cairo_region_t *dst,
         const cairo_rectangle_int_t *rectangle);

 cairo_status_t
cairo_region_xor (cairo_region_t *dst, const cairo_region_t *other);

 cairo_status_t
cairo_region_xor_rectangle (cairo_region_t *dst,
       const cairo_rectangle_int_t *rectangle);


 void
cairo_debug_reset_static_data (void);



# 32 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdktypes.h"
# 1 "/usr/include/pango-1.0/pango/pango.h" 1
# 25 "/usr/include/pango-1.0/pango/pango.h"
# 1 "/usr/include/pango-1.0/pango/pango-attributes.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-attributes.h"
# 1 "/usr/include/pango-1.0/pango/pango-font.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-font.h"
# 1 "/usr/include/pango-1.0/pango/pango-coverage.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-coverage.h"
# 1 "/usr/include/pango-1.0/pango/pango-version-macros.h" 1
# 23 "/usr/include/pango-1.0/pango/pango-version-macros.h"
# 1 "/usr/include/pango-1.0/pango/pango-features.h" 1
# 24 "/usr/include/pango-1.0/pango/pango-version-macros.h" 2
# 28 "/usr/include/pango-1.0/pango/pango-coverage.h" 2
# 1 "/usr/include/harfbuzz/hb.h" 1
# 31 "/usr/include/harfbuzz/hb.h"
# 1 "/usr/include/harfbuzz/hb-blob.h" 1
# 34 "/usr/include/harfbuzz/hb-blob.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 69 "/usr/include/harfbuzz/hb-common.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 2 3 4
# 70 "/usr/include/harfbuzz/hb-common.h" 2
# 89 "/usr/include/harfbuzz/hb-common.h"









# 97 "/usr/include/harfbuzz/hb-common.h"
typedef int hb_bool_t;
# 106 "/usr/include/harfbuzz/hb-common.h"
typedef uint32_t hb_codepoint_t;
# 115 "/usr/include/harfbuzz/hb-common.h"
typedef int32_t hb_position_t;






typedef uint32_t hb_mask_t;

typedef union _hb_var_int_t {
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_int_t;
# 147 "/usr/include/harfbuzz/hb-common.h"
typedef uint32_t hb_tag_t;
# 170 "/usr/include/harfbuzz/hb-common.h"
extern hb_tag_t
hb_tag_from_string (const char *str, int len);


extern void
hb_tag_to_string (hb_tag_t tag, char *buf);
# 193 "/usr/include/harfbuzz/hb-common.h"
typedef enum {
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT
} hb_direction_t;


extern hb_direction_t
hb_direction_from_string (const char *str, int len);

extern const char *
hb_direction_to_string (hb_direction_t direction);
# 266 "/usr/include/harfbuzz/hb-common.h"
typedef const struct hb_language_impl_t *hb_language_t;

extern hb_language_t
hb_language_from_string (const char *str, int len);

extern const char *
hb_language_to_string (hb_language_t language);



extern hb_language_t
hb_language_get_default (void);
# 447 "/usr/include/harfbuzz/hb-common.h"
typedef enum
{
          HB_SCRIPT_COMMON = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('y')&0xFF))),
          HB_SCRIPT_INHERITED = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
          HB_SCRIPT_UNKNOWN = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('z')&0xFF)<<16)|(((uint32_t)('z')&0xFF)<<8)|((uint32_t)('z')&0xFF))),

          HB_SCRIPT_ARABIC = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
          HB_SCRIPT_ARMENIAN = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
          HB_SCRIPT_BENGALI = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_CYRILLIC = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
          HB_SCRIPT_DEVANAGARI = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('v')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_GEORGIAN = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_GREEK = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
          HB_SCRIPT_GUJARATI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('j')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_GURMUKHI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
          HB_SCRIPT_HANGUL = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_HAN = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_HEBREW = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('b')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_HIRAGANA = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_KANNADA = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('n')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_KATAKANA = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_LAO = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_LATIN = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
          HB_SCRIPT_MALAYALAM = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_ORIYA = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_TAMIL = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
          HB_SCRIPT_TELUGU = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
          HB_SCRIPT_THAI = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('i')&0xFF))),

          HB_SCRIPT_TIBETAN = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('b')&0xFF)<<8)|((uint32_t)('t')&0xFF))),

          HB_SCRIPT_BOPOMOFO = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_BRAILLE = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_CANADIAN_SYLLABICS = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
          HB_SCRIPT_CHEROKEE = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_ETHIOPIC = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_KHMER = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_MONGOLIAN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_MYANMAR = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_OGHAM = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_RUNIC = ((hb_tag_t)((((uint32_t)('R')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_SINHALA = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
          HB_SCRIPT_SYRIAC = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
          HB_SCRIPT_THAANA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_YI = ((hb_tag_t)((((uint32_t)('Y')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('i')&0xFF)<<8)|((uint32_t)('i')&0xFF))),

          HB_SCRIPT_DESERET = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
          HB_SCRIPT_GOTHIC = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
          HB_SCRIPT_OLD_ITALIC = ((hb_tag_t)((((uint32_t)('I')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('l')&0xFF))),

          HB_SCRIPT_BUHID = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_HANUNOO = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_TAGALOG = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_TAGBANWA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('b')&0xFF))),

          HB_SCRIPT_CYPRIOT = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('p')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
          HB_SCRIPT_LIMBU = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
          HB_SCRIPT_LINEAR_B = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
          HB_SCRIPT_OSMANYA = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_SHAVIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('w')&0xFF))),
          HB_SCRIPT_TAI_LE = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('e')&0xFF))),
          HB_SCRIPT_UGARITIC = ((hb_tag_t)((((uint32_t)('U')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('r')&0xFF))),

          HB_SCRIPT_BUGINESE = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_COPTIC = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
          HB_SCRIPT_GLAGOLITIC = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_KHAROSHTHI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_NEW_TAI_LUE = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
          HB_SCRIPT_OLD_PERSIAN = ((hb_tag_t)((((uint32_t)('X')&0xFF)<<24)|(((uint32_t)('p')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_SYLOTI_NAGRI = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_TIFINAGH = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('f')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),

          HB_SCRIPT_BALINESE = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_CUNEIFORM = ((hb_tag_t)((((uint32_t)('X')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('x')&0xFF))),
          HB_SCRIPT_NKO = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('k')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_PHAGS_PA = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_PHOENICIAN = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('x')&0xFF))),

          HB_SCRIPT_CARIAN = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_CHAM = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_KAYAH_LI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_LEPCHA = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
          HB_SCRIPT_LYCIAN = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('c')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_LYDIAN = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_OL_CHIKI = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('c')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
          HB_SCRIPT_REJANG = ((hb_tag_t)((((uint32_t)('R')&0xFF)<<24)|(((uint32_t)('j')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_SAURASHTRA = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_SUNDANESE = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_VAI = ((hb_tag_t)((((uint32_t)('V')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('i')&0xFF)<<8)|((uint32_t)('i')&0xFF))),

          HB_SCRIPT_AVESTAN = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('v')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
          HB_SCRIPT_BAMUM = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
          HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('p')&0xFF))),
          HB_SCRIPT_IMPERIAL_ARAMAIC = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_JAVANESE = ((hb_tag_t)((((uint32_t)('J')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('v')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_KAITHI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_LISU = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
          HB_SCRIPT_MEETEI_MAYEK = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_OLD_SOUTH_ARABIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
          HB_SCRIPT_OLD_TURKIC = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
          HB_SCRIPT_SAMARITAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_TAI_THAM = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_TAI_VIET = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('v')&0xFF)<<8)|((uint32_t)('t')&0xFF))),

          HB_SCRIPT_BATAK = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
          HB_SCRIPT_BRAHMI = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
          HB_SCRIPT_MANDAIC = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),

          HB_SCRIPT_CHAKMA = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_MEROITIC_CURSIVE = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
          HB_SCRIPT_MEROITIC_HIEROGLYPHS = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_MIAO = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_SHARADA = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_SORA_SOMPENG = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_TAKRI = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('r')&0xFF))),




          HB_SCRIPT_BASSA_VAH = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
          HB_SCRIPT_CAUCASIAN_ALBANIAN = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
          HB_SCRIPT_DUPLOYAN = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
          HB_SCRIPT_ELBASAN = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('b')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_GRANTHA = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
          HB_SCRIPT_KHOJKI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('j')&0xFF))),
          HB_SCRIPT_KHUDAWADI = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_LINEAR_A = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_MAHAJANI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('j')&0xFF))),
          HB_SCRIPT_MANICHAEAN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_MENDE_KIKAKUI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_MODI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
          HB_SCRIPT_MRO = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_NABATAEAN = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('b')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
          HB_SCRIPT_OLD_NORTH_ARABIAN = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
          HB_SCRIPT_OLD_PERMIC = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_PAHAWH_HMONG = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('m')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_PALMYRENE = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_PAU_CIN_HAU = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
          HB_SCRIPT_PSALTER_PAHLAVI = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('p')&0xFF))),
          HB_SCRIPT_SIDDHAM = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_TIRHUTA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
          HB_SCRIPT_WARANG_CITI = ((hb_tag_t)((((uint32_t)('W')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('a')&0xFF))),

          HB_SCRIPT_AHOM = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('w')&0xFF))),
          HB_SCRIPT_HATRAN = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_MULTANI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
          HB_SCRIPT_OLD_HUNGARIAN = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_SIGNWRITING = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('w')&0xFF))),




          HB_SCRIPT_ADLAM = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('d')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_BHAIKSUKI = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
          HB_SCRIPT_MARCHEN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
          HB_SCRIPT_OSAGE = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('e')&0xFF))),
          HB_SCRIPT_TANGUT = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_NEWA = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('w')&0xFF)<<8)|((uint32_t)('a')&0xFF))),




          HB_SCRIPT_MASARAM_GONDI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_NUSHU = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
          HB_SCRIPT_SOYOMBO = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_ZANABAZAR_SQUARE = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('b')&0xFF))),




          HB_SCRIPT_DOGRA = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
          HB_SCRIPT_GUNJALA_GONDI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_HANIFI_ROHINGYA = ((hb_tag_t)((((uint32_t)('R')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
          HB_SCRIPT_MAKASAR = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
          HB_SCRIPT_MEDEFAIDRIN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('f')&0xFF))),
          HB_SCRIPT_OLD_SOGDIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
          HB_SCRIPT_SOGDIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('d')&0xFF))),




          HB_SCRIPT_ELYMAIC = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
          HB_SCRIPT_NANDINAGARI = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
          HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('m')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('p')&0xFF))),
          HB_SCRIPT_WANCHO = ((hb_tag_t)((((uint32_t)('W')&0xFF)<<24)|(((uint32_t)('c')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('o')&0xFF))),




          HB_SCRIPT_CHORASMIAN = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
          HB_SCRIPT_DIVES_AKURU = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
          HB_SCRIPT_KHITAN_SMALL_SCRIPT = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
          HB_SCRIPT_YEZIDI = ((hb_tag_t)((((uint32_t)('Y')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('z')&0xFF)<<8)|((uint32_t)('i')&0xFF))),


  HB_SCRIPT_INVALID = ((hb_tag_t)((((uint32_t)(0)&0xFF)<<24)|(((uint32_t)(0)&0xFF)<<16)|(((uint32_t)(0)&0xFF)<<8)|((uint32_t)(0)&0xFF))),
# 656 "/usr/include/harfbuzz/hb-common.h"
  _HB_SCRIPT_MAX_VALUE = ((hb_tag_t)((((uint32_t)(0x7f)&0xFF)<<24)|(((uint32_t)(0xff)&0xFF)<<16)|(((uint32_t)(0xff)&0xFF)<<8)|((uint32_t)(0xff)&0xFF))),
  _HB_SCRIPT_MAX_VALUE_SIGNED = ((hb_tag_t)((((uint32_t)(0x7f)&0xFF)<<24)|(((uint32_t)(0xff)&0xFF)<<16)|(((uint32_t)(0xff)&0xFF)<<8)|((uint32_t)(0xff)&0xFF)))

} hb_script_t;




extern hb_script_t
hb_script_from_iso15924_tag (hb_tag_t tag);

extern hb_script_t
hb_script_from_string (const char *str, int len);

extern hb_tag_t
hb_script_to_iso15924_tag (hb_script_t script);

extern hb_direction_t
hb_script_get_horizontal_direction (hb_script_t script);
# 685 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_user_data_key_t {

  char unused;
} hb_user_data_key_t;

typedef void (*hb_destroy_func_t) (void *user_data);
# 723 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_feature_t {
  hb_tag_t tag;
  uint32_t value;
  unsigned int start;
  unsigned int end;
} hb_feature_t;

extern hb_bool_t
hb_feature_from_string (const char *str, int len,
   hb_feature_t *feature);

extern void
hb_feature_to_string (hb_feature_t *feature,
        char *buf, unsigned int size);
# 749 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_variation_t {
  hb_tag_t tag;
  float value;
} hb_variation_t;

extern hb_bool_t
hb_variation_from_string (const char *str, int len,
     hb_variation_t *variation);

extern void
hb_variation_to_string (hb_variation_t *variation,
   char *buf, unsigned int size);
# 770 "/usr/include/harfbuzz/hb-common.h"
typedef uint32_t hb_color_t;



extern uint8_t
hb_color_get_alpha (hb_color_t color);


extern uint8_t
hb_color_get_red (hb_color_t color);


extern uint8_t
hb_color_get_green (hb_color_t color);


extern uint8_t
hb_color_get_blue (hb_color_t color);



# 35 "/usr/include/harfbuzz/hb-blob.h" 2


# 67 "/usr/include/harfbuzz/hb-blob.h"
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;
# 82 "/usr/include/harfbuzz/hb-blob.h"
typedef struct hb_blob_t hb_blob_t;

extern hb_blob_t *
hb_blob_create (const char *data,
  unsigned int length,
  hb_memory_mode_t mode,
  void *user_data,
  hb_destroy_func_t destroy);

extern hb_blob_t *
hb_blob_create_from_file (const char *file_name);







extern hb_blob_t *
hb_blob_create_sub_blob (hb_blob_t *parent,
    unsigned int offset,
    unsigned int length);

extern hb_blob_t *
hb_blob_copy_writable_or_fail (hb_blob_t *blob);

extern hb_blob_t *
hb_blob_get_empty (void);

extern hb_blob_t *
hb_blob_reference (hb_blob_t *blob);

extern void
hb_blob_destroy (hb_blob_t *blob);

extern hb_bool_t
hb_blob_set_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


extern void *
hb_blob_get_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key);


extern void
hb_blob_make_immutable (hb_blob_t *blob);

extern hb_bool_t
hb_blob_is_immutable (hb_blob_t *blob);


extern unsigned int
hb_blob_get_length (hb_blob_t *blob);

extern const char *
hb_blob_get_data (hb_blob_t *blob, unsigned int *length);

extern char *
hb_blob_get_data_writable (hb_blob_t *blob, unsigned int *length);


# 32 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-buffer.h" 1
# 37 "/usr/include/harfbuzz/hb-buffer.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 38 "/usr/include/harfbuzz/hb-buffer.h" 2
# 1 "/usr/include/harfbuzz/hb-unicode.h" 1
# 38 "/usr/include/harfbuzz/hb-unicode.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 39 "/usr/include/harfbuzz/hb-unicode.h" 2


# 89 "/usr/include/harfbuzz/hb-unicode.h"
typedef enum
{
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
} hb_unicode_general_category_t;
# 191 "/usr/include/harfbuzz/hb-unicode.h"
typedef enum
{
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,


  HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26,


  HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35,


  HB_UNICODE_COMBINING_CLASS_CCC36 = 36,


  HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91,


  HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107,


  HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122,


  HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
  HB_UNICODE_COMBINING_CLASS_CCC133 = 132,


  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
  HB_UNICODE_COMBINING_CLASS_BELOW = 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
  HB_UNICODE_COMBINING_CLASS_LEFT = 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,

  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,

  HB_UNICODE_COMBINING_CLASS_INVALID = 255
} hb_unicode_combining_class_t;
# 287 "/usr/include/harfbuzz/hb-unicode.h"
typedef struct hb_unicode_funcs_t hb_unicode_funcs_t;





extern hb_unicode_funcs_t *
hb_unicode_funcs_get_default (void);


extern hb_unicode_funcs_t *
hb_unicode_funcs_create (hb_unicode_funcs_t *parent);

extern hb_unicode_funcs_t *
hb_unicode_funcs_get_empty (void);

extern hb_unicode_funcs_t *
hb_unicode_funcs_reference (hb_unicode_funcs_t *ufuncs);

extern void
hb_unicode_funcs_destroy (hb_unicode_funcs_t *ufuncs);

extern hb_bool_t
hb_unicode_funcs_set_user_data (hb_unicode_funcs_t *ufuncs,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);


extern void *
hb_unicode_funcs_get_user_data (hb_unicode_funcs_t *ufuncs,
    hb_user_data_key_t *key);


extern void
hb_unicode_funcs_make_immutable (hb_unicode_funcs_t *ufuncs);

extern hb_bool_t
hb_unicode_funcs_is_immutable (hb_unicode_funcs_t *ufuncs);

extern hb_unicode_funcs_t *
hb_unicode_funcs_get_parent (hb_unicode_funcs_t *ufuncs);
# 352 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_unicode_combining_class_t (*hb_unicode_combining_class_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 370 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_unicode_general_category_t (*hb_unicode_general_category_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 392 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_codepoint_t (*hb_unicode_mirroring_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 410 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_script_t (*hb_unicode_script_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 433 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_bool_t (*hb_unicode_compose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t a,
           hb_codepoint_t b,
           hb_codepoint_t *ab,
           void *user_data);
# 457 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_bool_t (*hb_unicode_decompose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t ab,
           hb_codepoint_t *a,
           hb_codepoint_t *b,
           void *user_data);
# 476 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_combining_class_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_combining_class_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 492 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_general_category_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_general_category_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 508 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_mirroring_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_mirroring_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 524 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_script_func (hb_unicode_funcs_t *ufuncs,
      hb_unicode_script_func_t func,
      void *user_data, hb_destroy_func_t destroy);
# 540 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_compose_func (hb_unicode_funcs_t *ufuncs,
       hb_unicode_compose_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 556 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_decompose_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 575 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_unicode_combining_class_t
hb_unicode_combining_class (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);
# 591 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_unicode_general_category_t
hb_unicode_general_category (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);
# 607 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_codepoint_t
hb_unicode_mirroring (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);
# 623 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_script_t
hb_unicode_script (hb_unicode_funcs_t *ufuncs,
     hb_codepoint_t unicode);
# 641 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_bool_t
hb_unicode_compose (hb_unicode_funcs_t *ufuncs,
      hb_codepoint_t a,
      hb_codepoint_t b,
      hb_codepoint_t *ab);
# 661 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_bool_t
hb_unicode_decompose (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t ab,
        hb_codepoint_t *a,
        hb_codepoint_t *b);


# 39 "/usr/include/harfbuzz/hb-buffer.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 34 "/usr/include/harfbuzz/hb-font.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-font.h" 2
# 1 "/usr/include/harfbuzz/hb-face.h" 1
# 34 "/usr/include/harfbuzz/hb-face.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-face.h" 2
# 1 "/usr/include/harfbuzz/hb-blob.h" 1
# 36 "/usr/include/harfbuzz/hb-face.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 34 "/usr/include/harfbuzz/hb-set.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-set.h" 2


# 53 "/usr/include/harfbuzz/hb-set.h"
typedef struct hb_set_t hb_set_t;


extern hb_set_t *
hb_set_create (void);

extern hb_set_t *
hb_set_get_empty (void);

extern hb_set_t *
hb_set_reference (hb_set_t *set);

extern void
hb_set_destroy (hb_set_t *set);

extern hb_bool_t
hb_set_set_user_data (hb_set_t *set,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

extern void *
hb_set_get_user_data (hb_set_t *set,
        hb_user_data_key_t *key);



extern hb_bool_t
hb_set_allocation_successful (const hb_set_t *set);

extern void
hb_set_clear (hb_set_t *set);

extern hb_bool_t
hb_set_is_empty (const hb_set_t *set);

extern hb_bool_t
hb_set_has (const hb_set_t *set,
     hb_codepoint_t codepoint);

extern void
hb_set_add (hb_set_t *set,
     hb_codepoint_t codepoint);

extern void
hb_set_add_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

extern void
hb_set_del (hb_set_t *set,
     hb_codepoint_t codepoint);

extern void
hb_set_del_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

extern hb_bool_t
hb_set_is_equal (const hb_set_t *set,
   const hb_set_t *other);

extern hb_bool_t
hb_set_is_subset (const hb_set_t *set,
    const hb_set_t *larger_set);

extern void
hb_set_set (hb_set_t *set,
     const hb_set_t *other);

extern void
hb_set_union (hb_set_t *set,
       const hb_set_t *other);

extern void
hb_set_intersect (hb_set_t *set,
    const hb_set_t *other);

extern void
hb_set_subtract (hb_set_t *set,
   const hb_set_t *other);

extern void
hb_set_symmetric_difference (hb_set_t *set,
        const hb_set_t *other);

extern unsigned int
hb_set_get_population (const hb_set_t *set);


extern hb_codepoint_t
hb_set_get_min (const hb_set_t *set);


extern hb_codepoint_t
hb_set_get_max (const hb_set_t *set);


extern hb_bool_t
hb_set_next (const hb_set_t *set,
      hb_codepoint_t *codepoint);


extern hb_bool_t
hb_set_previous (const hb_set_t *set,
   hb_codepoint_t *codepoint);


extern hb_bool_t
hb_set_next_range (const hb_set_t *set,
     hb_codepoint_t *first,
     hb_codepoint_t *last);


extern hb_bool_t
hb_set_previous_range (const hb_set_t *set,
         hb_codepoint_t *first,
         hb_codepoint_t *last);



# 37 "/usr/include/harfbuzz/hb-face.h" 2




extern unsigned int
hb_face_count (hb_blob_t *blob);
# 55 "/usr/include/harfbuzz/hb-face.h"
typedef struct hb_face_t hb_face_t;

extern hb_face_t *
hb_face_create (hb_blob_t *blob,
  unsigned int index);

typedef hb_blob_t * (*hb_reference_table_func_t) (hb_face_t *face, hb_tag_t tag, void *user_data);


extern hb_face_t *
hb_face_create_for_tables (hb_reference_table_func_t reference_table_func,
      void *user_data,
      hb_destroy_func_t destroy);

extern hb_face_t *
hb_face_get_empty (void);

extern hb_face_t *
hb_face_reference (hb_face_t *face);

extern void
hb_face_destroy (hb_face_t *face);

extern hb_bool_t
hb_face_set_user_data (hb_face_t *face,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);

extern void *
hb_face_get_user_data (const hb_face_t *face,
         hb_user_data_key_t *key);

extern void
hb_face_make_immutable (hb_face_t *face);

extern hb_bool_t
hb_face_is_immutable (const hb_face_t *face);


extern hb_blob_t *
hb_face_reference_table (const hb_face_t *face,
    hb_tag_t tag);

extern hb_blob_t *
hb_face_reference_blob (hb_face_t *face);

extern void
hb_face_set_index (hb_face_t *face,
     unsigned int index);

extern unsigned int
hb_face_get_index (const hb_face_t *face);

extern void
hb_face_set_upem (hb_face_t *face,
    unsigned int upem);

extern unsigned int
hb_face_get_upem (const hb_face_t *face);

extern void
hb_face_set_glyph_count (hb_face_t *face,
    unsigned int glyph_count);

extern unsigned int
hb_face_get_glyph_count (const hb_face_t *face);

extern unsigned int
hb_face_get_table_tags (const hb_face_t *face,
   unsigned int start_offset,
   unsigned int *table_count,
   hb_tag_t *table_tags );






extern void
hb_face_collect_unicodes (hb_face_t *face,
     hb_set_t *out);

extern void
hb_face_collect_variation_selectors (hb_face_t *face,
         hb_set_t *out);

extern void
hb_face_collect_variation_unicodes (hb_face_t *face,
        hb_codepoint_t variation_selector,
        hb_set_t *out);






extern hb_face_t *
hb_face_builder_create (void);

extern hb_bool_t
hb_face_builder_add_table (hb_face_t *face,
      hb_tag_t tag,
      hb_blob_t *blob);



# 36 "/usr/include/harfbuzz/hb-font.h" 2
# 1 "/usr/include/harfbuzz/hb-draw.h" 1
# 32 "/usr/include/harfbuzz/hb-draw.h"
# 1 "/usr/include/harfbuzz/hb.h" 1
# 33 "/usr/include/harfbuzz/hb-draw.h" 2


# 96 "/usr/include/harfbuzz/hb-draw.h"

# 37 "/usr/include/harfbuzz/hb-font.h" 2




typedef struct hb_font_t hb_font_t;
# 61 "/usr/include/harfbuzz/hb-font.h"
typedef struct hb_font_funcs_t hb_font_funcs_t;

extern hb_font_funcs_t *
hb_font_funcs_create (void);

extern hb_font_funcs_t *
hb_font_funcs_get_empty (void);

extern hb_font_funcs_t *
hb_font_funcs_reference (hb_font_funcs_t *ffuncs);

extern void
hb_font_funcs_destroy (hb_font_funcs_t *ffuncs);

extern hb_bool_t
hb_font_funcs_set_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);


extern void *
hb_font_funcs_get_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key);


extern void
hb_font_funcs_make_immutable (hb_font_funcs_t *ffuncs);

extern hb_bool_t
hb_font_funcs_is_immutable (hb_font_funcs_t *ffuncs);
# 108 "/usr/include/harfbuzz/hb-font.h"
typedef struct hb_font_extents_t {
  hb_position_t ascender;
  hb_position_t descender;
  hb_position_t line_gap;

  hb_position_t reserved9;
  hb_position_t reserved8;
  hb_position_t reserved7;
  hb_position_t reserved6;
  hb_position_t reserved5;
  hb_position_t reserved4;
  hb_position_t reserved3;
  hb_position_t reserved2;
  hb_position_t reserved1;
} hb_font_extents_t;
# 135 "/usr/include/harfbuzz/hb-font.h"
typedef struct hb_glyph_extents_t {
  hb_position_t x_bearing;
  hb_position_t y_bearing;
  hb_position_t width;
  hb_position_t height;
} hb_glyph_extents_t;



typedef hb_bool_t (*hb_font_get_font_extents_func_t) (hb_font_t *font, void *font_data,
             hb_font_extents_t *extents,
             void *user_data);
# 158 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_font_extents_func_t hb_font_get_font_h_extents_func_t;
# 170 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_font_extents_func_t hb_font_get_font_v_extents_func_t;
# 182 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_nominal_glyph_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t unicode,
             hb_codepoint_t *glyph,
             void *user_data);
# 197 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_variation_glyph_func_t) (hb_font_t *font, void *font_data,
        hb_codepoint_t unicode, hb_codepoint_t variation_selector,
        hb_codepoint_t *glyph,
        void *user_data);
# 213 "/usr/include/harfbuzz/hb-font.h"
typedef unsigned int (*hb_font_get_nominal_glyphs_func_t) (hb_font_t *font, void *font_data,
          unsigned int count,
          const hb_codepoint_t *first_unicode,
          unsigned int unicode_stride,
          hb_codepoint_t *first_glyph,
          unsigned int glyph_stride,
          void *user_data);
# 230 "/usr/include/harfbuzz/hb-font.h"
typedef hb_position_t (*hb_font_get_glyph_advance_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          void *user_data);
# 244 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t;
# 256 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t;
# 266 "/usr/include/harfbuzz/hb-font.h"
typedef void (*hb_font_get_glyph_advances_func_t) (hb_font_t* font, void* font_data,
         unsigned int count,
         const hb_codepoint_t *first_glyph,
         unsigned glyph_stride,
         hb_position_t *first_advance,
         unsigned advance_stride,
         void *user_data);
# 283 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advances_func_t hb_font_get_glyph_h_advances_func_t;
# 294 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advances_func_t hb_font_get_glyph_v_advances_func_t;
# 306 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_origin_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
# 321 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t;
# 333 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t;

typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
          void *user_data);
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;
# 350 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_extents_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t glyph,
             hb_glyph_extents_t *extents,
             void *user_data);
# 365 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_contour_point_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph, unsigned int point_index,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
# 380 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_name_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          char *name, unsigned int size,
          void *user_data);
# 394 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_from_name_func_t) (hb_font_t *font, void *font_data,
        const char *name, int len,
        hb_codepoint_t *glyph,
        void *user_data);
# 413 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_font_h_extents_func (hb_font_funcs_t *ffuncs,
           hb_font_get_font_h_extents_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 429 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_font_v_extents_func (hb_font_funcs_t *ffuncs,
           hb_font_get_font_v_extents_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 445 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_nominal_glyph_func (hb_font_funcs_t *ffuncs,
          hb_font_get_nominal_glyph_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 461 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_nominal_glyphs_func (hb_font_funcs_t *ffuncs,
           hb_font_get_nominal_glyphs_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 477 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_variation_glyph_func (hb_font_funcs_t *ffuncs,
     hb_font_get_variation_glyph_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 493 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 509 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_v_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 525 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_advances_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advances_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 541 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_v_advances_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advances_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 557 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_h_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 573 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_v_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_v_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 589 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 605 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_extents_func (hb_font_funcs_t *ffuncs,
          hb_font_get_glyph_extents_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 621 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_contour_point_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_contour_point_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 637 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_name_func (hb_font_funcs_t *ffuncs,
       hb_font_get_glyph_name_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 653 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_from_name_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_from_name_func_t func,
     void *user_data, hb_destroy_func_t destroy);



extern hb_bool_t
hb_font_get_h_extents (hb_font_t *font,
         hb_font_extents_t *extents);
extern hb_bool_t
hb_font_get_v_extents (hb_font_t *font,
         hb_font_extents_t *extents);

extern hb_bool_t
hb_font_get_nominal_glyph (hb_font_t *font,
      hb_codepoint_t unicode,
      hb_codepoint_t *glyph);
extern hb_bool_t
hb_font_get_variation_glyph (hb_font_t *font,
        hb_codepoint_t unicode, hb_codepoint_t variation_selector,
        hb_codepoint_t *glyph);

extern unsigned int
hb_font_get_nominal_glyphs (hb_font_t *font,
       unsigned int count,
       const hb_codepoint_t *first_unicode,
       unsigned int unicode_stride,
       hb_codepoint_t *first_glyph,
       unsigned int glyph_stride);

extern hb_position_t
hb_font_get_glyph_h_advance (hb_font_t *font,
        hb_codepoint_t glyph);
extern hb_position_t
hb_font_get_glyph_v_advance (hb_font_t *font,
        hb_codepoint_t glyph);

extern void
hb_font_get_glyph_h_advances (hb_font_t* font,
         unsigned int count,
         const hb_codepoint_t *first_glyph,
         unsigned glyph_stride,
         hb_position_t *first_advance,
         unsigned advance_stride);
extern void
hb_font_get_glyph_v_advances (hb_font_t* font,
         unsigned int count,
         const hb_codepoint_t *first_glyph,
         unsigned glyph_stride,
         hb_position_t *first_advance,
         unsigned advance_stride);

extern hb_bool_t
hb_font_get_glyph_h_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);
extern hb_bool_t
hb_font_get_glyph_v_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);

extern hb_position_t
hb_font_get_glyph_h_kerning (hb_font_t *font,
        hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);

extern hb_bool_t
hb_font_get_glyph_extents (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_glyph_extents_t *extents);

extern hb_bool_t
hb_font_get_glyph_contour_point (hb_font_t *font,
     hb_codepoint_t glyph, unsigned int point_index,
     hb_position_t *x, hb_position_t *y);

extern hb_bool_t
hb_font_get_glyph_name (hb_font_t *font,
   hb_codepoint_t glyph,
   char *name, unsigned int size);
extern hb_bool_t
hb_font_get_glyph_from_name (hb_font_t *font,
        const char *name, int len,
        hb_codepoint_t *glyph);






extern hb_bool_t
hb_font_get_glyph (hb_font_t *font,
     hb_codepoint_t unicode, hb_codepoint_t variation_selector,
     hb_codepoint_t *glyph);

extern void
hb_font_get_extents_for_direction (hb_font_t *font,
       hb_direction_t direction,
       hb_font_extents_t *extents);
extern void
hb_font_get_glyph_advance_for_direction (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);
extern void
hb_font_get_glyph_advances_for_direction (hb_font_t* font,
       hb_direction_t direction,
       unsigned int count,
       const hb_codepoint_t *first_glyph,
       unsigned glyph_stride,
       hb_position_t *first_advance,
       unsigned advance_stride);
extern void
hb_font_get_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
extern void
hb_font_add_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
extern void
hb_font_subtract_glyph_origin_for_direction (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_position_t *x, hb_position_t *y);

extern void
hb_font_get_glyph_kerning_for_direction (hb_font_t *font,
      hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);

extern hb_bool_t
hb_font_get_glyph_extents_for_origin (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_glyph_extents_t *extents);

extern hb_bool_t
hb_font_get_glyph_contour_point_for_origin (hb_font_t *font,
         hb_codepoint_t glyph, unsigned int point_index,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y);


extern void
hb_font_glyph_to_string (hb_font_t *font,
    hb_codepoint_t glyph,
    char *s, unsigned int size);

extern hb_bool_t
hb_font_glyph_from_string (hb_font_t *font,
      const char *s, int len,
      hb_codepoint_t *glyph);
# 817 "/usr/include/harfbuzz/hb-font.h"
extern hb_font_t *
hb_font_create (hb_face_t *face);

extern hb_font_t *
hb_font_create_sub_font (hb_font_t *parent);

extern hb_font_t *
hb_font_get_empty (void);

extern hb_font_t *
hb_font_reference (hb_font_t *font);

extern void
hb_font_destroy (hb_font_t *font);

extern hb_bool_t
hb_font_set_user_data (hb_font_t *font,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


extern void *
hb_font_get_user_data (hb_font_t *font,
         hb_user_data_key_t *key);

extern void
hb_font_make_immutable (hb_font_t *font);

extern hb_bool_t
hb_font_is_immutable (hb_font_t *font);

extern void
hb_font_set_parent (hb_font_t *font,
      hb_font_t *parent);

extern hb_font_t *
hb_font_get_parent (hb_font_t *font);

extern void
hb_font_set_face (hb_font_t *font,
    hb_face_t *face);

extern hb_face_t *
hb_font_get_face (hb_font_t *font);


extern void
hb_font_set_funcs (hb_font_t *font,
     hb_font_funcs_t *klass,
     void *font_data,
     hb_destroy_func_t destroy);


extern void
hb_font_set_funcs_data (hb_font_t *font,
   void *font_data,
   hb_destroy_func_t destroy);


extern void
hb_font_set_scale (hb_font_t *font,
     int x_scale,
     int y_scale);

extern void
hb_font_get_scale (hb_font_t *font,
     int *x_scale,
     int *y_scale);




extern void
hb_font_set_ppem (hb_font_t *font,
    unsigned int x_ppem,
    unsigned int y_ppem);

extern void
hb_font_get_ppem (hb_font_t *font,
    unsigned int *x_ppem,
    unsigned int *y_ppem);





extern void
hb_font_set_ptem (hb_font_t *font, float ptem);

extern float
hb_font_get_ptem (hb_font_t *font);

extern void
hb_font_set_variations (hb_font_t *font,
   const hb_variation_t *variations,
   unsigned int variations_length);

extern void
hb_font_set_var_coords_design (hb_font_t *font,
          const float *coords,
          unsigned int coords_length);







extern void
hb_font_set_var_coords_normalized (hb_font_t *font,
       const int *coords,
       unsigned int coords_length);

extern const int *
hb_font_get_var_coords_normalized (hb_font_t *font,
       unsigned int *length);

extern void
hb_font_set_var_named_instance (hb_font_t *font,
    unsigned instance_index);








# 40 "/usr/include/harfbuzz/hb-buffer.h" 2


# 62 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_glyph_info_t {
  hb_codepoint_t codepoint;

  hb_mask_t mask;

  uint32_t cluster;


  hb_var_int_t var1;
  hb_var_int_t var2;
} hb_glyph_info_t;
# 95 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 0x00000001,

  HB_GLYPH_FLAG_DEFINED = 0x00000001
} hb_glyph_flags_t;

extern hb_glyph_flags_t
hb_glyph_info_get_glyph_flags (const hb_glyph_info_t *info);
# 124 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_glyph_position_t {
  hb_position_t x_advance;
  hb_position_t y_advance;
  hb_position_t x_offset;
  hb_position_t y_offset;


  hb_var_int_t var;
} hb_glyph_position_t;
# 144 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_segment_properties_t {
  hb_direction_t direction;
  hb_script_t script;
  hb_language_t language;

  void *reserved1;
  void *reserved2;
} hb_segment_properties_t;







extern hb_bool_t
hb_segment_properties_equal (const hb_segment_properties_t *a,
        const hb_segment_properties_t *b);

extern unsigned int
hb_segment_properties_hash (const hb_segment_properties_t *p);
# 175 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_buffer_t hb_buffer_t;

extern hb_buffer_t *
hb_buffer_create (void);

extern hb_buffer_t *
hb_buffer_get_empty (void);

extern hb_buffer_t *
hb_buffer_reference (hb_buffer_t *buffer);

extern void
hb_buffer_destroy (hb_buffer_t *buffer);

extern hb_bool_t
hb_buffer_set_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);

extern void *
hb_buffer_get_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key);
# 207 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS
} hb_buffer_content_type_t;

extern void
hb_buffer_set_content_type (hb_buffer_t *buffer,
       hb_buffer_content_type_t content_type);

extern hb_buffer_content_type_t
hb_buffer_get_content_type (hb_buffer_t *buffer);


extern void
hb_buffer_set_unicode_funcs (hb_buffer_t *buffer,
        hb_unicode_funcs_t *unicode_funcs);

extern hb_unicode_funcs_t *
hb_buffer_get_unicode_funcs (hb_buffer_t *buffer);

extern void
hb_buffer_set_direction (hb_buffer_t *buffer,
    hb_direction_t direction);

extern hb_direction_t
hb_buffer_get_direction (hb_buffer_t *buffer);

extern void
hb_buffer_set_script (hb_buffer_t *buffer,
        hb_script_t script);

extern hb_script_t
hb_buffer_get_script (hb_buffer_t *buffer);

extern void
hb_buffer_set_language (hb_buffer_t *buffer,
   hb_language_t language);


extern hb_language_t
hb_buffer_get_language (hb_buffer_t *buffer);

extern void
hb_buffer_set_segment_properties (hb_buffer_t *buffer,
      const hb_segment_properties_t *props);

extern void
hb_buffer_get_segment_properties (hb_buffer_t *buffer,
      hb_segment_properties_t *props);

extern void
hb_buffer_guess_segment_properties (hb_buffer_t *buffer);
# 293 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_FLAG_BOT = 0x00000001u,
  HB_BUFFER_FLAG_EOT = 0x00000002u,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 0x00000004u,
  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 0x00000008u,
  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 0x00000010u
} hb_buffer_flags_t;

extern void
hb_buffer_set_flags (hb_buffer_t *buffer,
       hb_buffer_flags_t flags);

extern hb_buffer_flags_t
hb_buffer_get_flags (hb_buffer_t *buffer);
# 337 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2,
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT = HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
} hb_buffer_cluster_level_t;

extern void
hb_buffer_set_cluster_level (hb_buffer_t *buffer,
        hb_buffer_cluster_level_t cluster_level);

extern hb_buffer_cluster_level_t
hb_buffer_get_cluster_level (hb_buffer_t *buffer);
# 361 "/usr/include/harfbuzz/hb-buffer.h"
extern void
hb_buffer_set_replacement_codepoint (hb_buffer_t *buffer,
         hb_codepoint_t replacement);

extern hb_codepoint_t
hb_buffer_get_replacement_codepoint (hb_buffer_t *buffer);

extern void
hb_buffer_set_invisible_glyph (hb_buffer_t *buffer,
          hb_codepoint_t invisible);

extern hb_codepoint_t
hb_buffer_get_invisible_glyph (hb_buffer_t *buffer);


extern void
hb_buffer_reset (hb_buffer_t *buffer);

extern void
hb_buffer_clear_contents (hb_buffer_t *buffer);

extern hb_bool_t
hb_buffer_pre_allocate (hb_buffer_t *buffer,
   unsigned int size);


extern hb_bool_t
hb_buffer_allocation_successful (hb_buffer_t *buffer);

extern void
hb_buffer_reverse (hb_buffer_t *buffer);

extern void
hb_buffer_reverse_range (hb_buffer_t *buffer,
    unsigned int start, unsigned int end);

extern void
hb_buffer_reverse_clusters (hb_buffer_t *buffer);




extern void
hb_buffer_add (hb_buffer_t *buffer,
        hb_codepoint_t codepoint,
        unsigned int cluster);

extern void
hb_buffer_add_utf8 (hb_buffer_t *buffer,
      const char *text,
      int text_length,
      unsigned int item_offset,
      int item_length);

extern void
hb_buffer_add_utf16 (hb_buffer_t *buffer,
       const uint16_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

extern void
hb_buffer_add_utf32 (hb_buffer_t *buffer,
       const uint32_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

extern void
hb_buffer_add_latin1 (hb_buffer_t *buffer,
        const uint8_t *text,
        int text_length,
        unsigned int item_offset,
        int item_length);

extern void
hb_buffer_add_codepoints (hb_buffer_t *buffer,
     const hb_codepoint_t *text,
     int text_length,
     unsigned int item_offset,
     int item_length);

extern void
hb_buffer_append (hb_buffer_t *buffer,
    hb_buffer_t *source,
    unsigned int start,
    unsigned int end);

extern hb_bool_t
hb_buffer_set_length (hb_buffer_t *buffer,
        unsigned int length);

extern unsigned int
hb_buffer_get_length (hb_buffer_t *buffer);



extern hb_glyph_info_t *
hb_buffer_get_glyph_infos (hb_buffer_t *buffer,
      unsigned int *length);

extern hb_glyph_position_t *
hb_buffer_get_glyph_positions (hb_buffer_t *buffer,
          unsigned int *length);

extern hb_bool_t
hb_buffer_has_positions (hb_buffer_t *buffer);


extern void
hb_buffer_normalize_glyphs (hb_buffer_t *buffer);
# 493 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 0x00000001u,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 0x00000002u,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 0x00000004u,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 0x00000008u,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 0x00000010u,
  HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 0x00000020u
} hb_buffer_serialize_flags_t;
# 514 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('E')&0xFF)<<16)|(((uint32_t)('X')&0xFF)<<8)|((uint32_t)('T')&0xFF))),
  HB_BUFFER_SERIALIZE_FORMAT_JSON = ((hb_tag_t)((((uint32_t)('J')&0xFF)<<24)|(((uint32_t)('S')&0xFF)<<16)|(((uint32_t)('O')&0xFF)<<8)|((uint32_t)('N')&0xFF))),
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = ((hb_tag_t)((((uint32_t)(0)&0xFF)<<24)|(((uint32_t)(0)&0xFF)<<16)|(((uint32_t)(0)&0xFF)<<8)|((uint32_t)(0)&0xFF)))
} hb_buffer_serialize_format_t;

extern hb_buffer_serialize_format_t
hb_buffer_serialize_format_from_string (const char *str, int len);

extern const char *
hb_buffer_serialize_format_to_string (hb_buffer_serialize_format_t format);

extern const char **
hb_buffer_serialize_list_formats (void);

extern unsigned int
hb_buffer_serialize_glyphs (hb_buffer_t *buffer,
       unsigned int start,
       unsigned int end,
       char *buf,
       unsigned int buf_size,
       unsigned int *buf_consumed,
       hb_font_t *font,
       hb_buffer_serialize_format_t format,
       hb_buffer_serialize_flags_t flags);

extern unsigned int
hb_buffer_serialize_unicode (hb_buffer_t *buffer,
     unsigned int start,
     unsigned int end,
     char *buf,
     unsigned int buf_size,
     unsigned int *buf_consumed,
     hb_buffer_serialize_format_t format,
     hb_buffer_serialize_flags_t flags);

extern unsigned int
hb_buffer_serialize (hb_buffer_t *buffer,
     unsigned int start,
     unsigned int end,
     char *buf,
     unsigned int buf_size,
     unsigned int *buf_consumed,
     hb_font_t *font,
     hb_buffer_serialize_format_t format,
     hb_buffer_serialize_flags_t flags);

extern hb_bool_t
hb_buffer_deserialize_glyphs (hb_buffer_t *buffer,
         const char *buf,
         int buf_len,
         const char **end_ptr,
         hb_font_t *font,
         hb_buffer_serialize_format_t format);

extern hb_bool_t
hb_buffer_deserialize_unicode (hb_buffer_t *buffer,
            const char *buf,
            int buf_len,
            const char **end_ptr,
            hb_buffer_serialize_format_t format);







typedef enum {
  HB_BUFFER_DIFF_FLAG_EQUAL = 0x0000,



  HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 0x0001,




  HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 0x0002,




  HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 0x0004,
  HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 0x0008,



  HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 0x0010,
  HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 0x0020,
  HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 0x0040,
  HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 0x0080

} hb_buffer_diff_flags_t;


extern hb_buffer_diff_flags_t
hb_buffer_diff (hb_buffer_t *buffer,
  hb_buffer_t *reference,
  hb_codepoint_t dottedcircle_glyph,
  unsigned int position_fuzz);






typedef hb_bool_t (*hb_buffer_message_func_t) (hb_buffer_t *buffer,
        hb_font_t *font,
        const char *message,
        void *user_data);

extern void
hb_buffer_set_message_func (hb_buffer_t *buffer,
       hb_buffer_message_func_t func,
       void *user_data, hb_destroy_func_t destroy);



# 33 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 34 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-deprecated.h" 1
# 34 "/usr/include/harfbuzz/hb-deprecated.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 1 "/usr/include/harfbuzz/hb-unicode.h" 1
# 36 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 37 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 38 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 51 "/usr/include/harfbuzz/hb-deprecated.h"

# 61 "/usr/include/harfbuzz/hb-deprecated.h"
typedef hb_bool_t (*hb_font_get_glyph_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t unicode, hb_codepoint_t variation_selector,
            hb_codepoint_t *glyph,
            void *user_data);

extern __attribute__((__deprecated__("Use '" "hb_font_funcs_set_nominal_glyph_func and hb_font_funcs_set_variation_glyph_func" "' instead"))) void
hb_font_funcs_set_glyph_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_func_t func,
         void *user_data, hb_destroy_func_t destroy);

extern __attribute__((__deprecated__)) void
hb_set_invert (hb_set_t *set);






typedef unsigned int (*hb_unicode_eastasian_width_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 95 "/usr/include/harfbuzz/hb-deprecated.h"
extern __attribute__((__deprecated__)) void
hb_unicode_funcs_set_eastasian_width_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_eastasian_width_func_t func,
        void *user_data, hb_destroy_func_t destroy);







extern __attribute__((__deprecated__)) unsigned int
hb_unicode_eastasian_width (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);
# 131 "/usr/include/harfbuzz/hb-deprecated.h"
typedef unsigned int (*hb_unicode_decompose_compatibility_func_t) (hb_unicode_funcs_t *ufuncs,
            hb_codepoint_t u,
            hb_codepoint_t *decomposed,
            void *user_data);
# 157 "/usr/include/harfbuzz/hb-deprecated.h"
extern __attribute__((__deprecated__)) void
hb_unicode_funcs_set_decompose_compatibility_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_compatibility_func_t func,
         void *user_data, hb_destroy_func_t destroy);

extern __attribute__((__deprecated__)) unsigned int
hb_unicode_decompose_compatibility (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t u,
        hb_codepoint_t *decomposed);


typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t;
# 182 "/usr/include/harfbuzz/hb-deprecated.h"
extern void
hb_font_funcs_set_glyph_v_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);

extern hb_position_t
hb_font_get_glyph_v_kerning (hb_font_t *font,
        hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);




# 35 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-draw.h" 1
# 36 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-face.h" 1
# 37 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 38 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-map.h" 1
# 34 "/usr/include/harfbuzz/hb-map.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-map.h" 2


# 50 "/usr/include/harfbuzz/hb-map.h"
typedef struct hb_map_t hb_map_t;


extern hb_map_t *
hb_map_create (void);

extern hb_map_t *
hb_map_get_empty (void);

extern hb_map_t *
hb_map_reference (hb_map_t *map);

extern void
hb_map_destroy (hb_map_t *map);

extern hb_bool_t
hb_map_set_user_data (hb_map_t *map,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

extern void *
hb_map_get_user_data (hb_map_t *map,
        hb_user_data_key_t *key);



extern hb_bool_t
hb_map_allocation_successful (const hb_map_t *map);

extern void
hb_map_clear (hb_map_t *map);

extern hb_bool_t
hb_map_is_empty (const hb_map_t *map);

extern unsigned int
hb_map_get_population (const hb_map_t *map);

extern void
hb_map_set (hb_map_t *map,
     hb_codepoint_t key,
     hb_codepoint_t value);

extern hb_codepoint_t
hb_map_get (const hb_map_t *map,
     hb_codepoint_t key);

extern void
hb_map_del (hb_map_t *map,
     hb_codepoint_t key);

extern hb_bool_t
hb_map_has (const hb_map_t *map,
     hb_codepoint_t key);



# 39 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 40 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-shape.h" 1
# 36 "/usr/include/harfbuzz/hb-shape.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 37 "/usr/include/harfbuzz/hb-shape.h" 2
# 1 "/usr/include/harfbuzz/hb-buffer.h" 1
# 38 "/usr/include/harfbuzz/hb-shape.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 39 "/usr/include/harfbuzz/hb-shape.h" 2




extern void
hb_shape (hb_font_t *font,
   hb_buffer_t *buffer,
   const hb_feature_t *features,
   unsigned int num_features);

extern hb_bool_t
hb_shape_full (hb_font_t *font,
        hb_buffer_t *buffer,
        const hb_feature_t *features,
        unsigned int num_features,
        const char * const *shaper_list);

extern const char **
hb_shape_list_shapers (void);



# 41 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-shape-plan.h" 1
# 34 "/usr/include/harfbuzz/hb-shape-plan.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-shape-plan.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 36 "/usr/include/harfbuzz/hb-shape-plan.h" 2


# 53 "/usr/include/harfbuzz/hb-shape-plan.h"
typedef struct hb_shape_plan_t hb_shape_plan_t;

extern hb_shape_plan_t *
hb_shape_plan_create (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

extern hb_shape_plan_t *
hb_shape_plan_create_cached (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

extern hb_shape_plan_t *
hb_shape_plan_create2 (hb_face_t *face,
         const hb_segment_properties_t *props,
         const hb_feature_t *user_features,
         unsigned int num_user_features,
         const int *coords,
         unsigned int num_coords,
         const char * const *shaper_list);

extern hb_shape_plan_t *
hb_shape_plan_create_cached2 (hb_face_t *face,
         const hb_segment_properties_t *props,
         const hb_feature_t *user_features,
         unsigned int num_user_features,
         const int *coords,
         unsigned int num_coords,
         const char * const *shaper_list);


extern hb_shape_plan_t *
hb_shape_plan_get_empty (void);

extern hb_shape_plan_t *
hb_shape_plan_reference (hb_shape_plan_t *shape_plan);

extern void
hb_shape_plan_destroy (hb_shape_plan_t *shape_plan);

extern hb_bool_t
hb_shape_plan_set_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

extern void *
hb_shape_plan_get_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key);


extern hb_bool_t
hb_shape_plan_execute (hb_shape_plan_t *shape_plan,
         hb_font_t *font,
         hb_buffer_t *buffer,
         const hb_feature_t *features,
         unsigned int num_features);

extern const char *
hb_shape_plan_get_shaper (hb_shape_plan_t *shape_plan);



# 42 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-style.h" 1
# 34 "/usr/include/harfbuzz/hb-style.h"








# 43 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-unicode.h" 1
# 44 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-version.h" 1
# 34 "/usr/include/harfbuzz/hb-version.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-version.h" 2


# 50 "/usr/include/harfbuzz/hb-version.h"
extern void
hb_version (unsigned int *major,
     unsigned int *minor,
     unsigned int *micro);

extern const char *
hb_version_string (void);

extern hb_bool_t
hb_version_atleast (unsigned int major,
      unsigned int minor,
      unsigned int micro);



# 45 "/usr/include/harfbuzz/hb.h" 2



# 29 "/usr/include/pango-1.0/pango/pango-coverage.h" 2


# 44 "/usr/include/pango-1.0/pango/pango-coverage.h"
typedef struct _PangoCoverage PangoCoverage;
# 67 "/usr/include/pango-1.0/pango/pango-coverage.h"
typedef enum {
  PANGO_COVERAGE_NONE,
  PANGO_COVERAGE_FALLBACK,
  PANGO_COVERAGE_APPROXIMATE,
  PANGO_COVERAGE_EXACT
} PangoCoverageLevel;

extern
GType pango_coverage_get_type (void) __attribute__ ((__const__));

extern
PangoCoverage * pango_coverage_new (void);
extern
PangoCoverage * pango_coverage_ref (PangoCoverage *coverage);
extern
void pango_coverage_unref (PangoCoverage *coverage);
extern
PangoCoverage * pango_coverage_copy (PangoCoverage *coverage);
extern
PangoCoverageLevel pango_coverage_get (PangoCoverage *coverage,
        int index_);
extern
void pango_coverage_set (PangoCoverage *coverage,
        int index_,
        PangoCoverageLevel level);
__attribute__((__deprecated__)) extern
void pango_coverage_max (PangoCoverage *coverage,
        PangoCoverage *other);

__attribute__((__deprecated__)) extern
void pango_coverage_to_bytes (PangoCoverage *coverage,
       guchar **bytes,
       int *n_bytes);
__attribute__((__deprecated__)) extern
PangoCoverage *pango_coverage_from_bytes (guchar *bytes,
       int n_bytes);

typedef PangoCoverage *PangoCoverage_autoptr; typedef GList *PangoCoverage_listautoptr; typedef GSList *PangoCoverage_slistautoptr; typedef GQueue *PangoCoverage_queueautoptr;
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
#pragma GCC diagnostic push
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"

# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoCoverage (PangoCoverage *_ptr) { if (_ptr) (g_object_unref) ((PangoCoverage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoCoverage (PangoCoverage **_ptr) { glib_autoptr_clear_PangoCoverage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoCoverage (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoCoverage (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoCoverage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
#pragma GCC diagnostic pop
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"



# 26 "/usr/include/pango-1.0/pango/pango-font.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-types.h"


typedef struct _PangoLogAttr PangoLogAttr;


typedef struct _PangoEngineLang PangoEngineLang;
typedef struct _PangoEngineShape PangoEngineShape;


typedef struct _PangoFont PangoFont;
typedef struct _PangoFontMap PangoFontMap;

typedef struct _PangoRectangle PangoRectangle;

typedef struct _PangoContext PangoContext;

typedef struct _PangoLanguage PangoLanguage;







typedef guint32 PangoGlyph;
# 149 "/usr/include/pango-1.0/pango/pango-types.h"
extern
int pango_units_from_double (double d) __attribute__ ((__const__));
extern
double pango_units_to_double (int i) __attribute__ ((__const__));
# 169 "/usr/include/pango-1.0/pango/pango-types.h"
struct _PangoRectangle
{
  int x;
  int y;
  int width;
  int height;
};
# 230 "/usr/include/pango-1.0/pango/pango-types.h"
extern
void pango_extents_to_pixels (PangoRectangle *inclusive,
         PangoRectangle *nearest);


# 1 "/usr/include/pango-1.0/pango/pango-gravity.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-gravity.h"

# 53 "/usr/include/pango-1.0/pango/pango-gravity.h"
typedef enum {
  PANGO_GRAVITY_SOUTH,
  PANGO_GRAVITY_EAST,
  PANGO_GRAVITY_NORTH,
  PANGO_GRAVITY_WEST,
  PANGO_GRAVITY_AUTO
} PangoGravity;
# 81 "/usr/include/pango-1.0/pango/pango-gravity.h"
typedef enum {
  PANGO_GRAVITY_HINT_NATURAL,
  PANGO_GRAVITY_HINT_STRONG,
  PANGO_GRAVITY_HINT_LINE
} PangoGravityHint;
# 116 "/usr/include/pango-1.0/pango/pango-gravity.h"
# 1 "/usr/include/pango-1.0/pango/pango-matrix.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-matrix.h"


typedef struct _PangoMatrix PangoMatrix;
# 53 "/usr/include/pango-1.0/pango/pango-matrix.h"
struct _PangoMatrix
{
  double xx;
  double xy;
  double yx;
  double yy;
  double x0;
  double y0;
};
# 81 "/usr/include/pango-1.0/pango/pango-matrix.h"
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 82 "/usr/include/pango-1.0/pango/pango-matrix.h" 2

extern
GType pango_matrix_get_type (void) __attribute__ ((__const__));

extern
PangoMatrix *pango_matrix_copy (const PangoMatrix *matrix);
extern
void pango_matrix_free (PangoMatrix *matrix);

extern
void pango_matrix_translate (PangoMatrix *matrix,
        double tx,
        double ty);
extern
void pango_matrix_scale (PangoMatrix *matrix,
        double scale_x,
        double scale_y);
extern
void pango_matrix_rotate (PangoMatrix *matrix,
        double degrees);
extern
void pango_matrix_concat (PangoMatrix *matrix,
        const PangoMatrix *new_matrix);
extern
void pango_matrix_transform_point (const PangoMatrix *matrix,
          double *x,
          double *y);
extern
void pango_matrix_transform_distance (const PangoMatrix *matrix,
          double *dx,
          double *dy);
extern
void pango_matrix_transform_rectangle (const PangoMatrix *matrix,
           PangoRectangle *rect);
extern
void pango_matrix_transform_pixel_rectangle (const PangoMatrix *matrix,
          PangoRectangle *rect);
extern
double pango_matrix_get_font_scale_factor (const PangoMatrix *matrix) __attribute__((__pure__));
extern
void pango_matrix_get_font_scale_factors (const PangoMatrix *matrix,
       double *xscale, double *yscale);
extern
double pango_matrix_get_slant_ratio (const PangoMatrix *matrix) __attribute__((__pure__));



# 117 "/usr/include/pango-1.0/pango/pango-gravity.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-script.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-script.h"








typedef struct _PangoScriptIter PangoScriptIter;
# 170 "/usr/include/pango-1.0/pango/pango-script.h"
typedef enum {
      PANGO_SCRIPT_INVALID_CODE = -1,
      PANGO_SCRIPT_COMMON = 0,
      PANGO_SCRIPT_INHERITED,
      PANGO_SCRIPT_ARABIC,
      PANGO_SCRIPT_ARMENIAN,
      PANGO_SCRIPT_BENGALI,
      PANGO_SCRIPT_BOPOMOFO,
      PANGO_SCRIPT_CHEROKEE,
      PANGO_SCRIPT_COPTIC,
      PANGO_SCRIPT_CYRILLIC,
      PANGO_SCRIPT_DESERET,
      PANGO_SCRIPT_DEVANAGARI,
      PANGO_SCRIPT_ETHIOPIC,
      PANGO_SCRIPT_GEORGIAN,
      PANGO_SCRIPT_GOTHIC,
      PANGO_SCRIPT_GREEK,
      PANGO_SCRIPT_GUJARATI,
      PANGO_SCRIPT_GURMUKHI,
      PANGO_SCRIPT_HAN,
      PANGO_SCRIPT_HANGUL,
      PANGO_SCRIPT_HEBREW,
      PANGO_SCRIPT_HIRAGANA,
      PANGO_SCRIPT_KANNADA,
      PANGO_SCRIPT_KATAKANA,
      PANGO_SCRIPT_KHMER,
      PANGO_SCRIPT_LAO,
      PANGO_SCRIPT_LATIN,
      PANGO_SCRIPT_MALAYALAM,
      PANGO_SCRIPT_MONGOLIAN,
      PANGO_SCRIPT_MYANMAR,
      PANGO_SCRIPT_OGHAM,
      PANGO_SCRIPT_OLD_ITALIC,
      PANGO_SCRIPT_ORIYA,
      PANGO_SCRIPT_RUNIC,
      PANGO_SCRIPT_SINHALA,
      PANGO_SCRIPT_SYRIAC,
      PANGO_SCRIPT_TAMIL,
      PANGO_SCRIPT_TELUGU,
      PANGO_SCRIPT_THAANA,
      PANGO_SCRIPT_THAI,
      PANGO_SCRIPT_TIBETAN,
      PANGO_SCRIPT_CANADIAN_ABORIGINAL,
      PANGO_SCRIPT_YI,
      PANGO_SCRIPT_TAGALOG,
      PANGO_SCRIPT_HANUNOO,
      PANGO_SCRIPT_BUHID,
      PANGO_SCRIPT_TAGBANWA,


      PANGO_SCRIPT_BRAILLE,
      PANGO_SCRIPT_CYPRIOT,
      PANGO_SCRIPT_LIMBU,
      PANGO_SCRIPT_OSMANYA,
      PANGO_SCRIPT_SHAVIAN,
      PANGO_SCRIPT_LINEAR_B,
      PANGO_SCRIPT_TAI_LE,
      PANGO_SCRIPT_UGARITIC,


      PANGO_SCRIPT_NEW_TAI_LUE,
      PANGO_SCRIPT_BUGINESE,
      PANGO_SCRIPT_GLAGOLITIC,
      PANGO_SCRIPT_TIFINAGH,
      PANGO_SCRIPT_SYLOTI_NAGRI,
      PANGO_SCRIPT_OLD_PERSIAN,
      PANGO_SCRIPT_KHAROSHTHI,


      PANGO_SCRIPT_UNKNOWN,
      PANGO_SCRIPT_BALINESE,
      PANGO_SCRIPT_CUNEIFORM,
      PANGO_SCRIPT_PHOENICIAN,
      PANGO_SCRIPT_PHAGS_PA,
      PANGO_SCRIPT_NKO,


      PANGO_SCRIPT_KAYAH_LI,
      PANGO_SCRIPT_LEPCHA,
      PANGO_SCRIPT_REJANG,
      PANGO_SCRIPT_SUNDANESE,
      PANGO_SCRIPT_SAURASHTRA,
      PANGO_SCRIPT_CHAM,
      PANGO_SCRIPT_OL_CHIKI,
      PANGO_SCRIPT_VAI,
      PANGO_SCRIPT_CARIAN,
      PANGO_SCRIPT_LYCIAN,
      PANGO_SCRIPT_LYDIAN,


      PANGO_SCRIPT_BATAK,
      PANGO_SCRIPT_BRAHMI,
      PANGO_SCRIPT_MANDAIC,


      PANGO_SCRIPT_CHAKMA,
      PANGO_SCRIPT_MEROITIC_CURSIVE,
      PANGO_SCRIPT_MEROITIC_HIEROGLYPHS,
      PANGO_SCRIPT_MIAO,
      PANGO_SCRIPT_SHARADA,
      PANGO_SCRIPT_SORA_SOMPENG,
      PANGO_SCRIPT_TAKRI,


      PANGO_SCRIPT_BASSA_VAH,
      PANGO_SCRIPT_CAUCASIAN_ALBANIAN,
      PANGO_SCRIPT_DUPLOYAN,
      PANGO_SCRIPT_ELBASAN,
      PANGO_SCRIPT_GRANTHA,
      PANGO_SCRIPT_KHOJKI,
      PANGO_SCRIPT_KHUDAWADI,
      PANGO_SCRIPT_LINEAR_A,
      PANGO_SCRIPT_MAHAJANI,
      PANGO_SCRIPT_MANICHAEAN,
      PANGO_SCRIPT_MENDE_KIKAKUI,
      PANGO_SCRIPT_MODI,
      PANGO_SCRIPT_MRO,
      PANGO_SCRIPT_NABATAEAN,
      PANGO_SCRIPT_OLD_NORTH_ARABIAN,
      PANGO_SCRIPT_OLD_PERMIC,
      PANGO_SCRIPT_PAHAWH_HMONG,
      PANGO_SCRIPT_PALMYRENE,
      PANGO_SCRIPT_PAU_CIN_HAU,
      PANGO_SCRIPT_PSALTER_PAHLAVI,
      PANGO_SCRIPT_SIDDHAM,
      PANGO_SCRIPT_TIRHUTA,
      PANGO_SCRIPT_WARANG_CITI,


      PANGO_SCRIPT_AHOM,
      PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS,
      PANGO_SCRIPT_HATRAN,
      PANGO_SCRIPT_MULTANI,
      PANGO_SCRIPT_OLD_HUNGARIAN,
      PANGO_SCRIPT_SIGNWRITING
} PangoScript;



__attribute__((__deprecated__("Use '" "g_unichar_get_script" "' instead"))) extern
PangoScript pango_script_for_unichar (gunichar ch) __attribute__ ((__const__));

extern
GType pango_script_iter_get_type (void) __attribute__ ((__const__));

extern
PangoScriptIter *pango_script_iter_new (const char *text,
           int length);
extern
void pango_script_iter_get_range (PangoScriptIter *iter,
                                              const char **start,
                                              const char **end,
                                              PangoScript *script);
extern
gboolean pango_script_iter_next (PangoScriptIter *iter);
extern
void pango_script_iter_free (PangoScriptIter *iter);

# 1 "/usr/include/pango-1.0/pango/pango-language.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-language.h"
# 1 "/usr/include/pango-1.0/pango/pango-script.h" 1
# 31 "/usr/include/pango-1.0/pango/pango-language.h" 2





extern
GType pango_language_get_type (void) __attribute__ ((__const__));

extern
PangoLanguage * pango_language_get_default (void) __attribute__ ((__const__));

extern
PangoLanguage ** pango_language_get_preferred (void) __attribute__ ((__const__));

extern
PangoLanguage * pango_language_from_string (const char *language);

extern
const char * pango_language_to_string (PangoLanguage *language) __attribute__ ((__const__));




extern
const char * pango_language_get_sample_string (PangoLanguage *language) __attribute__ ((__const__));

extern
gboolean pango_language_matches (PangoLanguage *language,
                                                                 const char *range_list) __attribute__((__pure__));

extern
gboolean pango_language_includes_script (PangoLanguage *language,
                                                                 PangoScript script) __attribute__((__pure__));
extern
const PangoScript * pango_language_get_scripts (PangoLanguage *language,
                                                                 int *num_scripts);


# 329 "/usr/include/pango-1.0/pango/pango-script.h" 2

extern
PangoLanguage *pango_script_get_sample_language (PangoScript script) __attribute__((__pure__));


# 118 "/usr/include/pango-1.0/pango/pango-gravity.h" 2

extern
double pango_gravity_to_rotation (PangoGravity gravity) __attribute__ ((__const__));
extern
PangoGravity pango_gravity_get_for_matrix (const PangoMatrix *matrix) __attribute__((__pure__));
extern
PangoGravity pango_gravity_get_for_script (PangoScript script,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__ ((__const__));
extern
PangoGravity pango_gravity_get_for_script_and_width
       (PangoScript script,
        gboolean wide,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__ ((__const__));



# 236 "/usr/include/pango-1.0/pango/pango-types.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-bidi-type.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-bidi-type.h"
# 1 "/usr/include/pango-1.0/pango/pango-direction.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-direction.h"

# 60 "/usr/include/pango-1.0/pango/pango-direction.h"
typedef enum {
  PANGO_DIRECTION_LTR,
  PANGO_DIRECTION_RTL,
  PANGO_DIRECTION_TTB_LTR,
  PANGO_DIRECTION_TTB_RTL,
  PANGO_DIRECTION_WEAK_LTR,
  PANGO_DIRECTION_WEAK_RTL,
  PANGO_DIRECTION_NEUTRAL
} PangoDirection;


# 29 "/usr/include/pango-1.0/pango/pango-bidi-type.h" 2


# 68 "/usr/include/pango-1.0/pango/pango-bidi-type.h"
typedef enum {

  PANGO_BIDI_TYPE_L,
  PANGO_BIDI_TYPE_LRE,
  PANGO_BIDI_TYPE_LRO,
  PANGO_BIDI_TYPE_R,
  PANGO_BIDI_TYPE_AL,
  PANGO_BIDI_TYPE_RLE,
  PANGO_BIDI_TYPE_RLO,


  PANGO_BIDI_TYPE_PDF,
  PANGO_BIDI_TYPE_EN,
  PANGO_BIDI_TYPE_ES,
  PANGO_BIDI_TYPE_ET,
  PANGO_BIDI_TYPE_AN,
  PANGO_BIDI_TYPE_CS,
  PANGO_BIDI_TYPE_NSM,
  PANGO_BIDI_TYPE_BN,


  PANGO_BIDI_TYPE_B,
  PANGO_BIDI_TYPE_S,
  PANGO_BIDI_TYPE_WS,
  PANGO_BIDI_TYPE_ON,


  PANGO_BIDI_TYPE_LRI,
  PANGO_BIDI_TYPE_RLI,
  PANGO_BIDI_TYPE_FSI,
  PANGO_BIDI_TYPE_PDI
} PangoBidiType;

__attribute__((__deprecated__)) extern
PangoBidiType pango_bidi_type_for_unichar (gunichar ch) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
PangoDirection pango_unichar_direction (gunichar ch) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
PangoDirection pango_find_base_dir (const gchar *text,
          gint length);

__attribute__((__deprecated__("Use '" "g_unichar_get_mirror_char" "' instead"))) extern
gboolean pango_get_mirror_char (gunichar ch,
          gunichar *mirrored_ch);



# 240 "/usr/include/pango-1.0/pango/pango-types.h" 2



# 27 "/usr/include/pango-1.0/pango/pango-font.h" 2





# 43 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontDescription PangoFontDescription;
# 64 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontMetrics PangoFontMetrics;
# 74 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_STYLE_NORMAL,
  PANGO_STYLE_OBLIQUE,
  PANGO_STYLE_ITALIC
} PangoStyle;
# 100 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_VARIANT_NORMAL,
  PANGO_VARIANT_SMALL_CAPS,
  PANGO_VARIANT_ALL_SMALL_CAPS,
  PANGO_VARIANT_PETITE_CAPS,
  PANGO_VARIANT_ALL_PETITE_CAPS,
  PANGO_VARIANT_UNICASE,
  PANGO_VARIANT_TITLE_CAPS
} PangoVariant;
# 130 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_WEIGHT_THIN = 100,
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_SEMILIGHT = 350,
  PANGO_WEIGHT_BOOK = 380,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_MEDIUM = 500,
  PANGO_WEIGHT_SEMIBOLD = 600,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900,
  PANGO_WEIGHT_ULTRAHEAVY = 1000
} PangoWeight;
# 160 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_STRETCH_ULTRA_CONDENSED,
  PANGO_STRETCH_EXTRA_CONDENSED,
  PANGO_STRETCH_CONDENSED,
  PANGO_STRETCH_SEMI_CONDENSED,
  PANGO_STRETCH_NORMAL,
  PANGO_STRETCH_SEMI_EXPANDED,
  PANGO_STRETCH_EXPANDED,
  PANGO_STRETCH_EXTRA_EXPANDED,
  PANGO_STRETCH_ULTRA_EXPANDED
} PangoStretch;
# 186 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_FONT_MASK_FAMILY = 1 << 0,
  PANGO_FONT_MASK_STYLE = 1 << 1,
  PANGO_FONT_MASK_VARIANT = 1 << 2,
  PANGO_FONT_MASK_WEIGHT = 1 << 3,
  PANGO_FONT_MASK_STRETCH = 1 << 4,
  PANGO_FONT_MASK_SIZE = 1 << 5,
  PANGO_FONT_MASK_GRAVITY = 1 << 6,
  PANGO_FONT_MASK_VARIATIONS = 1 << 7,
} PangoFontMask;
# 247 "/usr/include/pango-1.0/pango/pango-font.h"
extern
GType pango_font_description_get_type (void) __attribute__ ((__const__));
extern
PangoFontDescription *pango_font_description_new (void);
extern
PangoFontDescription *pango_font_description_copy (const PangoFontDescription *desc);
extern
PangoFontDescription *pango_font_description_copy_static (const PangoFontDescription *desc);
extern
guint pango_font_description_hash (const PangoFontDescription *desc) __attribute__((__pure__));
extern
gboolean pango_font_description_equal (const PangoFontDescription *desc1,
                                                          const PangoFontDescription *desc2) __attribute__((__pure__));
extern
void pango_font_description_free (PangoFontDescription *desc);
extern
void pango_font_descriptions_free (PangoFontDescription **descs,
                                                          int n_descs);

extern
void pango_font_description_set_family (PangoFontDescription *desc,
                                                               const char *family);
extern
void pango_font_description_set_family_static (PangoFontDescription *desc,
                                                               const char *family);
extern
const char *pango_font_description_get_family (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_style (PangoFontDescription *desc,
                                                               PangoStyle style);
extern
PangoStyle pango_font_description_get_style (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_variant (PangoFontDescription *desc,
                                                               PangoVariant variant);
extern
PangoVariant pango_font_description_get_variant (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_weight (PangoFontDescription *desc,
                                                               PangoWeight weight);
extern
PangoWeight pango_font_description_get_weight (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_stretch (PangoFontDescription *desc,
                                                               PangoStretch stretch);
extern
PangoStretch pango_font_description_get_stretch (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_size (PangoFontDescription *desc,
                                                               gint size);
extern
gint pango_font_description_get_size (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_absolute_size (PangoFontDescription *desc,
                                                               double size);
extern
gboolean pango_font_description_get_size_is_absolute (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_gravity (PangoFontDescription *desc,
                                                               PangoGravity gravity);
extern
PangoGravity pango_font_description_get_gravity (const PangoFontDescription *desc) __attribute__((__pure__));

extern
void pango_font_description_set_variations_static (PangoFontDescription *desc,
                                                                   const char *variations);
extern
void pango_font_description_set_variations (PangoFontDescription *desc,
                                                               const char *variations);
extern
const char *pango_font_description_get_variations (const PangoFontDescription *desc) __attribute__((__pure__));

extern
PangoFontMask pango_font_description_get_set_fields (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_unset_fields (PangoFontDescription *desc,
                                                     PangoFontMask to_unset);

extern
void pango_font_description_merge (PangoFontDescription *desc,
                                          const PangoFontDescription *desc_to_merge,
                                          gboolean replace_existing);
extern
void pango_font_description_merge_static (PangoFontDescription *desc,
                                          const PangoFontDescription *desc_to_merge,
                                          gboolean replace_existing);

extern
gboolean pango_font_description_better_match (const PangoFontDescription *desc,
                                              const PangoFontDescription *old_match,
                                              const PangoFontDescription *new_match) __attribute__((__pure__));

extern
PangoFontDescription *pango_font_description_from_string (const char *str);
extern
char * pango_font_description_to_string (const PangoFontDescription *desc);
extern
char * pango_font_description_to_filename (const PangoFontDescription *desc);







struct _PangoFontMetrics
{

  guint ref_count;

  int ascent;
  int descent;
  int height;
  int approximate_char_width;
  int approximate_digit_width;
  int underline_position;
  int underline_thickness;
  int strikethrough_position;
  int strikethrough_thickness;
};

extern
GType pango_font_metrics_get_type (void) __attribute__ ((__const__));
extern
PangoFontMetrics *pango_font_metrics_ref (PangoFontMetrics *metrics);
extern
void pango_font_metrics_unref (PangoFontMetrics *metrics);
extern
int pango_font_metrics_get_ascent (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_descent (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_height (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_approximate_char_width (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_approximate_digit_width (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_underline_position (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_underline_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_strikethrough_position (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_strikethrough_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
# 405 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontFace PangoFontFace;
typedef struct _PangoFontFamily PangoFontFamily;
typedef struct _PangoFontFamilyClass PangoFontFamilyClass;
# 420 "/usr/include/pango-1.0/pango/pango-font.h"
struct _PangoFontFamily
{
  GObject parent_instance;
};

struct _PangoFontFamilyClass
{
  GObjectClass parent_class;



  void (*list_faces) (PangoFontFamily *family,
                            PangoFontFace ***faces,
                            int *n_faces);
  const char * (*get_name) (PangoFontFamily *family);
  gboolean (*is_monospace) (PangoFontFamily *family);
  gboolean (*is_variable) (PangoFontFamily *family);

  PangoFontFace * (*get_face) (PangoFontFamily *family,
                               const char *name);





  void (*_pango_reserved2) (void);
};



extern
GType pango_font_family_get_type (void) __attribute__ ((__const__));

extern
void pango_font_family_list_faces (PangoFontFamily *family,
                                                   PangoFontFace ***faces,
                                                   int *n_faces);
extern
const char *pango_font_family_get_name (PangoFontFamily *family) __attribute__((__pure__));
extern
gboolean pango_font_family_is_monospace (PangoFontFamily *family) __attribute__((__pure__));
extern
gboolean pango_font_family_is_variable (PangoFontFamily *family) __attribute__((__pure__));

extern
PangoFontFace *pango_font_family_get_face (PangoFontFamily *family,
                                           const char *name);
# 480 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontFaceClass PangoFontFaceClass;
# 490 "/usr/include/pango-1.0/pango/pango-font.h"
struct _PangoFontFace
{
  GObject parent_instance;
};

struct _PangoFontFaceClass
{
  GObjectClass parent_class;



  const char * (*get_face_name) (PangoFontFace *face);
  PangoFontDescription * (*describe) (PangoFontFace *face);
  void (*list_sizes) (PangoFontFace *face,
                                            int **sizes,
                                            int *n_sizes);
  gboolean (*is_synthesized) (PangoFontFace *face);
  PangoFontFamily * (*get_family) (PangoFontFace *face);




  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};



extern
GType pango_font_face_get_type (void) __attribute__ ((__const__));

extern
PangoFontDescription *pango_font_face_describe (PangoFontFace *face);
extern
const char *pango_font_face_get_face_name (PangoFontFace *face) __attribute__((__pure__));
extern
void pango_font_face_list_sizes (PangoFontFace *face,
                                                      int **sizes,
                                                      int *n_sizes);
extern
gboolean pango_font_face_is_synthesized (PangoFontFace *face) __attribute__((__pure__));

extern
PangoFontFamily * pango_font_face_get_family (PangoFontFace *face);
# 556 "/usr/include/pango-1.0/pango/pango-font.h"
struct _PangoFont
{
  GObject parent_instance;
};

typedef struct _PangoFontClass PangoFontClass;
struct _PangoFontClass
{
  GObjectClass parent_class;



  PangoFontDescription *(*describe) (PangoFont *font);
  PangoCoverage * (*get_coverage) (PangoFont *font,
                                               PangoLanguage *language);
  void (*get_glyph_extents) (PangoFont *font,
                                               PangoGlyph glyph,
                                               PangoRectangle *ink_rect,
                                               PangoRectangle *logical_rect);
  PangoFontMetrics * (*get_metrics) (PangoFont *font,
                                               PangoLanguage *language);
  PangoFontMap * (*get_font_map) (PangoFont *font);
  PangoFontDescription *(*describe_absolute) (PangoFont *font);
  void (*get_features) (PangoFont *font,
                                               hb_feature_t *features,
                                               guint len,
                                               guint *num_features);
  hb_font_t * (*create_hb_font) (PangoFont *font);
};



extern
GType pango_font_get_type (void) __attribute__ ((__const__));

extern
PangoFontDescription *pango_font_describe (PangoFont *font);
extern
PangoFontDescription *pango_font_describe_with_absolute_size (PangoFont *font);
extern
PangoCoverage * pango_font_get_coverage (PangoFont *font,
                                                    PangoLanguage *language);

__attribute__((__deprecated__)) extern
PangoEngineShape * pango_font_find_shaper (PangoFont *font,
                                                    PangoLanguage *language,
                                                    guint32 ch);

extern
PangoFontMetrics * pango_font_get_metrics (PangoFont *font,
                                                    PangoLanguage *language);
extern
void pango_font_get_glyph_extents (PangoFont *font,
                                                    PangoGlyph glyph,
                                                    PangoRectangle *ink_rect,
                                                    PangoRectangle *logical_rect);
extern
PangoFontMap *pango_font_get_font_map (PangoFont *font);

extern
PangoFontFace * pango_font_get_face (PangoFont *font);

extern
gboolean pango_font_has_char (PangoFont *font,
                                                    gunichar wc);
extern
void pango_font_get_features (PangoFont *font,
                                                    hb_feature_t *features,
                                                    guint len,
                                                    guint *num_features);
extern
hb_font_t * pango_font_get_hb_font (PangoFont *font);

extern
PangoLanguage ** pango_font_get_languages (PangoFont *font);

extern
GBytes * pango_font_serialize (PangoFont *font);

extern
PangoFont * pango_font_deserialize (PangoContext *context,
                                                    GBytes *bytes,
                                                    GError **error);
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
typedef PangoFontFamily *PangoFontFamily_autoptr; typedef GList *PangoFontFamily_listautoptr; typedef GSList *PangoFontFamily_slistautoptr; typedef GQueue *PangoFontFamily_queueautoptr;
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic push
# 692 "/usr/include/pango-1.0/pango/pango-font.h"

# 692 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontFamily (PangoFontFamily *_ptr) { if (_ptr) (g_object_unref) ((PangoFontFamily *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontFamily (PangoFontFamily **_ptr) { glib_autoptr_clear_PangoFontFamily (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontFamily (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontFamily (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontFamily (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic pop
# 692 "/usr/include/pango-1.0/pango/pango-font.h"

typedef PangoFontFace *PangoFontFace_autoptr; typedef GList *PangoFontFace_listautoptr; typedef GSList *PangoFontFace_slistautoptr; typedef GQueue *PangoFontFace_queueautoptr;
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic push
# 693 "/usr/include/pango-1.0/pango/pango-font.h"

# 693 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontFace (PangoFontFace *_ptr) { if (_ptr) (g_object_unref) ((PangoFontFace *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontFace (PangoFontFace **_ptr) { glib_autoptr_clear_PangoFontFace (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontFace (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontFace (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontFace (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic pop
# 693 "/usr/include/pango-1.0/pango/pango-font.h"

typedef PangoFont *PangoFont_autoptr; typedef GList *PangoFont_listautoptr; typedef GSList *PangoFont_slistautoptr; typedef GQueue *PangoFont_queueautoptr;
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic push
# 694 "/usr/include/pango-1.0/pango/pango-font.h"

# 694 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFont (PangoFont *_ptr) { if (_ptr) (g_object_unref) ((PangoFont *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFont (PangoFont **_ptr) { glib_autoptr_clear_PangoFont (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFont (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFont (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFont (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic pop
# 694 "/usr/include/pango-1.0/pango/pango-font.h"

typedef PangoFontDescription *PangoFontDescription_autoptr; typedef GList *PangoFontDescription_listautoptr; typedef GSList *PangoFontDescription_slistautoptr; typedef GQueue *PangoFontDescription_queueautoptr;
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic push
# 695 "/usr/include/pango-1.0/pango/pango-font.h"

# 695 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontDescription (PangoFontDescription *_ptr) { if (_ptr) (pango_font_description_free) ((PangoFontDescription *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontDescription (PangoFontDescription **_ptr) { glib_autoptr_clear_PangoFontDescription (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontDescription (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_font_description_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontDescription (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_font_description_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontDescription (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) pango_font_description_free); }
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma GCC diagnostic pop
# 695 "/usr/include/pango-1.0/pango/pango-font.h"



# 26 "/usr/include/pango-1.0/pango/pango-attributes.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-color.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-color.h"



typedef struct _PangoColor PangoColor;
# 42 "/usr/include/pango-1.0/pango/pango-color.h"
struct _PangoColor
{
  guint16 red;
  guint16 green;
  guint16 blue;
};



extern
GType pango_color_get_type (void) __attribute__ ((__const__));

extern
PangoColor *pango_color_copy (const PangoColor *src);

extern
void pango_color_free (PangoColor *color);

extern
gboolean pango_color_parse (PangoColor *color,
                                          const char *spec);

extern
gboolean pango_color_parse_with_alpha (PangoColor *color,
                                          guint16 *alpha,
                                          const char *spec);

extern
char *pango_color_to_string (const PangoColor *color);



# 27 "/usr/include/pango-1.0/pango/pango-attributes.h" 2





typedef struct _PangoAttribute PangoAttribute;
typedef struct _PangoAttrClass PangoAttrClass;

typedef struct _PangoAttrString PangoAttrString;
typedef struct _PangoAttrLanguage PangoAttrLanguage;
typedef struct _PangoAttrInt PangoAttrInt;
typedef struct _PangoAttrSize PangoAttrSize;
typedef struct _PangoAttrFloat PangoAttrFloat;
typedef struct _PangoAttrColor PangoAttrColor;
typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
typedef struct _PangoAttrShape PangoAttrShape;
typedef struct _PangoAttrFontFeatures PangoAttrFontFeatures;
# 92 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum
{
  PANGO_ATTR_INVALID,
  PANGO_ATTR_LANGUAGE,
  PANGO_ATTR_FAMILY,
  PANGO_ATTR_STYLE,
  PANGO_ATTR_WEIGHT,
  PANGO_ATTR_VARIANT,
  PANGO_ATTR_STRETCH,
  PANGO_ATTR_SIZE,
  PANGO_ATTR_FONT_DESC,
  PANGO_ATTR_FOREGROUND,
  PANGO_ATTR_BACKGROUND,
  PANGO_ATTR_UNDERLINE,
  PANGO_ATTR_STRIKETHROUGH,
  PANGO_ATTR_RISE,
  PANGO_ATTR_SHAPE,
  PANGO_ATTR_SCALE,
  PANGO_ATTR_FALLBACK,
  PANGO_ATTR_LETTER_SPACING,
  PANGO_ATTR_UNDERLINE_COLOR,
  PANGO_ATTR_STRIKETHROUGH_COLOR,
  PANGO_ATTR_ABSOLUTE_SIZE,
  PANGO_ATTR_GRAVITY,
  PANGO_ATTR_GRAVITY_HINT,
  PANGO_ATTR_FONT_FEATURES,
  PANGO_ATTR_FOREGROUND_ALPHA,
  PANGO_ATTR_BACKGROUND_ALPHA,
  PANGO_ATTR_ALLOW_BREAKS,
  PANGO_ATTR_SHOW,
  PANGO_ATTR_INSERT_HYPHENS,
  PANGO_ATTR_OVERLINE,
  PANGO_ATTR_OVERLINE_COLOR,
  PANGO_ATTR_LINE_HEIGHT,
  PANGO_ATTR_ABSOLUTE_LINE_HEIGHT,
  PANGO_ATTR_TEXT_TRANSFORM,
  PANGO_ATTR_WORD,
  PANGO_ATTR_SENTENCE,
  PANGO_ATTR_BASELINE_SHIFT,
  PANGO_ATTR_FONT_SCALE,
} PangoAttrType;
# 166 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_UNDERLINE_NONE,
  PANGO_UNDERLINE_SINGLE,
  PANGO_UNDERLINE_DOUBLE,
  PANGO_UNDERLINE_LOW,
  PANGO_UNDERLINE_ERROR,
  PANGO_UNDERLINE_SINGLE_LINE,
  PANGO_UNDERLINE_DOUBLE_LINE,
  PANGO_UNDERLINE_ERROR_LINE
} PangoUnderline;
# 189 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_OVERLINE_NONE,
  PANGO_OVERLINE_SINGLE
} PangoOverline;
# 207 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_SHOW_NONE = 0,
  PANGO_SHOW_SPACES = 1 << 0,
  PANGO_SHOW_LINE_BREAKS = 1 << 1,
  PANGO_SHOW_IGNORABLES = 1 << 2
} PangoShowFlags;
# 226 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_TEXT_TRANSFORM_NONE,
  PANGO_TEXT_TRANSFORM_LOWERCASE,
  PANGO_TEXT_TRANSFORM_UPPERCASE,
  PANGO_TEXT_TRANSFORM_CAPITALIZE,
} PangoTextTransform;
# 245 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_BASELINE_SHIFT_NONE,
  PANGO_BASELINE_SHIFT_SUPERSCRIPT,
  PANGO_BASELINE_SHIFT_SUBSCRIPT,
} PangoBaselineShift;
# 263 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_FONT_SCALE_NONE,
  PANGO_FONT_SCALE_SUPERSCRIPT,
  PANGO_FONT_SCALE_SUBSCRIPT,
  PANGO_FONT_SCALE_SMALL_CAPS,
} PangoFontScale;
# 306 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttribute
{
  const PangoAttrClass *klass;
  guint start_index;
  guint end_index;
};
# 323 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef gboolean (*PangoAttrFilterFunc) (PangoAttribute *attribute,
                                         gpointer user_data);
# 334 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef gpointer (*PangoAttrDataCopyFunc) (gconstpointer user_data);
# 352 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrClass
{

  PangoAttrType type;
  PangoAttribute * (*copy) (const PangoAttribute *attr);
  void (*destroy) (PangoAttribute *attr);
  gboolean (*equal) (const PangoAttribute *attr1, const PangoAttribute *attr2);
};
# 369 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrString
{
  PangoAttribute attr;
  char *value;
};
# 382 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrLanguage
{
  PangoAttribute attr;
  PangoLanguage *value;
};
# 395 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrInt
{
  PangoAttribute attr;
  int value;
};
# 408 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrFloat
{
  PangoAttribute attr;
  double value;
};
# 421 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrColor
{
  PangoAttribute attr;
  PangoColor color;
};
# 440 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrSize
{
  PangoAttribute attr;
  int size;
  guint absolute : 1;
};
# 459 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrShape
{
  PangoAttribute attr;
  PangoRectangle ink_rect;
  PangoRectangle logical_rect;

  gpointer data;
  PangoAttrDataCopyFunc copy_func;
  GDestroyNotify destroy_func;
};
# 478 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrFontDesc
{
  PangoAttribute attr;
  PangoFontDescription *desc;
};
# 494 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrFontFeatures
{
  PangoAttribute attr;
  gchar *features;
};

extern
GType pango_attribute_get_type (void) __attribute__ ((__const__));

extern
PangoAttrType pango_attr_type_register (const char *name);
extern
const char * pango_attr_type_get_name (PangoAttrType type) __attribute__ ((__const__));
extern
void pango_attribute_init (PangoAttribute *attr,
                                                                 const PangoAttrClass *klass);
extern
PangoAttribute * pango_attribute_copy (const PangoAttribute *attr);
extern
void pango_attribute_destroy (PangoAttribute *attr);
extern
gboolean pango_attribute_equal (const PangoAttribute *attr1,
                                                                 const PangoAttribute *attr2) __attribute__((__pure__));

extern
PangoAttribute * pango_attr_language_new (PangoLanguage *language);
extern
PangoAttribute * pango_attr_family_new (const char *family);
extern
PangoAttribute * pango_attr_foreground_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_background_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_size_new (int size);
extern
PangoAttribute * pango_attr_size_new_absolute (int size);
extern
PangoAttribute * pango_attr_style_new (PangoStyle style);
extern
PangoAttribute * pango_attr_weight_new (PangoWeight weight);
extern
PangoAttribute * pango_attr_variant_new (PangoVariant variant);
extern
PangoAttribute * pango_attr_stretch_new (PangoStretch stretch);
extern
PangoAttribute * pango_attr_font_desc_new (const PangoFontDescription *desc);

extern
PangoAttribute * pango_attr_underline_new (PangoUnderline underline);
extern
PangoAttribute * pango_attr_underline_color_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_strikethrough_new (gboolean strikethrough);
extern
PangoAttribute * pango_attr_strikethrough_color_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_rise_new (int rise);
extern
PangoAttribute * pango_attr_baseline_shift_new (int shift);
extern
PangoAttribute * pango_attr_font_scale_new (PangoFontScale scale);
extern
PangoAttribute * pango_attr_scale_new (double scale_factor);
extern
PangoAttribute * pango_attr_fallback_new (gboolean enable_fallback);
extern
PangoAttribute * pango_attr_letter_spacing_new (int letter_spacing);
extern
PangoAttribute * pango_attr_shape_new (const PangoRectangle *ink_rect,
                                                                 const PangoRectangle *logical_rect);
extern
PangoAttribute * pango_attr_shape_new_with_data (const PangoRectangle *ink_rect,
                                                                 const PangoRectangle *logical_rect,
                                                                 gpointer data,
                                                                 PangoAttrDataCopyFunc copy_func,
                                                                 GDestroyNotify destroy_func);
extern
PangoAttribute * pango_attr_gravity_new (PangoGravity gravity);
extern
PangoAttribute * pango_attr_gravity_hint_new (PangoGravityHint hint);
extern
PangoAttribute * pango_attr_font_features_new (const char *features);
extern
PangoAttribute * pango_attr_foreground_alpha_new (guint16 alpha);
extern
PangoAttribute * pango_attr_background_alpha_new (guint16 alpha);
extern
PangoAttribute * pango_attr_allow_breaks_new (gboolean allow_breaks);

extern
PangoAttribute * pango_attr_word_new (void);
extern
PangoAttribute * pango_attr_sentence_new (void);

extern
PangoAttribute * pango_attr_insert_hyphens_new (gboolean insert_hyphens);
extern
PangoAttribute * pango_attr_overline_new (PangoOverline overline);
extern
PangoAttribute * pango_attr_overline_color_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_show_new (PangoShowFlags flags);
extern
PangoAttribute * pango_attr_line_height_new (double factor);
extern
PangoAttribute * pango_attr_line_height_new_absolute (int height);
extern
PangoAttribute * pango_attr_text_transform_new (PangoTextTransform transform);

extern
PangoAttrString * pango_attribute_as_string (PangoAttribute *attr);
extern
PangoAttrLanguage * pango_attribute_as_language (PangoAttribute *attr);
extern
PangoAttrInt * pango_attribute_as_int (PangoAttribute *attr);
extern
PangoAttrSize * pango_attribute_as_size (PangoAttribute *attr);
extern
PangoAttrFloat * pango_attribute_as_float (PangoAttribute *attr);
extern
PangoAttrColor * pango_attribute_as_color (PangoAttribute *attr);
extern
PangoAttrFontDesc * pango_attribute_as_font_desc (PangoAttribute *attr);
extern
PangoAttrShape * pango_attribute_as_shape (PangoAttribute *attr);
extern
PangoAttrFontFeatures * pango_attribute_as_font_features (PangoAttribute *attr);



typedef struct _PangoAttrList PangoAttrList;
typedef struct _PangoAttrIterator PangoAttrIterator;
# 667 "/usr/include/pango-1.0/pango/pango-attributes.h"
extern
GType pango_attr_list_get_type (void) __attribute__ ((__const__));

extern
PangoAttrList * pango_attr_list_new (void);
extern
PangoAttrList * pango_attr_list_ref (PangoAttrList *list);
extern
void pango_attr_list_unref (PangoAttrList *list);
extern
PangoAttrList * pango_attr_list_copy (PangoAttrList *list);
extern
void pango_attr_list_insert (PangoAttrList *list,
                                                         PangoAttribute *attr);
extern
void pango_attr_list_insert_before (PangoAttrList *list,
                                                         PangoAttribute *attr);
extern
void pango_attr_list_change (PangoAttrList *list,
                                                         PangoAttribute *attr);
extern
void pango_attr_list_splice (PangoAttrList *list,
                                                         PangoAttrList *other,
                                                         int pos,
                                                         int len);
extern
void pango_attr_list_update (PangoAttrList *list,
                                                         int pos,
                                                         int remove,
                                                         int add);

extern
PangoAttrList * pango_attr_list_filter (PangoAttrList *list,
                                                         PangoAttrFilterFunc func,
                                                         gpointer data);

extern
GSList * pango_attr_list_get_attributes (PangoAttrList *list);

extern
gboolean pango_attr_list_equal (PangoAttrList *list,
                                                         PangoAttrList *other_list);

extern
char * pango_attr_list_to_string (PangoAttrList *list);
extern
PangoAttrList * pango_attr_list_from_string (const char *text);

extern
GType pango_attr_iterator_get_type (void) __attribute__ ((__const__));

extern
PangoAttrIterator * pango_attr_list_get_iterator (PangoAttrList *list);

extern
void pango_attr_iterator_range (PangoAttrIterator *iterator,
                                                         int *start,
                                                         int *end);
extern
gboolean pango_attr_iterator_next (PangoAttrIterator *iterator);
extern
PangoAttrIterator * pango_attr_iterator_copy (PangoAttrIterator *iterator);
extern
void pango_attr_iterator_destroy (PangoAttrIterator *iterator);
extern
PangoAttribute * pango_attr_iterator_get (PangoAttrIterator *iterator,
                                                         PangoAttrType type);
extern
void pango_attr_iterator_get_font (PangoAttrIterator *iterator,
                                                         PangoFontDescription *desc,
                                                         PangoLanguage **language,
                                                         GSList **extra_attrs);
extern
GSList * pango_attr_iterator_get_attrs (PangoAttrIterator *iterator);

typedef PangoAttribute *PangoAttribute_autoptr; typedef GList *PangoAttribute_listautoptr; typedef GSList *PangoAttribute_slistautoptr; typedef GQueue *PangoAttribute_queueautoptr;
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic push
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"

# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoAttribute (PangoAttribute *_ptr) { if (_ptr) (pango_attribute_destroy) ((PangoAttribute *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoAttribute (PangoAttribute **_ptr) { glib_autoptr_clear_PangoAttribute (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoAttribute (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_attribute_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoAttribute (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_attribute_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoAttribute (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) pango_attribute_destroy); }
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic pop
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"

typedef PangoAttrList *PangoAttrList_autoptr; typedef GList *PangoAttrList_listautoptr; typedef GSList *PangoAttrList_slistautoptr; typedef GQueue *PangoAttrList_queueautoptr;
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic push
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"

# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoAttrList (PangoAttrList *_ptr) { if (_ptr) (pango_attr_list_unref) ((PangoAttrList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoAttrList (PangoAttrList **_ptr) { glib_autoptr_clear_PangoAttrList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoAttrList (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_attr_list_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoAttrList (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_attr_list_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoAttrList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) pango_attr_list_unref); }
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic pop
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"

typedef PangoAttrIterator *PangoAttrIterator_autoptr; typedef GList *PangoAttrIterator_listautoptr; typedef GSList *PangoAttrIterator_slistautoptr; typedef GQueue *PangoAttrIterator_queueautoptr;
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic push
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"

# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoAttrIterator (PangoAttrIterator *_ptr) { if (_ptr) (pango_attr_iterator_destroy) ((PangoAttrIterator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoAttrIterator (PangoAttrIterator **_ptr) { glib_autoptr_clear_PangoAttrIterator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoAttrIterator (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_attr_iterator_destroy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoAttrIterator (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_attr_iterator_destroy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoAttrIterator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) pango_attr_iterator_destroy); }
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma GCC diagnostic pop
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"



# 26 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-break.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-break.h"


# 1 "/usr/include/pango-1.0/pango/pango-item.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-item.h"


typedef struct _PangoAnalysis PangoAnalysis;
typedef struct _PangoItem PangoItem;
# 77 "/usr/include/pango-1.0/pango/pango-item.h"
struct _PangoAnalysis
{

  PangoEngineShape *shape_engine;
  PangoEngineLang *lang_engine;




  PangoFont *font;

  guint8 level;
  guint8 gravity;
  guint8 flags;

  guint8 script;
  PangoLanguage *language;

  GSList *extra_attrs;
};
# 111 "/usr/include/pango-1.0/pango/pango-item.h"
struct _PangoItem
{
  int offset;
  int length;
  int num_chars;
  PangoAnalysis analysis;
};



extern
GType pango_item_get_type (void) __attribute__ ((__const__));

extern
PangoItem * pango_item_new (void);
extern
PangoItem * pango_item_copy (PangoItem *item);
extern
void pango_item_free (PangoItem *item);

extern
PangoItem * pango_item_split (PangoItem *orig,
                                                      int split_index,
                                                      int split_offset);

extern
void pango_item_apply_attrs (PangoItem *item,
                                                      PangoAttrIterator *iter);

extern
GList * pango_reorder_items (GList *items);



extern
GList * pango_itemize (PangoContext *context,
                                                      const char *text,
                                                      int start_index,
                                                      int length,
                                                      PangoAttrList *attrs,
                                                      PangoAttrIterator *cached_iter);

extern
GList * pango_itemize_with_base_dir (PangoContext *context,
                                                      PangoDirection base_dir,
                                                      const char *text,
                                                      int start_index,
                                                      int length,
                                                      PangoAttrList *attrs,
                                                      PangoAttrIterator *cached_iter);



# 30 "/usr/include/pango-1.0/pango/pango-break.h" 2
# 83 "/usr/include/pango-1.0/pango/pango-break.h"
struct _PangoLogAttr
{
  guint is_line_break : 1;
  guint is_mandatory_break : 1;
  guint is_char_break : 1;
  guint is_white : 1;
  guint is_cursor_position : 1;
  guint is_word_start : 1;
  guint is_word_end : 1;
  guint is_sentence_boundary : 1;
  guint is_sentence_start : 1;
  guint is_sentence_end : 1;
  guint backspace_deletes_character : 1;
  guint is_expandable_space : 1;
  guint is_word_boundary : 1;
  guint break_inserts_hyphen : 1;
  guint break_removes_preceding : 1;

  guint reserved : 17;
};

__attribute__((__deprecated__)) extern
void pango_break (const char *text,
                                                 int length,
                                                 PangoAnalysis *analysis,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_get_log_attrs (const char *text,
                                                 int length,
                                                 int level,
                                                 PangoLanguage *language,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_default_break (const char *text,
                                                 int length,
                                                 PangoAnalysis *analysis,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_tailor_break (const char *text,
                                                 int length,
                                                 PangoAnalysis *analysis,
                                                 int offset,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_attr_break (const char *text,
                                                 int length,
                                                 PangoAttrList *attr_list,
                                                 int offset,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);


# 28 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-context.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-context.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontmap.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-fontmap.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontset.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-fontset.h"

# 44 "/usr/include/pango-1.0/pango/pango-fontset.h"
extern
GType pango_fontset_get_type (void) __attribute__ ((__const__));

typedef struct _PangoFontset PangoFontset;
typedef struct _PangoFontsetClass PangoFontsetClass;
# 64 "/usr/include/pango-1.0/pango/pango-fontset.h"
typedef gboolean (*PangoFontsetForeachFunc) (PangoFontset *fontset,
                                             PangoFont *font,
                                             gpointer user_data);
# 78 "/usr/include/pango-1.0/pango/pango-fontset.h"
struct _PangoFontset
{
  GObject parent_instance;
};
# 97 "/usr/include/pango-1.0/pango/pango-fontset.h"
struct _PangoFontsetClass
{
  GObjectClass parent_class;



  PangoFont * (*get_font) (PangoFontset *fontset,
                                     guint wc);

  PangoFontMetrics *(*get_metrics) (PangoFontset *fontset);
  PangoLanguage * (*get_language) (PangoFontset *fontset);
  void (*foreach) (PangoFontset *fontset,
                                     PangoFontsetForeachFunc func,
                                     gpointer data);




  void (*_pango_reserved1) (void);
  void (*_pango_reserved2) (void);
  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};

extern
PangoFont * pango_fontset_get_font (PangoFontset *fontset,
                                                         guint wc);
extern
PangoFontMetrics * pango_fontset_get_metrics (PangoFontset *fontset);
extern
void pango_fontset_foreach (PangoFontset *fontset,
                                                         PangoFontsetForeachFunc func,
                                                         gpointer data);



# 28 "/usr/include/pango-1.0/pango/pango-fontmap.h" 2


# 38 "/usr/include/pango-1.0/pango/pango-fontmap.h"
typedef struct _PangoFontMapClass PangoFontMapClass;
# 49 "/usr/include/pango-1.0/pango/pango-fontmap.h"
struct _PangoFontMap
{
  GObject parent_instance;
};
# 72 "/usr/include/pango-1.0/pango/pango-fontmap.h"
struct _PangoFontMapClass
{
  GObjectClass parent_class;



  PangoFont * (*load_font) (PangoFontMap *fontmap,
                                  PangoContext *context,
                                  const PangoFontDescription *desc);
  void (*list_families) (PangoFontMap *fontmap,
                                  PangoFontFamily ***families,
                                  int *n_families);
  PangoFontset *(*load_fontset) (PangoFontMap *fontmap,
                                  PangoContext *context,
                                  const PangoFontDescription *desc,
                                  PangoLanguage *language);

  const char *shape_engine_type;

  guint (*get_serial) (PangoFontMap *fontmap);
  void (*changed) (PangoFontMap *fontmap);

  PangoFontFamily * (*get_family) (PangoFontMap *fontmap,
                                   const char *name);

  PangoFontFace * (*get_face) (PangoFontMap *fontmap,
                                   PangoFont *font);
};

extern
GType pango_font_map_get_type (void) __attribute__ ((__const__));
extern
PangoContext * pango_font_map_create_context (PangoFontMap *fontmap);
extern
PangoFont * pango_font_map_load_font (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc);
extern
PangoFontset *pango_font_map_load_fontset (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc,
         PangoLanguage *language);
extern
void pango_font_map_list_families (PangoFontMap *fontmap,
         PangoFontFamily ***families,
         int *n_families);
extern
guint pango_font_map_get_serial (PangoFontMap *fontmap);
extern
void pango_font_map_changed (PangoFontMap *fontmap);

extern
PangoFontFamily *pango_font_map_get_family (PangoFontMap *fontmap,
                                            const char *name);


typedef PangoFontMap *PangoFontMap_autoptr; typedef GList *PangoFontMap_listautoptr; typedef GSList *PangoFontMap_slistautoptr; typedef GQueue *PangoFontMap_queueautoptr;
# 128 "/usr/include/pango-1.0/pango/pango-fontmap.h"
#pragma GCC diagnostic push
# 128 "/usr/include/pango-1.0/pango/pango-fontmap.h"

# 128 "/usr/include/pango-1.0/pango/pango-fontmap.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 128 "/usr/include/pango-1.0/pango/pango-fontmap.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontMap (PangoFontMap *_ptr) { if (_ptr) (g_object_unref) ((PangoFontMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontMap (PangoFontMap **_ptr) { glib_autoptr_clear_PangoFontMap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontMap (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontMap (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontMap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 128 "/usr/include/pango-1.0/pango/pango-fontmap.h"
#pragma GCC diagnostic pop
# 128 "/usr/include/pango-1.0/pango/pango-fontmap.h"



# 28 "/usr/include/pango-1.0/pango/pango-context.h" 2





typedef struct _PangoContextClass PangoContextClass;
# 43 "/usr/include/pango-1.0/pango/pango-context.h"
extern
GType pango_context_get_type (void) __attribute__ ((__const__));

extern
PangoContext * pango_context_new (void);
extern
void pango_context_changed (PangoContext *context);
extern
void pango_context_set_font_map (PangoContext *context,
                                                                 PangoFontMap *font_map);
extern
PangoFontMap * pango_context_get_font_map (PangoContext *context);
extern
guint pango_context_get_serial (PangoContext *context);
extern
void pango_context_list_families (PangoContext *context,
                                                                 PangoFontFamily ***families,
                                                                 int *n_families);
extern
PangoFont * pango_context_load_font (PangoContext *context,
                                                                 const PangoFontDescription *desc);
extern
PangoFontset * pango_context_load_fontset (PangoContext *context,
                                                                 const PangoFontDescription *desc,
                                                                 PangoLanguage *language);

extern
PangoFontMetrics * pango_context_get_metrics (PangoContext *context,
                                                                 const PangoFontDescription *desc,
                                                                 PangoLanguage *language);

extern
void pango_context_set_font_description (PangoContext *context,
                                                                 const PangoFontDescription *desc);
extern
PangoFontDescription * pango_context_get_font_description (PangoContext *context);
extern
PangoLanguage * pango_context_get_language (PangoContext *context);
extern
void pango_context_set_language (PangoContext *context,
                                                                 PangoLanguage *language);
extern
void pango_context_set_base_dir (PangoContext *context,
                                                                 PangoDirection direction);
extern
PangoDirection pango_context_get_base_dir (PangoContext *context);
extern
void pango_context_set_base_gravity (PangoContext *context,
                                                                 PangoGravity gravity);
extern
PangoGravity pango_context_get_base_gravity (PangoContext *context);
extern
PangoGravity pango_context_get_gravity (PangoContext *context);
extern
void pango_context_set_gravity_hint (PangoContext *context,
                                                                 PangoGravityHint hint);
extern
PangoGravityHint pango_context_get_gravity_hint (PangoContext *context);

extern
void pango_context_set_matrix (PangoContext *context,
                                                                 const PangoMatrix *matrix);
extern
const PangoMatrix * pango_context_get_matrix (PangoContext *context);

extern
void pango_context_set_round_glyph_positions (PangoContext *context,
                                                                 gboolean round_positions);
extern
gboolean pango_context_get_round_glyph_positions (PangoContext *context);


# 30 "/usr/include/pango-1.0/pango/pango.h" 2


# 1 "/usr/include/pango-1.0/pango/pango-engine.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-engine.h"
# 1 "/usr/include/pango-1.0/pango/pango-glyph.h" 1
# 29 "/usr/include/pango-1.0/pango/pango-glyph.h"


typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
typedef struct _PangoGlyphInfo PangoGlyphInfo;
typedef struct _PangoGlyphString PangoGlyphString;
# 52 "/usr/include/pango-1.0/pango/pango-glyph.h"
typedef gint32 PangoGlyphUnit;
# 78 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphGeometry
{
  PangoGlyphUnit width;
  PangoGlyphUnit x_offset;
  PangoGlyphUnit y_offset;
};
# 103 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphVisAttr
{
  guint is_cluster_start : 1;
  guint is_color : 1;
};
# 120 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphInfo
{
  PangoGlyph glyph;
  PangoGlyphGeometry geometry;
  PangoGlyphVisAttr attr;
};
# 140 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphString {
  int num_glyphs;

  PangoGlyphInfo *glyphs;
  int *log_clusters;


  int space;
};



extern
GType pango_glyph_string_get_type (void) __attribute__ ((__const__));

extern
PangoGlyphString * pango_glyph_string_new (void);
extern
void pango_glyph_string_set_size (PangoGlyphString *string,
                                                                 int new_len);

extern
PangoGlyphString * pango_glyph_string_copy (PangoGlyphString *string);
extern
void pango_glyph_string_free (PangoGlyphString *string);

extern
void pango_glyph_string_extents (PangoGlyphString *glyphs,
                                                                 PangoFont *font,
                                                                 PangoRectangle *ink_rect,
                                                                 PangoRectangle *logical_rect);
extern
int pango_glyph_string_get_width (PangoGlyphString *glyphs);

extern
void pango_glyph_string_extents_range (PangoGlyphString *glyphs,
                                                                 int start,
                                                                 int end,
                                                                 PangoFont *font,
                                                                 PangoRectangle *ink_rect,
                                                                 PangoRectangle *logical_rect);

extern
void pango_glyph_string_get_logical_widths (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 int embedding_level,
                                                                 int *logical_widths);

extern
void pango_glyph_string_index_to_x (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 PangoAnalysis *analysis,
                                                                 int index_,
                                                                 gboolean trailing,
                                                                 int *x_pos);
extern
void pango_glyph_string_x_to_index (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 PangoAnalysis *analysis,
                                                                 int x_pos,
                                                                 int *index_,
                                                                 int *trailing);

extern
void pango_glyph_string_index_to_x_full (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 PangoAnalysis *analysis,
                                                                 PangoLogAttr *attrs,
                                                                 int index_,
                                                                 gboolean trailing,
                                                                 int *x_pos);
# 230 "/usr/include/pango-1.0/pango/pango-glyph.h"
typedef enum {
  PANGO_SHAPE_NONE = 0,
  PANGO_SHAPE_ROUND_POSITIONS = 1 << 0,
} PangoShapeFlags;

extern
void pango_shape (const char *text,
                                                                 int length,
                                                                 const PangoAnalysis *analysis,
                                                                 PangoGlyphString *glyphs);

extern
void pango_shape_full (const char *item_text,
                                                                 int item_length,
                                                                 const char *paragraph_text,
                                                                 int paragraph_length,
                                                                 const PangoAnalysis *analysis,
                                                                 PangoGlyphString *glyphs);

extern
void pango_shape_with_flags (const char *item_text,
                                                                 int item_length,
                                                                 const char *paragraph_text,
                                                                 int paragraph_length,
                                                                 const PangoAnalysis *analysis,
                                                                 PangoGlyphString *glyphs,
                                                                 PangoShapeFlags flags);


extern
void pango_shape_item (PangoItem *item,
                                                                 const char *paragraph_text,
                                                                 int paragraph_length,
                                                                 PangoLogAttr *log_attrs,
                                                                 PangoGlyphString *glyphs,
                                                                 PangoShapeFlags flags);



# 29 "/usr/include/pango-1.0/pango/pango-engine.h" 2



# 57 "/usr/include/pango-1.0/pango/pango-engine.h"
typedef struct _PangoEngine PangoEngine;
typedef struct _PangoEngineClass PangoEngineClass;
# 68 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngine
{

  GObject parent_instance;
};
# 81 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineClass
{

  GObjectClass parent_class;
};

__attribute__((__deprecated__)) extern
GType pango_engine_get_type (void) __attribute__ ((__const__));
# 107 "/usr/include/pango-1.0/pango/pango-engine.h"
typedef struct _PangoEngineLangClass PangoEngineLangClass;
# 121 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineLang
{

  PangoEngine parent_instance;
};
# 140 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineLangClass
{

  PangoEngineClass parent_class;


  void (*script_break) (PangoEngineLang *engine,
   const char *text,
   int len,
   PangoAnalysis *analysis,
   PangoLogAttr *attrs,
   int attrs_len);
};

__attribute__((__deprecated__)) extern
GType pango_engine_lang_get_type (void) __attribute__ ((__const__));
# 174 "/usr/include/pango-1.0/pango/pango-engine.h"
typedef struct _PangoEngineShapeClass PangoEngineShapeClass;
# 190 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineShape
{
  PangoEngine parent_instance;
};
# 222 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineShapeClass
{

  PangoEngineClass parent_class;


  void (*script_shape) (PangoEngineShape *engine,
   PangoFont *font,
   const char *item_text,
   unsigned int item_length,
   const PangoAnalysis *analysis,
   PangoGlyphString *glyphs,
   const char *paragraph_text,
   unsigned int paragraph_length);
  PangoCoverageLevel (*covers) (PangoEngineShape *engine,
      PangoFont *font,
      PangoLanguage *language,
      gunichar wc);
};

__attribute__((__deprecated__)) extern
GType pango_engine_shape_get_type (void) __attribute__ ((__const__));

typedef struct _PangoEngineInfo PangoEngineInfo;
typedef struct _PangoEngineScriptInfo PangoEngineScriptInfo;
# 267 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineScriptInfo
{
  PangoScript script;
  const gchar *langs;
};
# 286 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineInfo
{
  const gchar *id;
  const gchar *engine_type;
  const gchar *render_type;
  PangoEngineScriptInfo *scripts;
  gint n_scripts;
};
# 304 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
void script_engine_list (PangoEngineInfo **engines,
    int *n_engines);
# 317 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
void script_engine_init (GTypeModule *module);
# 328 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
void script_engine_exit (void);
# 339 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
PangoEngine *script_engine_create (const char *id);
# 455 "/usr/include/pango-1.0/pango/pango-engine.h"

# 33 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-enum-types.h" 1
# 11 "/usr/include/pango-1.0/pango/pango-enum-types.h"



extern
GType pango_attr_type_get_type (void) __attribute__ ((__const__));

extern
GType pango_underline_get_type (void) __attribute__ ((__const__));

extern
GType pango_overline_get_type (void) __attribute__ ((__const__));

extern
GType pango_show_flags_get_type (void) __attribute__ ((__const__));

extern
GType pango_text_transform_get_type (void) __attribute__ ((__const__));

extern
GType pango_baseline_shift_get_type (void) __attribute__ ((__const__));

extern
GType pango_font_scale_get_type (void) __attribute__ ((__const__));



extern
GType pango_bidi_type_get_type (void) __attribute__ ((__const__));



extern
GType pango_coverage_level_get_type (void) __attribute__ ((__const__));



extern
GType pango_direction_get_type (void) __attribute__ ((__const__));



extern
GType pango_style_get_type (void) __attribute__ ((__const__));

extern
GType pango_variant_get_type (void) __attribute__ ((__const__));

extern
GType pango_weight_get_type (void) __attribute__ ((__const__));

extern
GType pango_stretch_get_type (void) __attribute__ ((__const__));

extern
GType pango_font_mask_get_type (void) __attribute__ ((__const__));



extern
GType pango_shape_flags_get_type (void) __attribute__ ((__const__));



extern
GType pango_gravity_get_type (void) __attribute__ ((__const__));

extern
GType pango_gravity_hint_get_type (void) __attribute__ ((__const__));



extern
GType pango_alignment_get_type (void) __attribute__ ((__const__));

extern
GType pango_wrap_mode_get_type (void) __attribute__ ((__const__));

extern
GType pango_ellipsize_mode_get_type (void) __attribute__ ((__const__));

extern
GType pango_layout_serialize_flags_get_type (void) __attribute__ ((__const__));

extern
GType pango_layout_deserialize_error_get_type (void) __attribute__ ((__const__));

extern
GType pango_layout_deserialize_flags_get_type (void) __attribute__ ((__const__));



extern
GType pango_render_part_get_type (void) __attribute__ ((__const__));



extern
GType pango_script_get_type (void) __attribute__ ((__const__));



extern
GType pango_tab_align_get_type (void) __attribute__ ((__const__));


# 34 "/usr/include/pango-1.0/pango/pango.h" 2




# 1 "/usr/include/pango-1.0/pango/pango-fontset-simple.h" 1
# 31 "/usr/include/pango-1.0/pango/pango-fontset-simple.h"

# 46 "/usr/include/pango-1.0/pango/pango-fontset-simple.h"
typedef struct _PangoFontsetSimple PangoFontsetSimple;
typedef struct _PangoFontsetSimpleClass PangoFontsetSimpleClass;


extern
GType pango_fontset_simple_get_type (void) __attribute__ ((__const__));

extern
PangoFontsetSimple * pango_fontset_simple_new (PangoLanguage *language);
extern
void pango_fontset_simple_append (PangoFontsetSimple *fontset,
                                                     PangoFont *font);
extern
int pango_fontset_simple_size (PangoFontsetSimple *fontset);



# 39 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-glyph-item.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-glyph-item.h"

# 50 "/usr/include/pango-1.0/pango/pango-glyph-item.h"
typedef struct _PangoGlyphItem PangoGlyphItem;

struct _PangoGlyphItem
{
  PangoItem *item;
  PangoGlyphString *glyphs;
  int y_offset;
  int start_x_offset;
  int end_x_offset;
};



extern
GType pango_glyph_item_get_type (void) __attribute__ ((__const__));

extern
PangoGlyphItem *pango_glyph_item_split (PangoGlyphItem *orig,
            const char *text,
            int split_index);
extern
PangoGlyphItem *pango_glyph_item_copy (PangoGlyphItem *orig);
extern
void pango_glyph_item_free (PangoGlyphItem *glyph_item);
extern
GSList * pango_glyph_item_apply_attrs (PangoGlyphItem *glyph_item,
            const char *text,
            PangoAttrList *list);
extern
void pango_glyph_item_letter_space (PangoGlyphItem *glyph_item,
            const char *text,
            PangoLogAttr *log_attrs,
            int letter_spacing);
extern
void pango_glyph_item_get_logical_widths (PangoGlyphItem *glyph_item,
            const char *text,
            int *logical_widths);
# 135 "/usr/include/pango-1.0/pango/pango-glyph-item.h"
typedef struct _PangoGlyphItemIter PangoGlyphItemIter;

struct _PangoGlyphItemIter
{
  PangoGlyphItem *glyph_item;
  const gchar *text;

  int start_glyph;
  int start_index;
  int start_char;

  int end_glyph;
  int end_index;
  int end_char;
};



extern
GType pango_glyph_item_iter_get_type (void) __attribute__ ((__const__));
extern
PangoGlyphItemIter *pango_glyph_item_iter_copy (PangoGlyphItemIter *orig);
extern
void pango_glyph_item_iter_free (PangoGlyphItemIter *iter);

extern
gboolean pango_glyph_item_iter_init_start (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
extern
gboolean pango_glyph_item_iter_init_end (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
extern
gboolean pango_glyph_item_iter_next_cluster (PangoGlyphItemIter *iter);
extern
gboolean pango_glyph_item_iter_prev_cluster (PangoGlyphItemIter *iter);


# 41 "/usr/include/pango-1.0/pango/pango.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-layout.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-layout.h"
# 1 "/usr/include/pango-1.0/pango/pango-tabs.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-tabs.h"


typedef struct _PangoTabArray PangoTabArray;
# 45 "/usr/include/pango-1.0/pango/pango-tabs.h"
typedef enum
{
  PANGO_TAB_LEFT,
  PANGO_TAB_RIGHT,
  PANGO_TAB_CENTER,
  PANGO_TAB_DECIMAL
} PangoTabAlign;



extern
PangoTabArray *pango_tab_array_new (gint initial_size,
           gboolean positions_in_pixels);
extern
PangoTabArray *pango_tab_array_new_with_positions (gint size,
           gboolean positions_in_pixels,
           PangoTabAlign first_alignment,
           gint first_position,
           ...);
extern
GType pango_tab_array_get_type (void) __attribute__ ((__const__));
extern
PangoTabArray *pango_tab_array_copy (PangoTabArray *src);
extern
void pango_tab_array_free (PangoTabArray *tab_array);
extern
gint pango_tab_array_get_size (PangoTabArray *tab_array);
extern
void pango_tab_array_resize (PangoTabArray *tab_array,
           gint new_size);
extern
void pango_tab_array_set_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign alignment,
           gint location);
extern
void pango_tab_array_get_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign *alignment,
           gint *location);
extern
void pango_tab_array_get_tabs (PangoTabArray *tab_array,
           PangoTabAlign **alignments,
           gint **locations);

extern
gboolean pango_tab_array_get_positions_in_pixels (PangoTabArray *tab_array);

extern
void pango_tab_array_set_positions_in_pixels (PangoTabArray *tab_array,
                                                         gboolean positions_in_pixels);

extern
char * pango_tab_array_to_string (PangoTabArray *tab_array);
extern
PangoTabArray * pango_tab_array_from_string (const char *text);

extern
void pango_tab_array_set_decimal_point (PangoTabArray *tab_array,
                                                     int tab_index,
                                                     gunichar decimal_point);
extern
gunichar pango_tab_array_get_decimal_point (PangoTabArray *tab_array,
                                                     int tab_index);

extern
void pango_tab_array_sort (PangoTabArray *tab_array);

typedef PangoTabArray *PangoTabArray_autoptr; typedef GList *PangoTabArray_listautoptr; typedef GSList *PangoTabArray_slistautoptr; typedef GQueue *PangoTabArray_queueautoptr;
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
#pragma GCC diagnostic push
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"

# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoTabArray (PangoTabArray *_ptr) { if (_ptr) (pango_tab_array_free) ((PangoTabArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoTabArray (PangoTabArray **_ptr) { glib_autoptr_clear_PangoTabArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoTabArray (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_tab_array_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoTabArray (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_tab_array_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoTabArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) pango_tab_array_free); }
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
#pragma GCC diagnostic pop
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"



# 29 "/usr/include/pango-1.0/pango/pango-layout.h" 2



typedef struct _PangoLayout PangoLayout;
typedef struct _PangoLayoutClass PangoLayoutClass;
typedef struct _PangoLayoutLine PangoLayoutLine;
# 44 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef PangoGlyphItem PangoLayoutRun;
# 61 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_ALIGN_LEFT,
  PANGO_ALIGN_CENTER,
  PANGO_ALIGN_RIGHT
} PangoAlignment;
# 82 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_WRAP_WORD,
  PANGO_WRAP_CHAR,
  PANGO_WRAP_WORD_CHAR
} PangoWrapMode;
# 102 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_ELLIPSIZE_NONE,
  PANGO_ELLIPSIZE_START,
  PANGO_ELLIPSIZE_MIDDLE,
  PANGO_ELLIPSIZE_END
} PangoEllipsizeMode;
# 126 "/usr/include/pango-1.0/pango/pango-layout.h"
struct _PangoLayoutLine
{
  PangoLayout *layout;
  gint start_index;
  gint length;
  GSList *runs;
  guint is_paragraph_start : 1;
  guint resolved_dir : 3;
};
# 147 "/usr/include/pango-1.0/pango/pango-layout.h"
extern
GType pango_layout_get_type (void) __attribute__ ((__const__));
extern
PangoLayout *pango_layout_new (PangoContext *context);
extern
PangoLayout *pango_layout_copy (PangoLayout *src);

extern
PangoContext *pango_layout_get_context (PangoLayout *layout);

extern
void pango_layout_set_attributes (PangoLayout *layout,
         PangoAttrList *attrs);
extern
PangoAttrList *pango_layout_get_attributes (PangoLayout *layout);

extern
void pango_layout_set_text (PangoLayout *layout,
         const char *text,
         int length);
extern
const char *pango_layout_get_text (PangoLayout *layout);

extern
gint pango_layout_get_character_count (PangoLayout *layout);

extern
void pango_layout_set_markup (PangoLayout *layout,
         const char *markup,
         int length);

extern
void pango_layout_set_markup_with_accel (PangoLayout *layout,
         const char *markup,
         int length,
         gunichar accel_marker,
         gunichar *accel_char);

extern
void pango_layout_set_font_description (PangoLayout *layout,
        const PangoFontDescription *desc);

extern
const PangoFontDescription *pango_layout_get_font_description (PangoLayout *layout);

extern
void pango_layout_set_width (PangoLayout *layout,
        int width);
extern
int pango_layout_get_width (PangoLayout *layout);
extern
void pango_layout_set_height (PangoLayout *layout,
        int height);
extern
int pango_layout_get_height (PangoLayout *layout);
extern
void pango_layout_set_wrap (PangoLayout *layout,
        PangoWrapMode wrap);
extern
PangoWrapMode pango_layout_get_wrap (PangoLayout *layout);
extern
gboolean pango_layout_is_wrapped (PangoLayout *layout);
extern
void pango_layout_set_indent (PangoLayout *layout,
        int indent);
extern
int pango_layout_get_indent (PangoLayout *layout);
extern
void pango_layout_set_spacing (PangoLayout *layout,
        int spacing);
extern
int pango_layout_get_spacing (PangoLayout *layout);
extern
void pango_layout_set_line_spacing (PangoLayout *layout,
                                                  float factor);
extern
float pango_layout_get_line_spacing (PangoLayout *layout);
extern
void pango_layout_set_justify (PangoLayout *layout,
                                                  gboolean justify);
extern
gboolean pango_layout_get_justify (PangoLayout *layout);
extern
void pango_layout_set_justify_last_line (PangoLayout *layout,
                                                   gboolean justify);
extern
gboolean pango_layout_get_justify_last_line (PangoLayout *layout);
extern
void pango_layout_set_auto_dir (PangoLayout *layout,
        gboolean auto_dir);
extern
gboolean pango_layout_get_auto_dir (PangoLayout *layout);
extern
void pango_layout_set_alignment (PangoLayout *layout,
        PangoAlignment alignment);
extern
PangoAlignment pango_layout_get_alignment (PangoLayout *layout);

extern
void pango_layout_set_tabs (PangoLayout *layout,
        PangoTabArray *tabs);
extern
PangoTabArray* pango_layout_get_tabs (PangoLayout *layout);

extern
void pango_layout_set_single_paragraph_mode (PangoLayout *layout,
             gboolean setting);
extern
gboolean pango_layout_get_single_paragraph_mode (PangoLayout *layout);

extern
void pango_layout_set_ellipsize (PangoLayout *layout,
            PangoEllipsizeMode ellipsize);
extern
PangoEllipsizeMode pango_layout_get_ellipsize (PangoLayout *layout);
extern
gboolean pango_layout_is_ellipsized (PangoLayout *layout);

extern
int pango_layout_get_unknown_glyphs_count (PangoLayout *layout);

extern
PangoDirection pango_layout_get_direction (PangoLayout *layout,
                                           int index);

extern
void pango_layout_context_changed (PangoLayout *layout);
extern
guint pango_layout_get_serial (PangoLayout *layout);

extern
void pango_layout_get_log_attrs (PangoLayout *layout,
         PangoLogAttr **attrs,
         gint *n_attrs);

extern
const PangoLogAttr *pango_layout_get_log_attrs_readonly (PangoLayout *layout,
        gint *n_attrs);

extern
void pango_layout_index_to_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *pos);
extern
void pango_layout_index_to_line_x (PangoLayout *layout,
         int index_,
         gboolean trailing,
         int *line,
         int *x_pos);
extern
void pango_layout_get_cursor_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *strong_pos,
         PangoRectangle *weak_pos);

extern
void pango_layout_get_caret_pos (PangoLayout *layout,
                                            int index_,
                                            PangoRectangle *strong_pos,
                                            PangoRectangle *weak_pos);

extern
void pango_layout_move_cursor_visually (PangoLayout *layout,
         gboolean strong,
         int old_index,
         int old_trailing,
         int direction,
         int *new_index,
         int *new_trailing);
extern
gboolean pango_layout_xy_to_index (PangoLayout *layout,
         int x,
         int y,
         int *index_,
         int *trailing);
extern
void pango_layout_get_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_get_pixel_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_get_size (PangoLayout *layout,
         int *width,
         int *height);
extern
void pango_layout_get_pixel_size (PangoLayout *layout,
         int *width,
         int *height);
extern
int pango_layout_get_baseline (PangoLayout *layout);

extern
int pango_layout_get_line_count (PangoLayout *layout);
extern
PangoLayoutLine *pango_layout_get_line (PangoLayout *layout,
          int line);
extern
PangoLayoutLine *pango_layout_get_line_readonly (PangoLayout *layout,
          int line);
extern
GSList * pango_layout_get_lines (PangoLayout *layout);
extern
GSList * pango_layout_get_lines_readonly (PangoLayout *layout);
# 366 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_LAYOUT_SERIALIZE_DEFAULT = 0,
  PANGO_LAYOUT_SERIALIZE_CONTEXT = 1 << 0,
  PANGO_LAYOUT_SERIALIZE_OUTPUT = 1 << 1,
} PangoLayoutSerializeFlags;

extern
GBytes * pango_layout_serialize (PangoLayout *layout,
                                                    PangoLayoutSerializeFlags flags);

extern
gboolean pango_layout_write_to_file (PangoLayout *layout,
                                                    PangoLayoutSerializeFlags flags,

                                                    const char *filename,
                                                    GError **error);
# 397 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_LAYOUT_DESERIALIZE_INVALID,
  PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE,
  PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE,
} PangoLayoutDeserializeError;

extern
GQuark pango_layout_deserialize_error_quark (void);
# 418 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_LAYOUT_DESERIALIZE_DEFAULT = 0,
  PANGO_LAYOUT_DESERIALIZE_CONTEXT = 1 << 0,
} PangoLayoutDeserializeFlags;

extern
PangoLayout * pango_layout_deserialize (PangoContext *context,
                                                    GBytes *bytes,
                                                    PangoLayoutDeserializeFlags flags,
                                                    GError **error);




extern
GType pango_layout_line_get_type (void) __attribute__ ((__const__));

extern
PangoLayoutLine *pango_layout_line_ref (PangoLayoutLine *line);
extern
void pango_layout_line_unref (PangoLayoutLine *line);

extern
int pango_layout_line_get_start_index (PangoLayoutLine *line);
extern
int pango_layout_line_get_length (PangoLayoutLine *line);
extern
gboolean pango_layout_line_is_paragraph_start (PangoLayoutLine *line);
extern
PangoDirection pango_layout_line_get_resolved_direction (PangoLayoutLine *line);

extern
gboolean pango_layout_line_x_to_index (PangoLayoutLine *line,
      int x_pos,
      int *index_,
      int *trailing);
extern
void pango_layout_line_index_to_x (PangoLayoutLine *line,
      int index_,
      gboolean trailing,
      int *x_pos);
extern
void pango_layout_line_get_x_ranges (PangoLayoutLine *line,
      int start_index,
      int end_index,
      int **ranges,
      int *n_ranges);
extern
void pango_layout_line_get_extents (PangoLayoutLine *line,
      PangoRectangle *ink_rect,
      PangoRectangle *logical_rect);
extern
void pango_layout_line_get_height (PangoLayoutLine *line,
      int *height);

extern
void pango_layout_line_get_pixel_extents (PangoLayoutLine *layout_line,
           PangoRectangle *ink_rect,
           PangoRectangle *logical_rect);

typedef struct _PangoLayoutIter PangoLayoutIter;



extern
GType pango_layout_iter_get_type (void) __attribute__ ((__const__));

extern
PangoLayoutIter *pango_layout_get_iter (PangoLayout *layout);
extern
PangoLayoutIter *pango_layout_iter_copy (PangoLayoutIter *iter);
extern
void pango_layout_iter_free (PangoLayoutIter *iter);

extern
int pango_layout_iter_get_index (PangoLayoutIter *iter);
extern
PangoLayoutRun *pango_layout_iter_get_run (PangoLayoutIter *iter);
extern
PangoLayoutRun *pango_layout_iter_get_run_readonly (PangoLayoutIter *iter);
extern
PangoLayoutLine *pango_layout_iter_get_line (PangoLayoutIter *iter);
extern
PangoLayoutLine *pango_layout_iter_get_line_readonly (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_at_last_line (PangoLayoutIter *iter);
extern
PangoLayout *pango_layout_iter_get_layout (PangoLayoutIter *iter);

extern
gboolean pango_layout_iter_next_char (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_next_cluster (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_next_run (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_next_line (PangoLayoutIter *iter);

extern
void pango_layout_iter_get_char_extents (PangoLayoutIter *iter,
         PangoRectangle *logical_rect);
extern
void pango_layout_iter_get_cluster_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_iter_get_run_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_iter_get_line_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);



extern
void pango_layout_iter_get_line_yrange (PangoLayoutIter *iter,
         int *y0_,
         int *y1_);
extern
void pango_layout_iter_get_layout_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
int pango_layout_iter_get_baseline (PangoLayoutIter *iter);
extern
int pango_layout_iter_get_run_baseline (PangoLayoutIter *iter);


typedef PangoLayout *PangoLayout_autoptr; typedef GList *PangoLayout_listautoptr; typedef GSList *PangoLayout_slistautoptr; typedef GQueue *PangoLayout_queueautoptr;
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma GCC diagnostic push
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"

# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoLayout (PangoLayout *_ptr) { if (_ptr) (g_object_unref) ((PangoLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoLayout (PangoLayout **_ptr) { glib_autoptr_clear_PangoLayout (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoLayout (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoLayout (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoLayout (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma GCC diagnostic pop
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"

typedef PangoLayoutIter *PangoLayoutIter_autoptr; typedef GList *PangoLayoutIter_listautoptr; typedef GSList *PangoLayoutIter_slistautoptr; typedef GQueue *PangoLayoutIter_queueautoptr;
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma GCC diagnostic push
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"

# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoLayoutIter (PangoLayoutIter *_ptr) { if (_ptr) (pango_layout_iter_free) ((PangoLayoutIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoLayoutIter (PangoLayoutIter **_ptr) { glib_autoptr_clear_PangoLayoutIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoLayoutIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_layout_iter_free); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoLayoutIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) pango_layout_iter_free); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoLayoutIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) pango_layout_iter_free); }
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma GCC diagnostic pop
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"



# 45 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-markup.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-markup.h"



extern
GMarkupParseContext * pango_markup_parser_new (gunichar accel_marker);

extern
gboolean pango_markup_parser_finish (GMarkupParseContext *context,
                                                  PangoAttrList **attr_list,
                                                  char **text,
                                                  gunichar *accel_char,
                                                  GError **error);

extern
gboolean pango_parse_markup (const char *markup_text,
                                                  int length,
                                                  gunichar accel_marker,
                                                  PangoAttrList **attr_list,
                                                  char **text,
                                                  gunichar *accel_char,
                                                  GError **error);



# 47 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-renderer.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-renderer.h"

# 35 "/usr/include/pango-1.0/pango/pango-renderer.h"
typedef struct _PangoRenderer PangoRenderer;
typedef struct _PangoRendererClass PangoRendererClass;
typedef struct _PangoRendererPrivate PangoRendererPrivate;
# 53 "/usr/include/pango-1.0/pango/pango-renderer.h"
typedef enum
{
  PANGO_RENDER_PART_FOREGROUND,
  PANGO_RENDER_PART_BACKGROUND,
  PANGO_RENDER_PART_UNDERLINE,
  PANGO_RENDER_PART_STRIKETHROUGH,
  PANGO_RENDER_PART_OVERLINE
} PangoRenderPart;
# 77 "/usr/include/pango-1.0/pango/pango-renderer.h"
struct _PangoRenderer
{

  GObject parent_instance;

  PangoUnderline underline;
  gboolean strikethrough;
  int active_count;


  PangoMatrix *matrix;


  PangoRendererPrivate *priv;
};
# 131 "/usr/include/pango-1.0/pango/pango-renderer.h"
struct _PangoRendererClass
{

  GObjectClass parent_class;




  void (*draw_glyphs) (PangoRenderer *renderer,
                                PangoFont *font,
                                PangoGlyphString *glyphs,
                                int x,
                                int y);
  void (*draw_rectangle) (PangoRenderer *renderer,
                                PangoRenderPart part,
                                int x,
                                int y,
                                int width,
                                int height);
  void (*draw_error_underline) (PangoRenderer *renderer,
                                int x,
                                int y,
                                int width,
                                int height);
  void (*draw_shape) (PangoRenderer *renderer,
                                PangoAttrShape *attr,
                                int x,
                                int y);

  void (*draw_trapezoid) (PangoRenderer *renderer,
                                PangoRenderPart part,
                                double y1_,
                                double x11,
                                double x21,
                                double y2,
                                double x12,
                                double x22);
  void (*draw_glyph) (PangoRenderer *renderer,
                                PangoFont *font,
                                PangoGlyph glyph,
                                double x,
                                double y);

  void (*part_changed) (PangoRenderer *renderer,
                                PangoRenderPart part);

  void (*begin) (PangoRenderer *renderer);
  void (*end) (PangoRenderer *renderer);

  void (*prepare_run) (PangoRenderer *renderer,
                                PangoLayoutRun *run);

  void (*draw_glyph_item) (PangoRenderer *renderer,
                                const char *text,
                                PangoGlyphItem *glyph_item,
                                int x,
                                int y);




  void (*_pango_reserved2) (void);
  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};

extern
GType pango_renderer_get_type (void) __attribute__ ((__const__));

extern
void pango_renderer_draw_layout (PangoRenderer *renderer,
                                          PangoLayout *layout,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_layout_line (PangoRenderer *renderer,
                                          PangoLayoutLine *line,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_glyphs (PangoRenderer *renderer,
                                          PangoFont *font,
                                          PangoGlyphString *glyphs,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_glyph_item (PangoRenderer *renderer,
                                          const char *text,
                                          PangoGlyphItem *glyph_item,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_rectangle (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          int x,
                                          int y,
                                          int width,
                                          int height);
extern
void pango_renderer_draw_error_underline (PangoRenderer *renderer,
                                          int x,
                                          int y,
                                          int width,
                                          int height);
extern
void pango_renderer_draw_trapezoid (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          double y1_,
                                          double x11,
                                          double x21,
                                          double y2,
                                          double x12,
                                          double x22);
extern
void pango_renderer_draw_glyph (PangoRenderer *renderer,
                                          PangoFont *font,
                                          PangoGlyph glyph,
                                          double x,
                                          double y);

extern
void pango_renderer_activate (PangoRenderer *renderer);
extern
void pango_renderer_deactivate (PangoRenderer *renderer);

extern
void pango_renderer_part_changed (PangoRenderer *renderer,
                                          PangoRenderPart part);

extern
void pango_renderer_set_color (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          const PangoColor *color);
extern
PangoColor *pango_renderer_get_color (PangoRenderer *renderer,
                                          PangoRenderPart part);

extern
void pango_renderer_set_alpha (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          guint16 alpha);
extern
guint16 pango_renderer_get_alpha (PangoRenderer *renderer,
                                          PangoRenderPart part);

extern
void pango_renderer_set_matrix (PangoRenderer *renderer,
                                                   const PangoMatrix *matrix);
extern
const PangoMatrix *pango_renderer_get_matrix (PangoRenderer *renderer);

extern
PangoLayout *pango_renderer_get_layout (PangoRenderer *renderer);
extern
PangoLayoutLine *pango_renderer_get_layout_line (PangoRenderer *renderer);


# 48 "/usr/include/pango-1.0/pango/pango.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-utils.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-utils.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4

# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 434 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                          __attribute__ ((__warn_unused_result__));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) __attribute__ ((__warn_unused_result__));






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}
# 127 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 892 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 3)));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 3)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt,
      __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt,
       __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}
# 248 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream)
    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 3)));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")


    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2))) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__s, 2 > 1);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && (((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __fgets_alias (__s, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (sz) / (sizeof (char)))))
    return __fgets_chk_warn (__s, sz, __n, __stream);
  return __fgets_chk (__s, sz, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__ptr, 0);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && (((long unsigned int) (__n)) <= (sz) / (__size))))
    return __fread_alias (__ptr, __size, __n, __stream);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && !(((long unsigned int) (__n)) <= (sz) / (__size))))
    return __fread_chk_warn (__ptr, sz, __size, __n, __stream);
  return __fread_chk (__ptr, sz, __size, __n, __stream);
}
# 327 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  size_t sz = __builtin_object_size (__ptr, 0);
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && (((long unsigned int) (__n)) <= (sz) / (__size))))
    {

      if (__builtin_constant_p (__size)
   && __builtin_constant_p (__n)
   && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
   && __size * __n <= 8)
 {
   size_t __cnt = __size * __n;
   char *__cptr = (char *) __ptr;
   if (__cnt == 0)
     return 0;

   for (; __cnt > 0; --__cnt)
     {
       int __c = getc_unlocked (__stream);
       if (__c == (-1))
  break;
       *__cptr++ = __c;
     }
   return (__cptr - (char *) __ptr) / __size;
 }

      return __fread_unlocked_alias (__ptr, __size, __n, __stream);
    }
  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (sz) / (__size))) && !(((long unsigned int) (__n)) <= (sz) / (__size))))
    return __fread_unlocked_chk_warn (__ptr, sz, __size, __n, __stream);
  return __fread_unlocked_chk (__ptr, sz, __size, __n, __stream);

}
# 895 "/usr/include/stdio.h" 2 3 4








# 26 "/usr/include/pango-1.0/pango/pango-utils.h" 2






# 31 "/usr/include/pango-1.0/pango/pango-utils.h"
__attribute__((__deprecated__)) extern
char ** pango_split_file_list (const char *str);

__attribute__((__deprecated__)) extern
char *pango_trim_string (const char *str);
__attribute__((__deprecated__)) extern
gint pango_read_line (FILE *stream,
          GString *str);
__attribute__((__deprecated__)) extern
gboolean pango_skip_space (const char **pos);
__attribute__((__deprecated__)) extern
gboolean pango_scan_word (const char **pos,
          GString *out);
__attribute__((__deprecated__)) extern
gboolean pango_scan_string (const char **pos,
          GString *out);
__attribute__((__deprecated__)) extern
gboolean pango_scan_int (const char **pos,
          int *out);

__attribute__((__deprecated__)) extern
gboolean pango_parse_enum (GType type,
          const char *str,
          int *value,
          gboolean warn,
          char **possible_values);
# 65 "/usr/include/pango-1.0/pango/pango-utils.h"
extern
gboolean pango_parse_style (const char *str,
         PangoStyle *style,
         gboolean warn);
extern
gboolean pango_parse_variant (const char *str,
         PangoVariant *variant,
         gboolean warn);
extern
gboolean pango_parse_weight (const char *str,
         PangoWeight *weight,
         gboolean warn);
extern
gboolean pango_parse_stretch (const char *str,
         PangoStretch *stretch,
         gboolean warn);




extern
void pango_quantize_line_geometry (int *thickness,
       int *position);



extern
guint8 * pango_log2vis_get_embedding_levels (const gchar *text,
          int length,
          PangoDirection *pbase_dir);




extern
gboolean pango_is_zero_width (gunichar ch) __attribute__ ((__const__));

extern
void pango_find_paragraph_boundary (const char *text,
                                        int length,
                                        int *paragraph_delimiter_index,
                                        int *next_paragraph_start);
# 172 "/usr/include/pango-1.0/pango/pango-utils.h"
extern
int pango_version (void) __attribute__ ((__const__));


extern
const char * pango_version_string (void) __attribute__ ((__const__));


extern
const char * pango_version_check (int required_major,
                                  int required_minor,
                                  int required_micro) __attribute__ ((__const__));


# 52 "/usr/include/pango-1.0/pango/pango.h" 2
# 38 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2
# 55 "/usr/include/gtk-2.0/gdk/gdktypes.h"
# 1 "/usr/lib/x86_64-linux-gnu/gtk-2.0/include/gdkconfig.h" 1
# 56 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2












typedef struct _GdkPoint GdkPoint;
typedef struct _GdkRectangle GdkRectangle;
typedef struct _GdkSegment GdkSegment;
typedef struct _GdkSpan GdkSpan;






typedef guint32 GdkWChar;

typedef struct _GdkAtom *GdkAtom;
# 97 "/usr/include/gtk-2.0/gdk/gdktypes.h"
typedef guint32 GdkNativeWindow;




typedef struct _GdkColor GdkColor;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkFont GdkFont;
typedef struct _GdkGC GdkGC;
typedef struct _GdkImage GdkImage;
typedef struct _GdkRegion GdkRegion;
typedef struct _GdkVisual GdkVisual;

typedef struct _GdkDrawable GdkDrawable;
typedef struct _GdkDrawable GdkBitmap;
typedef struct _GdkDrawable GdkPixmap;
typedef struct _GdkDrawable GdkWindow;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkScreen GdkScreen;

typedef enum
{
  GDK_LSB_FIRST,
  GDK_MSB_FIRST
} GdkByteOrder;



typedef enum
{
  GDK_SHIFT_MASK = 1 << 0,
  GDK_LOCK_MASK = 1 << 1,
  GDK_CONTROL_MASK = 1 << 2,
  GDK_MOD1_MASK = 1 << 3,
  GDK_MOD2_MASK = 1 << 4,
  GDK_MOD3_MASK = 1 << 5,
  GDK_MOD4_MASK = 1 << 6,
  GDK_MOD5_MASK = 1 << 7,
  GDK_BUTTON1_MASK = 1 << 8,
  GDK_BUTTON2_MASK = 1 << 9,
  GDK_BUTTON3_MASK = 1 << 10,
  GDK_BUTTON4_MASK = 1 << 11,
  GDK_BUTTON5_MASK = 1 << 12,





  GDK_SUPER_MASK = 1 << 26,
  GDK_HYPER_MASK = 1 << 27,
  GDK_META_MASK = 1 << 28,

  GDK_RELEASE_MASK = 1 << 30,

  GDK_MODIFIER_MASK = 0x5c001fff
} GdkModifierType;

typedef enum
{
  GDK_INPUT_READ = 1 << 0,
  GDK_INPUT_WRITE = 1 << 1,
  GDK_INPUT_EXCEPTION = 1 << 2
} GdkInputCondition;

typedef enum
{
  GDK_OK = 0,
  GDK_ERROR = -1,
  GDK_ERROR_PARAM = -2,
  GDK_ERROR_FILE = -3,
  GDK_ERROR_MEM = -4
} GdkStatus;





typedef enum
{
  GDK_GRAB_SUCCESS = 0,
  GDK_GRAB_ALREADY_GRABBED = 1,
  GDK_GRAB_INVALID_TIME = 2,
  GDK_GRAB_NOT_VIEWABLE = 3,
  GDK_GRAB_FROZEN = 4
} GdkGrabStatus;

typedef void (*GdkInputFunction) (gpointer data,
      gint source,
      GdkInputCondition condition);



typedef void (*GdkDestroyNotify) (gpointer data);



struct _GdkPoint
{
  gint x;
  gint y;
};

struct _GdkRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};

struct _GdkSegment
{
  gint x1;
  gint y1;
  gint x2;
  gint y2;
};

struct _GdkSpan
{
  gint x;
  gint y;
  gint width;
};


# 33 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkevents.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkevents.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkcolor.h"

# 46 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
struct _GdkColor
{
  guint32 pixel;
  guint16 red;
  guint16 green;
  guint16 blue;
};




typedef struct _GdkColormapClass GdkColormapClass;
# 68 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
struct _GdkColormap
{

  GObject parent_instance;


  gint size;
  GdkColor *colors;


  GdkVisual *visual;

  gpointer windowing_data;
};

struct _GdkColormapClass
{
  GObjectClass parent_class;

};

GType gdk_colormap_get_type (void) __attribute__ ((__const__));

GdkColormap* gdk_colormap_new (GdkVisual *visual,
       gboolean allocate);


GdkColormap* gdk_colormap_ref (GdkColormap *cmap);
void gdk_colormap_unref (GdkColormap *cmap);



GdkColormap* gdk_colormap_get_system (void);


GdkScreen *gdk_colormap_get_screen (GdkColormap *cmap);


gint gdk_colormap_get_system_size (void);




void gdk_colormap_change (GdkColormap *colormap,
     gint ncolors);


gint gdk_colormap_alloc_colors (GdkColormap *colormap,
       GdkColor *colors,
       gint n_colors,
       gboolean writeable,
       gboolean best_match,
       gboolean *success);
gboolean gdk_colormap_alloc_color (GdkColormap *colormap,
       GdkColor *color,
       gboolean writeable,
       gboolean best_match);
void gdk_colormap_free_colors (GdkColormap *colormap,
       const GdkColor *colors,
       gint n_colors);
void gdk_colormap_query_color (GdkColormap *colormap,
       gulong pixel,
       GdkColor *result);

GdkVisual *gdk_colormap_get_visual (GdkColormap *colormap);

GdkColor *gdk_color_copy (const GdkColor *color);
void gdk_color_free (GdkColor *color);
gboolean gdk_color_parse (const gchar *spec,
          GdkColor *color);
guint gdk_color_hash (const GdkColor *colora);
gboolean gdk_color_equal (const GdkColor *colora,
          const GdkColor *colorb);
gchar * gdk_color_to_string (const GdkColor *color);

GType gdk_color_get_type (void) __attribute__ ((__const__));



void gdk_colors_store (GdkColormap *colormap,
     GdkColor *colors,
     gint ncolors);
gint gdk_color_white (GdkColormap *colormap,
     GdkColor *color);
gint gdk_color_black (GdkColormap *colormap,
     GdkColor *color);
gint gdk_color_alloc (GdkColormap *colormap,
     GdkColor *color);
gint gdk_color_change (GdkColormap *colormap,
     GdkColor *color);




gint gdk_colors_alloc (GdkColormap *colormap,
     gboolean contiguous,
     gulong *planes,
     gint nplanes,
     gulong *pixels,
     gint npixels);
void gdk_colors_free (GdkColormap *colormap,
     gulong *pixels,
     gint npixels,
     gulong planes);



# 35 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkdnd.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkdnd.h"


typedef struct _GdkDragContext GdkDragContext;

typedef enum
{
  GDK_ACTION_DEFAULT = 1 << 0,
  GDK_ACTION_COPY = 1 << 1,
  GDK_ACTION_MOVE = 1 << 2,
  GDK_ACTION_LINK = 1 << 3,
  GDK_ACTION_PRIVATE = 1 << 4,
  GDK_ACTION_ASK = 1 << 5
} GdkDragAction;

typedef enum
{
  GDK_DRAG_PROTO_MOTIF,
  GDK_DRAG_PROTO_XDND,
  GDK_DRAG_PROTO_ROOTWIN,

  GDK_DRAG_PROTO_NONE,
  GDK_DRAG_PROTO_WIN32_DROPFILES,
  GDK_DRAG_PROTO_OLE2,
  GDK_DRAG_PROTO_LOCAL
} GdkDragProtocol;





typedef struct _GdkDragContextClass GdkDragContextClass;
# 75 "/usr/include/gtk-2.0/gdk/gdkdnd.h"
struct _GdkDragContext {
  GObject parent_instance;



  GdkDragProtocol protocol;

  gboolean is_source;

  GdkWindow *source_window;
  GdkWindow *dest_window;

  GList *targets;
  GdkDragAction actions;
  GdkDragAction suggested_action;
  GdkDragAction action;

  guint32 start_time;



  gpointer windowing_data;
};

struct _GdkDragContextClass {
  GObjectClass parent_class;

};



GType gdk_drag_context_get_type (void) __attribute__ ((__const__));

GdkDragContext * gdk_drag_context_new (void);


GList *gdk_drag_context_list_targets (GdkDragContext *context);
GdkDragAction gdk_drag_context_get_actions (GdkDragContext *context);
GdkDragAction gdk_drag_context_get_suggested_action (GdkDragContext *context);
GdkDragAction gdk_drag_context_get_selected_action (GdkDragContext *context);

GdkWindow *gdk_drag_context_get_source_window (GdkDragContext *context);
GdkWindow *gdk_drag_context_get_dest_window (GdkDragContext *context);
GdkDragProtocol gdk_drag_context_get_protocol (GdkDragContext *context);



void gdk_drag_context_ref (GdkDragContext *context);
void gdk_drag_context_unref (GdkDragContext *context);




void gdk_drag_status (GdkDragContext *context,
             GdkDragAction action,
      guint32 time_);
void gdk_drop_reply (GdkDragContext *context,
      gboolean ok,
      guint32 time_);
void gdk_drop_finish (GdkDragContext *context,
      gboolean success,
      guint32 time_);
GdkAtom gdk_drag_get_selection (GdkDragContext *context);



GdkDragContext * gdk_drag_begin (GdkWindow *window,
          GList *targets);

GdkNativeWindow gdk_drag_get_protocol_for_display (GdkDisplay *display,
         GdkNativeWindow xid,
         GdkDragProtocol *protocol);

void gdk_drag_find_window_for_screen (GdkDragContext *context,
        GdkWindow *drag_window,
        GdkScreen *screen,
        gint x_root,
        gint y_root,
        GdkWindow **dest_window,
        GdkDragProtocol *protocol);



GdkNativeWindow gdk_drag_get_protocol (GdkNativeWindow xid,
           GdkDragProtocol *protocol);

void gdk_drag_find_window (GdkDragContext *context,
          GdkWindow *drag_window,
          gint x_root,
          gint y_root,
          GdkWindow **dest_window,
          GdkDragProtocol *protocol);



gboolean gdk_drag_motion (GdkDragContext *context,
          GdkWindow *dest_window,
          GdkDragProtocol protocol,
          gint x_root,
          gint y_root,
          GdkDragAction suggested_action,
          GdkDragAction possible_actions,
          guint32 time_);
void gdk_drag_drop (GdkDragContext *context,
          guint32 time_);
void gdk_drag_abort (GdkDragContext *context,
          guint32 time_);
gboolean gdk_drag_drop_succeeded (GdkDragContext *context);


# 37 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkinput.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkinput.h"

# 45 "/usr/include/gtk-2.0/gdk/gdkinput.h"
typedef struct _GdkDeviceKey GdkDeviceKey;
typedef struct _GdkDeviceAxis GdkDeviceAxis;
typedef struct _GdkDevice GdkDevice;
typedef struct _GdkDeviceClass GdkDeviceClass;
typedef struct _GdkTimeCoord GdkTimeCoord;

typedef enum
{
  GDK_EXTENSION_EVENTS_NONE,
  GDK_EXTENSION_EVENTS_ALL,
  GDK_EXTENSION_EVENTS_CURSOR
} GdkExtensionMode;

typedef enum
{
  GDK_SOURCE_MOUSE,
  GDK_SOURCE_PEN,
  GDK_SOURCE_ERASER,
  GDK_SOURCE_CURSOR
} GdkInputSource;

typedef enum
{
  GDK_MODE_DISABLED,
  GDK_MODE_SCREEN,
  GDK_MODE_WINDOW
} GdkInputMode;

typedef enum
{
  GDK_AXIS_IGNORE,
  GDK_AXIS_X,
  GDK_AXIS_Y,
  GDK_AXIS_PRESSURE,
  GDK_AXIS_XTILT,
  GDK_AXIS_YTILT,
  GDK_AXIS_WHEEL,
  GDK_AXIS_LAST
} GdkAxisUse;

struct _GdkDeviceKey
{
  guint keyval;
  GdkModifierType modifiers;
};

struct _GdkDeviceAxis
{
  GdkAxisUse use;
  gdouble min;
  gdouble max;
};

struct _GdkDevice
{
  GObject parent_instance;


  gchar *name;
  GdkInputSource source;
  GdkInputMode mode;
  gboolean has_cursor;

  gint num_axes;
  GdkDeviceAxis *axes;

  gint num_keys;
  GdkDeviceKey *keys;
};






struct _GdkTimeCoord
{
  guint32 time;
  gdouble axes[128];
};

GType gdk_device_get_type (void) __attribute__ ((__const__));



GList * gdk_devices_list (void);


const gchar * gdk_device_get_name (GdkDevice *device);
GdkInputSource gdk_device_get_source (GdkDevice *device);
GdkInputMode gdk_device_get_mode (GdkDevice *device);
gboolean gdk_device_get_has_cursor (GdkDevice *device);

void gdk_device_get_key (GdkDevice *device,
                                                 guint index,
                                                 guint *keyval,
                                                 GdkModifierType *modifiers);
GdkAxisUse gdk_device_get_axis_use (GdkDevice *device,
                                                 guint index);
gint gdk_device_get_n_keys (GdkDevice *device);
gint gdk_device_get_n_axes (GdkDevice *device);


void gdk_device_set_source (GdkDevice *device,
      GdkInputSource source);

gboolean gdk_device_set_mode (GdkDevice *device,
      GdkInputMode mode);

void gdk_device_set_key (GdkDevice *device,
      guint index_,
      guint keyval,
      GdkModifierType modifiers);

void gdk_device_set_axis_use (GdkDevice *device,
      guint index_,
      GdkAxisUse use);

void gdk_device_get_state (GdkDevice *device,
      GdkWindow *window,
      gdouble *axes,
      GdkModifierType *mask);

gboolean gdk_device_get_history (GdkDevice *device,
      GdkWindow *window,
      guint32 start,
      guint32 stop,
      GdkTimeCoord ***events,
      gint *n_events);

void gdk_device_free_history (GdkTimeCoord **events,
      gint n_events);
gboolean gdk_device_get_axis (GdkDevice *device,
      gdouble *axes,
      GdkAxisUse use,
      gdouble *value);

void gdk_input_set_extension_events (GdkWindow *window,
         gint mask,
         GdkExtensionMode mode);


GdkDevice *gdk_device_get_core_pointer (void);



# 38 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2









typedef struct _GdkEventAny GdkEventAny;
typedef struct _GdkEventExpose GdkEventExpose;
typedef struct _GdkEventNoExpose GdkEventNoExpose;
typedef struct _GdkEventVisibility GdkEventVisibility;
typedef struct _GdkEventMotion GdkEventMotion;
typedef struct _GdkEventButton GdkEventButton;
typedef struct _GdkEventScroll GdkEventScroll;
typedef struct _GdkEventKey GdkEventKey;
typedef struct _GdkEventFocus GdkEventFocus;
typedef struct _GdkEventCrossing GdkEventCrossing;
typedef struct _GdkEventConfigure GdkEventConfigure;
typedef struct _GdkEventProperty GdkEventProperty;
typedef struct _GdkEventSelection GdkEventSelection;
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
typedef struct _GdkEventProximity GdkEventProximity;
typedef struct _GdkEventClient GdkEventClient;
typedef struct _GdkEventDND GdkEventDND;
typedef struct _GdkEventWindowState GdkEventWindowState;
typedef struct _GdkEventSetting GdkEventSetting;
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;

typedef union _GdkEvent GdkEvent;

typedef void (*GdkEventFunc) (GdkEvent *event,
         gpointer data);



typedef void GdkXEvent;



typedef enum {
  GDK_FILTER_CONTINUE,
  GDK_FILTER_TRANSLATE,


  GDK_FILTER_REMOVE
} GdkFilterReturn;

typedef GdkFilterReturn (*GdkFilterFunc) (GdkXEvent *xevent,
       GdkEvent *event,
       gpointer data);
# 115 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTHING = -1,
  GDK_DELETE = 0,
  GDK_DESTROY = 1,
  GDK_EXPOSE = 2,
  GDK_MOTION_NOTIFY = 3,
  GDK_BUTTON_PRESS = 4,
  GDK_2BUTTON_PRESS = 5,
  GDK_3BUTTON_PRESS = 6,
  GDK_BUTTON_RELEASE = 7,
  GDK_KEY_PRESS = 8,
  GDK_KEY_RELEASE = 9,
  GDK_ENTER_NOTIFY = 10,
  GDK_LEAVE_NOTIFY = 11,
  GDK_FOCUS_CHANGE = 12,
  GDK_CONFIGURE = 13,
  GDK_MAP = 14,
  GDK_UNMAP = 15,
  GDK_PROPERTY_NOTIFY = 16,
  GDK_SELECTION_CLEAR = 17,
  GDK_SELECTION_REQUEST = 18,
  GDK_SELECTION_NOTIFY = 19,
  GDK_PROXIMITY_IN = 20,
  GDK_PROXIMITY_OUT = 21,
  GDK_DRAG_ENTER = 22,
  GDK_DRAG_LEAVE = 23,
  GDK_DRAG_MOTION = 24,
  GDK_DRAG_STATUS = 25,
  GDK_DROP_START = 26,
  GDK_DROP_FINISHED = 27,
  GDK_CLIENT_EVENT = 28,
  GDK_VISIBILITY_NOTIFY = 29,
  GDK_NO_EXPOSE = 30,
  GDK_SCROLL = 31,
  GDK_WINDOW_STATE = 32,
  GDK_SETTING = 33,
  GDK_OWNER_CHANGE = 34,
  GDK_GRAB_BROKEN = 35,
  GDK_DAMAGE = 36,
  GDK_EVENT_LAST
} GdkEventType;




typedef enum
{
  GDK_EXPOSURE_MASK = 1 << 1,
  GDK_POINTER_MOTION_MASK = 1 << 2,
  GDK_POINTER_MOTION_HINT_MASK = 1 << 3,
  GDK_BUTTON_MOTION_MASK = 1 << 4,
  GDK_BUTTON1_MOTION_MASK = 1 << 5,
  GDK_BUTTON2_MOTION_MASK = 1 << 6,
  GDK_BUTTON3_MOTION_MASK = 1 << 7,
  GDK_BUTTON_PRESS_MASK = 1 << 8,
  GDK_BUTTON_RELEASE_MASK = 1 << 9,
  GDK_KEY_PRESS_MASK = 1 << 10,
  GDK_KEY_RELEASE_MASK = 1 << 11,
  GDK_ENTER_NOTIFY_MASK = 1 << 12,
  GDK_LEAVE_NOTIFY_MASK = 1 << 13,
  GDK_FOCUS_CHANGE_MASK = 1 << 14,
  GDK_STRUCTURE_MASK = 1 << 15,
  GDK_PROPERTY_CHANGE_MASK = 1 << 16,
  GDK_VISIBILITY_NOTIFY_MASK = 1 << 17,
  GDK_PROXIMITY_IN_MASK = 1 << 18,
  GDK_PROXIMITY_OUT_MASK = 1 << 19,
  GDK_SUBSTRUCTURE_MASK = 1 << 20,
  GDK_SCROLL_MASK = 1 << 21,
  GDK_ALL_EVENTS_MASK = 0x3FFFFE
} GdkEventMask;

typedef enum
{
  GDK_VISIBILITY_UNOBSCURED,
  GDK_VISIBILITY_PARTIAL,
  GDK_VISIBILITY_FULLY_OBSCURED
} GdkVisibilityState;

typedef enum
{
  GDK_SCROLL_UP,
  GDK_SCROLL_DOWN,
  GDK_SCROLL_LEFT,
  GDK_SCROLL_RIGHT
} GdkScrollDirection;
# 210 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTIFY_ANCESTOR = 0,
  GDK_NOTIFY_VIRTUAL = 1,
  GDK_NOTIFY_INFERIOR = 2,
  GDK_NOTIFY_NONLINEAR = 3,
  GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
  GDK_NOTIFY_UNKNOWN = 5
} GdkNotifyType;






typedef enum
{
  GDK_CROSSING_NORMAL,
  GDK_CROSSING_GRAB,
  GDK_CROSSING_UNGRAB,
  GDK_CROSSING_GTK_GRAB,
  GDK_CROSSING_GTK_UNGRAB,
  GDK_CROSSING_STATE_CHANGED
} GdkCrossingMode;

typedef enum
{
  GDK_PROPERTY_NEW_VALUE,
  GDK_PROPERTY_DELETE
} GdkPropertyState;

typedef enum
{
  GDK_WINDOW_STATE_WITHDRAWN = 1 << 0,
  GDK_WINDOW_STATE_ICONIFIED = 1 << 1,
  GDK_WINDOW_STATE_MAXIMIZED = 1 << 2,
  GDK_WINDOW_STATE_STICKY = 1 << 3,
  GDK_WINDOW_STATE_FULLSCREEN = 1 << 4,
  GDK_WINDOW_STATE_ABOVE = 1 << 5,
  GDK_WINDOW_STATE_BELOW = 1 << 6
} GdkWindowState;

typedef enum
{
  GDK_SETTING_ACTION_NEW,
  GDK_SETTING_ACTION_CHANGED,
  GDK_SETTING_ACTION_DELETED
} GdkSettingAction;

typedef enum
{
  GDK_OWNER_CHANGE_NEW_OWNER,
  GDK_OWNER_CHANGE_DESTROY,
  GDK_OWNER_CHANGE_CLOSE
} GdkOwnerChange;

struct _GdkEventAny
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};

struct _GdkEventExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkRectangle area;
  GdkRegion *region;
  gint count;
};

struct _GdkEventNoExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};

struct _GdkEventVisibility
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkVisibilityState state;
};

struct _GdkEventMotion
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  gint16 is_hint;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventButton
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  guint button;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventScroll
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  guint state;
  GdkScrollDirection direction;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventKey
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 hardware_keycode;
  guint8 group;
  guint is_modifier : 1;
};

struct _GdkEventCrossing
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *subwindow;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble x_root;
  gdouble y_root;
  GdkCrossingMode mode;
  GdkNotifyType detail;
  gboolean focus;
  guint state;
};

struct _GdkEventFocus
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint16 in;
};

struct _GdkEventConfigure
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint x, y;
  gint width;
  gint height;
};

struct _GdkEventProperty
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom atom;
  guint32 time;
  guint state;
};

struct _GdkEventSelection
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom selection;
  GdkAtom target;
  GdkAtom property;
  guint32 time;
  GdkNativeWindow requestor;
};

struct _GdkEventOwnerChange
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkNativeWindow owner;
  GdkOwnerChange reason;
  GdkAtom selection;
  guint32 time;
  guint32 selection_time;
};




struct _GdkEventProximity
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  GdkDevice *device;
};

struct _GdkEventClient
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom message_type;
  gushort data_format;
  union {
    char b[20];
    short s[10];
    long l[5];
  } data;
};

struct _GdkEventSetting
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkSettingAction action;
  char *name;
};

struct _GdkEventWindowState
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindowState changed_mask;
  GdkWindowState new_window_state;
};

struct _GdkEventGrabBroken {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gboolean keyboard;
  gboolean implicit;
  GdkWindow *grab_window;
};



struct _GdkEventDND {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkDragContext *context;

  guint32 time;
  gshort x_root, y_root;
};

union _GdkEvent
{
  GdkEventType type;
  GdkEventAny any;
  GdkEventExpose expose;
  GdkEventNoExpose no_expose;
  GdkEventVisibility visibility;
  GdkEventMotion motion;
  GdkEventButton button;
  GdkEventScroll scroll;
  GdkEventKey key;
  GdkEventCrossing crossing;
  GdkEventFocus focus_change;
  GdkEventConfigure configure;
  GdkEventProperty property;
  GdkEventSelection selection;
  GdkEventOwnerChange owner_change;
  GdkEventProximity proximity;
  GdkEventClient client;
  GdkEventDND dnd;
  GdkEventWindowState window_state;
  GdkEventSetting setting;
  GdkEventGrabBroken grab_broken;
};

GType gdk_event_get_type (void) __attribute__ ((__const__));

gboolean gdk_events_pending (void);
GdkEvent* gdk_event_get (void);

GdkEvent* gdk_event_peek (void);

GdkEvent* gdk_event_get_graphics_expose (GdkWindow *window);

void gdk_event_put (const GdkEvent *event);

GdkEvent* gdk_event_new (GdkEventType type);
GdkEvent* gdk_event_copy (const GdkEvent *event);
void gdk_event_free (GdkEvent *event);

guint32 gdk_event_get_time (const GdkEvent *event);
gboolean gdk_event_get_state (const GdkEvent *event,
                                         GdkModifierType *state);
gboolean gdk_event_get_coords (const GdkEvent *event,
      gdouble *x_win,
      gdouble *y_win);
gboolean gdk_event_get_root_coords (const GdkEvent *event,
      gdouble *x_root,
      gdouble *y_root);
gboolean gdk_event_get_axis (const GdkEvent *event,
                                         GdkAxisUse axis_use,
                                         gdouble *value);
void gdk_event_request_motions (const GdkEventMotion *event);
void gdk_event_handler_set (GdkEventFunc func,
      gpointer data,
      GDestroyNotify notify);

void gdk_event_set_screen (GdkEvent *event,
                                         GdkScreen *screen);
GdkScreen *gdk_event_get_screen (const GdkEvent *event);

void gdk_set_show_events (gboolean show_events);
gboolean gdk_get_show_events (void);


void gdk_add_client_message_filter (GdkAtom message_type,
        GdkFilterFunc func,
        gpointer data);

gboolean gdk_setting_get (const gchar *name,
     GValue *value);



# 33 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 2



typedef struct _GdkDisplayClass GdkDisplayClass;
typedef struct _GdkDisplayPointerHooks GdkDisplayPointerHooks;
# 47 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
typedef struct
{
  GdkWindow *window;
  GdkWindow *native_window;
  gulong serial;
  gboolean owner_events;
  guint32 time;
} GdkKeyboardGrabInfo;
# 63 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
typedef struct
{
  GdkWindow *toplevel_under_pointer;
  GdkWindow *window_under_pointer;
  gdouble toplevel_x, toplevel_y;
  guint32 state;
  guint32 button;
  gulong motion_hint_serial;
} GdkPointerWindowInfo;

struct _GdkDisplay
{
  GObject parent_instance;


  GList *queued_events;
  GList *queued_tail;




  guint32 button_click_time[2];
  GdkWindow *button_window[2];
  gint button_number[2];

  guint double_click_time;
  GdkDevice *core_pointer;

  const GdkDisplayPointerHooks *pointer_hooks;

  guint closed : 1;
  guint ignore_core_events : 1;

  guint double_click_distance;
  gint button_x[2];
  gint button_y[2];

  GList *pointer_grabs;
  GdkKeyboardGrabInfo keyboard_grab;
  GdkPointerWindowInfo pointer_info;


  guint32 last_event_time;
};

struct _GdkDisplayClass
{
  GObjectClass parent_class;

  const gchar * (*get_display_name) (GdkDisplay *display);
  gint (*get_n_screens) (GdkDisplay *display);
  GdkScreen * (*get_screen) (GdkDisplay *display,
          gint screen_num);
  GdkScreen * (*get_default_screen) (GdkDisplay *display);



  void (*closed) (GdkDisplay *display,
    gboolean is_error);
};

struct _GdkDisplayPointerHooks
{
  void (*get_pointer) (GdkDisplay *display,
        GdkScreen **screen,
        gint *x,
        gint *y,
        GdkModifierType *mask);
  GdkWindow* (*window_get_pointer) (GdkDisplay *display,
        GdkWindow *window,
        gint *x,
        gint *y,
        GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkDisplay *display,
        gint *win_x,
        gint *win_y);
};

GType gdk_display_get_type (void) __attribute__ ((__const__));
GdkDisplay *gdk_display_open (const gchar *display_name);

const gchar * gdk_display_get_name (GdkDisplay *display);

gint gdk_display_get_n_screens (GdkDisplay *display);
GdkScreen * gdk_display_get_screen (GdkDisplay *display,
         gint screen_num);
GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);
void gdk_display_pointer_ungrab (GdkDisplay *display,
         guint32 time_);
void gdk_display_keyboard_ungrab (GdkDisplay *display,
         guint32 time_);
gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);
void gdk_display_beep (GdkDisplay *display);
void gdk_display_sync (GdkDisplay *display);
void gdk_display_flush (GdkDisplay *display);

void gdk_display_close (GdkDisplay *display);
gboolean gdk_display_is_closed (GdkDisplay *display);

GList * gdk_display_list_devices (GdkDisplay *display);

GdkEvent* gdk_display_get_event (GdkDisplay *display);
GdkEvent* gdk_display_peek_event (GdkDisplay *display);
void gdk_display_put_event (GdkDisplay *display,
      const GdkEvent *event);

void gdk_display_add_client_message_filter (GdkDisplay *display,
         GdkAtom message_type,
         GdkFilterFunc func,
         gpointer data);

void gdk_display_set_double_click_time (GdkDisplay *display,
         guint msec);
void gdk_display_set_double_click_distance (GdkDisplay *display,
         guint distance);

GdkDisplay *gdk_display_get_default (void);

GdkDevice *gdk_display_get_core_pointer (GdkDisplay *display);

void gdk_display_get_pointer (GdkDisplay *display,
          GdkScreen **screen,
          gint *x,
          gint *y,
          GdkModifierType *mask);
GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display,
          gint *win_x,
          gint *win_y);
void gdk_display_warp_pointer (GdkDisplay *display,
          GdkScreen *screen,
          gint x,
          gint y);


GdkDisplayPointerHooks *gdk_display_set_pointer_hooks (GdkDisplay *display,
             const GdkDisplayPointerHooks *new_hooks);


GdkDisplay *gdk_display_open_default_libgtk_only (void);

gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);
gboolean gdk_display_supports_cursor_color (GdkDisplay *display);
guint gdk_display_get_default_cursor_size (GdkDisplay *display);
void gdk_display_get_maximal_cursor_size (GdkDisplay *display,
      guint *width,
      guint *height);

GdkWindow *gdk_display_get_default_group (GdkDisplay *display);

gboolean gdk_display_supports_selection_notification (GdkDisplay *display);
gboolean gdk_display_request_selection_notification (GdkDisplay *display,
            GdkAtom selection);

gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);
void gdk_display_store_clipboard (GdkDisplay *display,
           GdkWindow *clipboard_window,
           guint32 time_,
           const GdkAtom *targets,
           gint n_targets);

gboolean gdk_display_supports_shapes (GdkDisplay *display);
gboolean gdk_display_supports_input_shapes (GdkDisplay *display);
gboolean gdk_display_supports_composite (GdkDisplay *display);


# 34 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 2



typedef struct _GdkScreenClass GdkScreenClass;
# 46 "/usr/include/gtk-2.0/gdk/gdkscreen.h"
struct _GdkScreen
{
  GObject parent_instance;

  guint closed : 1;

  GdkGC *normal_gcs[32];
  GdkGC *exposure_gcs[32];
  GdkGC *subwindow_gcs[32];

  cairo_font_options_t *font_options;
  double resolution;
};

struct _GdkScreenClass
{
  GObjectClass parent_class;

  void (*size_changed) (GdkScreen *screen);
  void (*composited_changed) (GdkScreen *screen);
  void (*monitors_changed) (GdkScreen *screen);
};

GType gdk_screen_get_type (void) __attribute__ ((__const__));
GdkColormap *gdk_screen_get_default_colormap (GdkScreen *screen);
void gdk_screen_set_default_colormap (GdkScreen *screen,
            GdkColormap *colormap);
GdkColormap* gdk_screen_get_system_colormap (GdkScreen *screen);
GdkVisual* gdk_screen_get_system_visual (GdkScreen *screen);
GdkColormap *gdk_screen_get_rgb_colormap (GdkScreen *screen);
GdkVisual * gdk_screen_get_rgb_visual (GdkScreen *screen);
GdkColormap *gdk_screen_get_rgba_colormap (GdkScreen *screen);
GdkVisual * gdk_screen_get_rgba_visual (GdkScreen *screen);
gboolean gdk_screen_is_composited (GdkScreen *screen);

GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);
GdkDisplay * gdk_screen_get_display (GdkScreen *screen);
gint gdk_screen_get_number (GdkScreen *screen);
gint gdk_screen_get_width (GdkScreen *screen);
gint gdk_screen_get_height (GdkScreen *screen);
gint gdk_screen_get_width_mm (GdkScreen *screen);
gint gdk_screen_get_height_mm (GdkScreen *screen);

GList * gdk_screen_list_visuals (GdkScreen *screen);
GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);
gchar * gdk_screen_make_display_name (GdkScreen *screen);

gint gdk_screen_get_n_monitors (GdkScreen *screen);
gint gdk_screen_get_primary_monitor (GdkScreen *screen);
void gdk_screen_get_monitor_geometry (GdkScreen *screen,
      gint monitor_num,
      GdkRectangle *dest);
gint gdk_screen_get_monitor_at_point (GdkScreen *screen,
      gint x,
      gint y);
gint gdk_screen_get_monitor_at_window (GdkScreen *screen,
      GdkWindow *window);
gint gdk_screen_get_monitor_width_mm (GdkScreen *screen,
                                                gint monitor_num);
gint gdk_screen_get_monitor_height_mm (GdkScreen *screen,
                                                gint monitor_num);
gchar * gdk_screen_get_monitor_plug_name (GdkScreen *screen,
                                                gint monitor_num);

void gdk_screen_broadcast_client_message (GdkScreen *screen,
          GdkEvent *event);

GdkScreen *gdk_screen_get_default (void);

gboolean gdk_screen_get_setting (GdkScreen *screen,
       const gchar *name,
       GValue *value);

void gdk_screen_set_font_options (GdkScreen *screen,
        const cairo_font_options_t *options);
const cairo_font_options_t *gdk_screen_get_font_options (GdkScreen *screen);

void gdk_screen_set_resolution (GdkScreen *screen,
       gdouble dpi);
gdouble gdk_screen_get_resolution (GdkScreen *screen);

GdkWindow *gdk_screen_get_active_window (GdkScreen *screen);
GList *gdk_screen_get_window_stack (GdkScreen *screen);


# 32 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h" 2


# 42 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h"
typedef struct GdkAppLaunchContext GdkAppLaunchContext;
typedef struct GdkAppLaunchContextClass GdkAppLaunchContextClass;
typedef struct GdkAppLaunchContextPrivate GdkAppLaunchContextPrivate;

struct GdkAppLaunchContext
{
  GAppLaunchContext parent_instance;

  GdkAppLaunchContextPrivate *priv;
};

struct GdkAppLaunchContextClass
{
  GAppLaunchContextClass parent_class;
};

GType gdk_app_launch_context_get_type (void);

GdkAppLaunchContext *gdk_app_launch_context_new (void);
void gdk_app_launch_context_set_display (GdkAppLaunchContext *context,
          GdkDisplay *display);
void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context,
          GdkScreen *screen);
void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context,
          gint desktop);
void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context,
          guint32 timestamp);
void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context,
          GIcon *icon);
void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context,
          const char *icon_name);


# 33 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 1
# 28 "/usr/include/gtk-2.0/gdk/gdkcairo.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkrgb.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkrgb.h"


typedef struct _GdkRgbCmap GdkRgbCmap;

typedef enum
{
  GDK_RGB_DITHER_NONE,
  GDK_RGB_DITHER_NORMAL,
  GDK_RGB_DITHER_MAX
} GdkRgbDither;



struct _GdkRgbCmap {
  guint32 colors[256];
  gint n_colors;


  GSList *info_list;
};

void gdk_rgb_init (void);

gulong gdk_rgb_xpixel_from_rgb (guint32 rgb) __attribute__ ((__const__));
void gdk_rgb_gc_set_foreground (GdkGC *gc,
      guint32 rgb);
void gdk_rgb_gc_set_background (GdkGC *gc,
      guint32 rgb);


void gdk_rgb_find_color (GdkColormap *colormap,
      GdkColor *color);

void gdk_draw_rgb_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *rgb_buf,
          gint rowstride);
void gdk_draw_rgb_image_dithalign (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *rgb_buf,
          gint rowstride,
          gint xdith,
          gint ydith);
void gdk_draw_rgb_32_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride);
void gdk_draw_rgb_32_image_dithalign (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride,
          gint xdith,
          gint ydith);
void gdk_draw_gray_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride);
void gdk_draw_indexed_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride,
          GdkRgbCmap *cmap);
GdkRgbCmap *gdk_rgb_cmap_new (guint32 *colors,
          gint n_colors);
void gdk_rgb_cmap_free (GdkRgbCmap *cmap);

void gdk_rgb_set_verbose (gboolean verbose);


void gdk_rgb_set_install (gboolean install);
void gdk_rgb_set_min_colors (gint min_colors);


GdkColormap *gdk_rgb_get_colormap (void);
GdkVisual * gdk_rgb_get_visual (void);
gboolean gdk_rgb_ditherable (void);
gboolean gdk_rgb_colormap_ditherable (GdkColormap *cmap);




# 37 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 1
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 1
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-features.h" 1
# 110 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-features.h"
extern const guint gdk_pixbuf_major_version;
extern const guint gdk_pixbuf_minor_version;
extern const guint gdk_pixbuf_micro_version;
extern const char *gdk_pixbuf_version;
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 2
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2



# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 35 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 1
# 36 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 2


# 65 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef enum
{
        GDK_PIXBUF_ALPHA_BILEVEL,
        GDK_PIXBUF_ALPHA_FULL
} GdkPixbufAlphaMode;
# 83 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef enum {
 GDK_COLORSPACE_RGB
} GdkColorspace;



typedef struct _GdkPixbuf GdkPixbuf;
# 110 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);
# 139 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef enum {

        GDK_PIXBUF_ERROR_CORRUPT_IMAGE,

        GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,

        GDK_PIXBUF_ERROR_BAD_OPTION,

        GDK_PIXBUF_ERROR_UNKNOWN_TYPE,

        GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
        GDK_PIXBUF_ERROR_FAILED,
        GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION
} GdkPixbufError;

extern
GQuark gdk_pixbuf_error_quark (void);



extern
GType gdk_pixbuf_get_type (void) __attribute__ ((__const__));




__attribute__((__deprecated__("Use '" "g_object_ref" "' instead"))) extern
GdkPixbuf *gdk_pixbuf_ref (GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead"))) extern
void gdk_pixbuf_unref (GdkPixbuf *pixbuf);




extern
GdkColorspace gdk_pixbuf_get_colorspace (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_n_channels (const GdkPixbuf *pixbuf);
extern
gboolean gdk_pixbuf_get_has_alpha (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);
extern
guchar *gdk_pixbuf_get_pixels (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_width (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_height (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_rowstride (const GdkPixbuf *pixbuf);
extern
gsize gdk_pixbuf_get_byte_length (const GdkPixbuf *pixbuf);

extern
guchar *gdk_pixbuf_get_pixels_with_length (const GdkPixbuf *pixbuf,
                                                 guint *length);

extern
const guint8* gdk_pixbuf_read_pixels (const GdkPixbuf *pixbuf);
extern
GBytes * gdk_pixbuf_read_pixel_bytes (const GdkPixbuf *pixbuf);





extern
GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample,
      int width, int height);

extern
gint gdk_pixbuf_calculate_rowstride (GdkColorspace colorspace,
         gboolean has_alpha,
         int bits_per_sample,
         int width,
         int height);


extern
GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);


extern
GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf,
                                     int src_x,
                                     int src_y,
                                     int width,
                                     int height);
# 251 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
extern
GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename,
                                     GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_size (const char *filename,
          int width,
          int height,
          GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_scale (const char *filename,
           int width,
           int height,
           gboolean preserve_aspect_ratio,
           GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_resource (const char *resource_path,
      GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale (const char *resource_path,
        int width,
        int height,
        gboolean preserve_aspect_ratio,
        GError **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data,
         GdkColorspace colorspace,
         gboolean has_alpha,
         int bits_per_sample,
         int width, int height,
         int rowstride,
         GdkPixbufDestroyNotify destroy_fn,
         gpointer destroy_fn_data);

extern
GdkPixbuf *gdk_pixbuf_new_from_bytes (GBytes *data,
          GdkColorspace colorspace,
          gboolean has_alpha,
          int bits_per_sample,
          int width, int height,
          int rowstride);

extern
GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);


__attribute__((__deprecated__)) extern
GdkPixbuf* gdk_pixbuf_new_from_inline (gint data_length,
      const guint8 *data,
      gboolean copy_pixels,
      GError **error);



extern
void gdk_pixbuf_fill (GdkPixbuf *pixbuf,
                                         guint32 pixel);
# 318 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
extern
gboolean gdk_pixbuf_save (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    GError **error,
                                    ...) __attribute__((__sentinel__));

extern
gboolean gdk_pixbuf_savev (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    char **option_keys,
                                    char **option_values,
                                    GError **error);
# 367 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef gboolean (*GdkPixbufSaveFunc) (const gchar *buf,
      gsize count,
      GError **error,
      gpointer data);

extern
gboolean gdk_pixbuf_save_to_callback (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));

extern
gboolean gdk_pixbuf_save_to_callbackv (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);



extern
gboolean gdk_pixbuf_save_to_buffer (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));

extern
gboolean gdk_pixbuf_save_to_bufferv (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream (GInputStream *stream,
      GCancellable *cancellable,
                                         GError **error);

extern
void gdk_pixbuf_new_from_stream_async (GInputStream *stream,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream_finish (GAsyncResult *async_result,
           GError **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale (GInputStream *stream,
                                                  gint width,
                                                  gint height,
                                                  gboolean preserve_aspect_ratio,
        GCancellable *cancellable,
                                                  GError **error);

extern
void gdk_pixbuf_new_from_stream_at_scale_async (GInputStream *stream,
      gint width,
      gint height,
      gboolean preserve_aspect_ratio,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);

extern
gboolean gdk_pixbuf_save_to_stream (GdkPixbuf *pixbuf,
                                         GOutputStream *stream,
                                         const char *type,
      GCancellable *cancellable,
                                         GError **error,
                                         ...);

extern
void gdk_pixbuf_save_to_stream_async (GdkPixbuf *pixbuf,
          GOutputStream *stream,
          const gchar *type,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data,
          ...);

extern
gboolean gdk_pixbuf_save_to_stream_finish (GAsyncResult *async_result,
        GError **error);

extern
void gdk_pixbuf_save_to_streamv_async (GdkPixbuf *pixbuf,
                                       GOutputStream *stream,
                                       const gchar *type,
                                       gchar **option_keys,
                                       gchar **option_values,
                                       GCancellable *cancellable,
                                       GAsyncReadyCallback callback,
                                       gpointer user_data);

extern
gboolean gdk_pixbuf_save_to_streamv (GdkPixbuf *pixbuf,
                                     GOutputStream *stream,
                                     const char *type,
                                     char **option_keys,
                                     char **option_values,
                                     GCancellable *cancellable,
                                     GError **error);


extern
GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color,
     guchar r, guchar g, guchar b);


extern
void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf,
      int src_x, int src_y,
      int width, int height,
      GdkPixbuf *dest_pixbuf,
      int dest_x, int dest_y);


extern
void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src,
                                       GdkPixbuf *dest,
                                       gfloat saturation,
                                       gboolean pixelate);


extern
GdkPixbuf *gdk_pixbuf_apply_embedded_orientation (GdkPixbuf *src);


extern
gboolean gdk_pixbuf_set_option (GdkPixbuf *pixbuf,
                                 const gchar *key,
                                 const gchar *value);
extern
const gchar * gdk_pixbuf_get_option (GdkPixbuf *pixbuf,
                                              const gchar *key);
extern
gboolean gdk_pixbuf_remove_option (GdkPixbuf *pixbuf,
                                   const gchar *key);
extern
GHashTable * gdk_pixbuf_get_options (GdkPixbuf *pixbuf);
extern
gboolean gdk_pixbuf_copy_options (GdkPixbuf *src_pixbuf,
                                  GdkPixbuf *dest_pixbuf);



# 35 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h" 1
# 35 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h"

# 73 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h"
typedef enum {
 GDK_INTERP_NEAREST,
 GDK_INTERP_TILES,
 GDK_INTERP_BILINEAR,
 GDK_INTERP_HYPER
} GdkInterpType;
# 91 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h"
typedef enum {
 GDK_PIXBUF_ROTATE_NONE = 0,
 GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90,
 GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180,
 GDK_PIXBUF_ROTATE_CLOCKWISE = 270
} GdkPixbufRotation;

extern
void gdk_pixbuf_scale (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type);
extern
void gdk_pixbuf_composite (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha);
extern
void gdk_pixbuf_composite_color (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha,
     int check_x,
     int check_y,
     int check_size,
     guint32 color1,
     guint32 color2);

extern
GdkPixbuf *gdk_pixbuf_scale_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type);

extern
GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type,
           int overall_alpha,
           int check_size,
           guint32 color1,
           guint32 color2);

extern
GdkPixbuf *gdk_pixbuf_rotate_simple (const GdkPixbuf *src,
                  GdkPixbufRotation angle);
extern
GdkPixbuf *gdk_pixbuf_flip (const GdkPixbuf *src,
                  gboolean horizontal);


# 36 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 1
# 35 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"




typedef struct _GdkPixbufAnimation GdkPixbufAnimation;


typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
# 52 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
extern
GType gdk_pixbuf_animation_get_type (void) __attribute__ ((__const__));
# 62 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file (const char *filename,
                                                          GError **error);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream (GInputStream *stream,
                                                          GCancellable *cancellable,
                                                          GError **error);
extern
void gdk_pixbuf_animation_new_from_stream_async (GInputStream *stream,
                                                          GCancellable *cancellable,
                                                          GAsyncReadyCallback callback,
                                                          gpointer user_data);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish (GAsyncResult*async_result,
                                                          GError **error);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path,
                                                          GError **error);



__attribute__((__deprecated__("Use '" "g_object_ref" "' instead"))) extern
GdkPixbufAnimation *gdk_pixbuf_animation_ref (GdkPixbufAnimation *animation);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead"))) extern
void gdk_pixbuf_animation_unref (GdkPixbufAnimation *animation);


extern
int gdk_pixbuf_animation_get_width (GdkPixbufAnimation *animation);
extern
int gdk_pixbuf_animation_get_height (GdkPixbufAnimation *animation);
extern
gboolean gdk_pixbuf_animation_is_static_image (GdkPixbufAnimation *animation);
extern
GdkPixbuf *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);


# 98 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma GCC diagnostic push
# 98 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

# 98 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

extern
GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter (GdkPixbufAnimation *animation,
                                                                              const GTimeVal *start_time);

# 102 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma GCC diagnostic pop
# 102 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"


extern
GType gdk_pixbuf_animation_iter_get_type (void) __attribute__ ((__const__));
extern
int gdk_pixbuf_animation_iter_get_delay_time (GdkPixbufAnimationIter *iter);
extern
GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf (GdkPixbufAnimationIter *iter);
extern
gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);

# 112 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma GCC diagnostic push
# 112 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

# 112 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 112 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

extern
gboolean gdk_pixbuf_animation_iter_advance (GdkPixbufAnimationIter *iter,
                                                                              const GTimeVal *current_time);

# 116 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma GCC diagnostic pop
# 116 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

# 219 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

# 37 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h" 1
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h"







typedef struct _GdkPixbufSimpleAnim GdkPixbufSimpleAnim;
typedef struct _GdkPixbufSimpleAnimClass GdkPixbufSimpleAnimClass;
# 49 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h"
extern
GType gdk_pixbuf_simple_anim_get_type (void) __attribute__ ((__const__));
extern
GType gdk_pixbuf_simple_anim_iter_get_type (void) __attribute__ ((__const__));

extern
GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new (gint width,
                                                           gint height,
                                                           gfloat rate);
extern
void gdk_pixbuf_simple_anim_add_frame (GdkPixbufSimpleAnim *animation,
                                                           GdkPixbuf *pixbuf);
extern
void gdk_pixbuf_simple_anim_set_loop (GdkPixbufSimpleAnim *animation,
                                                           gboolean loop);
extern
gboolean gdk_pixbuf_simple_anim_get_loop (GdkPixbufSimpleAnim *animation);


# 38 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h" 1
# 40 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h"


typedef struct _GdkPixbufFormat GdkPixbufFormat;

extern
gboolean gdk_pixbuf_init_modules (const char *path,
                                  GError **error);

extern
GType gdk_pixbuf_format_get_type (void) __attribute__ ((__const__));

extern
GSList *gdk_pixbuf_get_formats (void);
extern
gchar *gdk_pixbuf_format_get_name (GdkPixbufFormat *format);
extern
gchar *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);
extern
gchar **gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format);
extern
gchar **gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format);
extern
gboolean gdk_pixbuf_format_is_save_option_supported (GdkPixbufFormat *format,
                                                       const gchar *option_key);
extern
gboolean gdk_pixbuf_format_is_writable (GdkPixbufFormat *format);
extern
gboolean gdk_pixbuf_format_is_scalable (GdkPixbufFormat *format);
extern
gboolean gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format);
extern
void gdk_pixbuf_format_set_disabled (GdkPixbufFormat *format,
           gboolean disabled);
extern
gchar *gdk_pixbuf_format_get_license (GdkPixbufFormat *format);

extern
GdkPixbufFormat *gdk_pixbuf_get_file_info (const gchar *filename,
           gint *width,
           gint *height);
extern
void gdk_pixbuf_get_file_info_async (const gchar *filename,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GdkPixbufFormat *gdk_pixbuf_get_file_info_finish (GAsyncResult *async_result,
        gint *width,
        gint *height,
        GError **error);

extern
GdkPixbufFormat *gdk_pixbuf_format_copy (const GdkPixbufFormat *format);
extern
void gdk_pixbuf_format_free (GdkPixbufFormat *format);
# 479 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h"

# 39 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 1
# 37 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"

# 46 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"
typedef struct _GdkPixbufLoader GdkPixbufLoader;
struct _GdkPixbufLoader
{

  GObject parent_instance;

  gpointer priv;
};

typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass
{
  GObjectClass parent_class;

  void (*size_prepared) (GdkPixbufLoader *loader,
         int width,
         int height);

  void (*area_prepared) (GdkPixbufLoader *loader);


  void (*area_updated) (GdkPixbufLoader *loader,
                              int x,
                              int y,
         int width,
         int height);

  void (*closed) (GdkPixbufLoader *loader);
};

extern
GType gdk_pixbuf_loader_get_type (void) __attribute__ ((__const__));
extern
GdkPixbufLoader * gdk_pixbuf_loader_new (void);
extern
GdkPixbufLoader * gdk_pixbuf_loader_new_with_type (const char *image_type,
                                                      GError **error);
extern
GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type (const char *mime_type,
          GError **error);
extern
void gdk_pixbuf_loader_set_size (GdkPixbufLoader *loader,
                                                 int width,
       int height);
extern
gboolean gdk_pixbuf_loader_write (GdkPixbufLoader *loader,
            const guchar *buf,
            gsize count,
                                                      GError **error);
extern
gboolean gdk_pixbuf_loader_write_bytes (GdkPixbufLoader *loader,
                                                      GBytes *buffer,
                                                      GError **error);
extern
GdkPixbuf * gdk_pixbuf_loader_get_pixbuf (GdkPixbufLoader *loader);
extern
GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);
extern
gboolean gdk_pixbuf_loader_close (GdkPixbufLoader *loader,
                                                      GError **error);
extern
GdkPixbufFormat *gdk_pixbuf_loader_get_format (GdkPixbufLoader *loader);


# 40 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h" 1
# 13 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 1
# 14 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h" 2




extern
GType gdk_pixbuf_alpha_mode_get_type (void) __attribute__ ((__const__));

extern
GType gdk_colorspace_get_type (void) __attribute__ ((__const__));

extern
GType gdk_pixbuf_error_get_type (void) __attribute__ ((__const__));



extern
GType gdk_interp_type_get_type (void) __attribute__ ((__const__));

extern
GType gdk_pixbuf_rotation_get_type (void) __attribute__ ((__const__));


# 41 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2

# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h" 1
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
typedef GdkPixbuf *GdkPixbuf_autoptr; typedef GList *GdkPixbuf_listautoptr; typedef GSList *GdkPixbuf_slistautoptr; typedef GQueue *GdkPixbuf_queueautoptr;
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic push
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbuf (GdkPixbuf *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbuf (GdkPixbuf **_ptr) { glib_autoptr_clear_GdkPixbuf (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbuf (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbuf (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbuf (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic pop
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

typedef GdkPixbufAnimation *GdkPixbufAnimation_autoptr; typedef GList *GdkPixbufAnimation_listautoptr; typedef GSList *GdkPixbufAnimation_slistautoptr; typedef GQueue *GdkPixbufAnimation_queueautoptr;
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic push
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufAnimation (GdkPixbufAnimation *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufAnimation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufAnimation (GdkPixbufAnimation **_ptr) { glib_autoptr_clear_GdkPixbufAnimation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufAnimation (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufAnimation (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufAnimation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic pop
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

typedef GdkPixbufAnimationIter *GdkPixbufAnimationIter_autoptr; typedef GList *GdkPixbufAnimationIter_listautoptr; typedef GSList *GdkPixbufAnimationIter_slistautoptr; typedef GQueue *GdkPixbufAnimationIter_queueautoptr;
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic push
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufAnimationIter (GdkPixbufAnimationIter *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufAnimationIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufAnimationIter (GdkPixbufAnimationIter **_ptr) { glib_autoptr_clear_GdkPixbufAnimationIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufAnimationIter (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufAnimationIter (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufAnimationIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic pop
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

typedef GdkPixbufLoader *GdkPixbufLoader_autoptr; typedef GList *GdkPixbufLoader_listautoptr; typedef GSList *GdkPixbufLoader_slistautoptr; typedef GQueue *GdkPixbufLoader_queueautoptr;
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic push
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufLoader (GdkPixbufLoader *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufLoader *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufLoader (GdkPixbufLoader **_ptr) { glib_autoptr_clear_GdkPixbufLoader (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufLoader (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufLoader (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufLoader (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic pop
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

typedef GdkPixbufSimpleAnim *GdkPixbufSimpleAnim_autoptr; typedef GList *GdkPixbufSimpleAnim_listautoptr; typedef GSList *GdkPixbufSimpleAnim_slistautoptr; typedef GQueue *GdkPixbufSimpleAnim_queueautoptr;
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic push
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufSimpleAnim (GdkPixbufSimpleAnim *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufSimpleAnim *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufSimpleAnim (GdkPixbufSimpleAnim **_ptr) { glib_autoptr_clear_GdkPixbufSimpleAnim (*_ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufSimpleAnim (GList **_l) { g_list_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufSimpleAnim (GSList **_l) { g_slist_free_full (*_l, (GDestroyNotify) (void(*)(void)) g_object_unref); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufSimpleAnim (GQueue **_q) { if (*_q) g_queue_free_full (*_q, (GDestroyNotify) (void(*)(void)) g_object_unref); }
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma GCC diagnostic pop
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"

# 43 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 38 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 2





void gdk_pixbuf_render_threshold_alpha (GdkPixbuf *pixbuf,
       GdkBitmap *bitmap,
       int src_x,
       int src_y,
       int dest_x,
       int dest_y,
       int width,
       int height,
       int alpha_threshold);

void gdk_pixbuf_render_to_drawable (GdkPixbuf *pixbuf,
       GdkDrawable *drawable,
       GdkGC *gc,
       int src_x,
       int src_y,
       int dest_x,
       int dest_y,
       int width,
       int height,
       GdkRgbDither dither,
       int x_dither,
       int y_dither);
void gdk_pixbuf_render_to_drawable_alpha (GdkPixbuf *pixbuf,
       GdkDrawable *drawable,
       int src_x,
       int src_y,
       int dest_x,
       int dest_y,
       int width,
       int height,
       GdkPixbufAlphaMode alpha_mode,
       int alpha_threshold,
       GdkRgbDither dither,
       int x_dither,
       int y_dither);

void gdk_pixbuf_render_pixmap_and_mask_for_colormap (GdkPixbuf *pixbuf,
           GdkColormap *colormap,
           GdkPixmap **pixmap_return,
           GdkBitmap **mask_return,
           int alpha_threshold);

void gdk_pixbuf_render_pixmap_and_mask (GdkPixbuf *pixbuf,
           GdkPixmap **pixmap_return,
           GdkBitmap **mask_return,
           int alpha_threshold);




GdkPixbuf *gdk_pixbuf_get_from_drawable (GdkPixbuf *dest,
      GdkDrawable *src,
      GdkColormap *cmap,
      int src_x,
      int src_y,
      int dest_x,
      int dest_y,
      int width,
      int height);

GdkPixbuf *gdk_pixbuf_get_from_image (GdkPixbuf *dest,
                                         GdkImage *src,
                                         GdkColormap *cmap,
                                         int src_x,
                                         int src_y,
                                         int dest_x,
                                         int dest_y,
                                         int width,
                                         int height);


# 29 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 2
# 1 "/usr/include/pango-1.0/pango/pangocairo.h" 1
# 28 "/usr/include/pango-1.0/pango/pangocairo.h"

# 41 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef struct _PangoCairoFont PangoCairoFont;
# 68 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef struct _PangoCairoFontMap PangoCairoFontMap;
# 94 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef void (* PangoCairoShapeRendererFunc) (cairo_t *cr,
           PangoAttrShape *attr,
           gboolean do_path,
           gpointer data);




extern
GType pango_cairo_font_map_get_type (void) __attribute__ ((__const__));

extern
PangoFontMap *pango_cairo_font_map_new (void);
extern
PangoFontMap *pango_cairo_font_map_new_for_font_type (cairo_font_type_t fonttype);
extern
PangoFontMap *pango_cairo_font_map_get_default (void);
extern
void pango_cairo_font_map_set_default (PangoCairoFontMap *fontmap);
extern
cairo_font_type_t pango_cairo_font_map_get_font_type (PangoCairoFontMap *fontmap);

extern
void pango_cairo_font_map_set_resolution (PangoCairoFontMap *fontmap,
         double dpi);
extern
double pango_cairo_font_map_get_resolution (PangoCairoFontMap *fontmap);

__attribute__((__deprecated__("Use '" "pango_font_map_create_context" "' instead"))) extern
PangoContext *pango_cairo_font_map_create_context (PangoCairoFontMap *fontmap);





extern
GType pango_cairo_font_get_type (void) __attribute__ ((__const__));

extern
cairo_scaled_font_t *pango_cairo_font_get_scaled_font (PangoCairoFont *font);



extern
void pango_cairo_update_context (cairo_t *cr,
      PangoContext *context);

extern
void pango_cairo_context_set_font_options (PangoContext *context,
          const cairo_font_options_t *options);
extern
const cairo_font_options_t *pango_cairo_context_get_font_options (PangoContext *context);

extern
void pango_cairo_context_set_resolution (PangoContext *context,
          double dpi);
extern
double pango_cairo_context_get_resolution (PangoContext *context);

extern
void pango_cairo_context_set_shape_renderer (PangoContext *context,
            PangoCairoShapeRendererFunc func,
            gpointer data,
            GDestroyNotify dnotify);
extern
PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer (PangoContext *context,
            gpointer *data);



extern
PangoContext *pango_cairo_create_context (cairo_t *cr);
extern
PangoLayout *pango_cairo_create_layout (cairo_t *cr);
extern
void pango_cairo_update_layout (cairo_t *cr,
     PangoLayout *layout);




extern
void pango_cairo_show_glyph_string (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
extern
void pango_cairo_show_glyph_item (cairo_t *cr,
        const char *text,
        PangoGlyphItem *glyph_item);
extern
void pango_cairo_show_layout_line (cairo_t *cr,
        PangoLayoutLine *line);
extern
void pango_cairo_show_layout (cairo_t *cr,
        PangoLayout *layout);

extern
void pango_cairo_show_error_underline (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);




extern
void pango_cairo_glyph_string_path (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
extern
void pango_cairo_layout_line_path (cairo_t *cr,
        PangoLayoutLine *line);
extern
void pango_cairo_layout_path (cairo_t *cr,
        PangoLayout *layout);

extern
void pango_cairo_error_underline_path (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);


# 30 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 2



cairo_t *gdk_cairo_create (GdkDrawable *drawable);
void gdk_cairo_reset_clip (cairo_t *cr,
          GdkDrawable *drawable);

void gdk_cairo_set_source_color (cairo_t *cr,
                                      const GdkColor *color);
void gdk_cairo_set_source_pixbuf (cairo_t *cr,
                                      const GdkPixbuf *pixbuf,
                                      double pixbuf_x,
                                      double pixbuf_y);
void gdk_cairo_set_source_pixmap (cairo_t *cr,
                                      GdkPixmap *pixmap,
                                      double pixmap_x,
                                      double pixmap_y);
void gdk_cairo_set_source_window (cairo_t *cr,
                                      GdkWindow *window,
                                      double x,
                                      double y);

void gdk_cairo_rectangle (cairo_t *cr,
                                      const GdkRectangle *rectangle);
void gdk_cairo_region (cairo_t *cr,
                                      const GdkRegion *region);


# 34 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkcursor.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkcursor.h"






typedef enum
{
  GDK_X_CURSOR = 0,
  GDK_ARROW = 2,
  GDK_BASED_ARROW_DOWN = 4,
  GDK_BASED_ARROW_UP = 6,
  GDK_BOAT = 8,
  GDK_BOGOSITY = 10,
  GDK_BOTTOM_LEFT_CORNER = 12,
  GDK_BOTTOM_RIGHT_CORNER = 14,
  GDK_BOTTOM_SIDE = 16,
  GDK_BOTTOM_TEE = 18,
  GDK_BOX_SPIRAL = 20,
  GDK_CENTER_PTR = 22,
  GDK_CIRCLE = 24,
  GDK_CLOCK = 26,
  GDK_COFFEE_MUG = 28,
  GDK_CROSS = 30,
  GDK_CROSS_REVERSE = 32,
  GDK_CROSSHAIR = 34,
  GDK_DIAMOND_CROSS = 36,
  GDK_DOT = 38,
  GDK_DOTBOX = 40,
  GDK_DOUBLE_ARROW = 42,
  GDK_DRAFT_LARGE = 44,
  GDK_DRAFT_SMALL = 46,
  GDK_DRAPED_BOX = 48,
  GDK_EXCHANGE = 50,
  GDK_FLEUR = 52,
  GDK_GOBBLER = 54,
  GDK_GUMBY = 56,
  GDK_HAND1 = 58,
  GDK_HAND2 = 60,
  GDK_HEART = 62,
  GDK_ICON = 64,
  GDK_IRON_CROSS = 66,
  GDK_LEFT_PTR = 68,
  GDK_LEFT_SIDE = 70,
  GDK_LEFT_TEE = 72,
  GDK_LEFTBUTTON = 74,
  GDK_LL_ANGLE = 76,
  GDK_LR_ANGLE = 78,
  GDK_MAN = 80,
  GDK_MIDDLEBUTTON = 82,
  GDK_MOUSE = 84,
  GDK_PENCIL = 86,
  GDK_PIRATE = 88,
  GDK_PLUS = 90,
  GDK_QUESTION_ARROW = 92,
  GDK_RIGHT_PTR = 94,
  GDK_RIGHT_SIDE = 96,
  GDK_RIGHT_TEE = 98,
  GDK_RIGHTBUTTON = 100,
  GDK_RTL_LOGO = 102,
  GDK_SAILBOAT = 104,
  GDK_SB_DOWN_ARROW = 106,
  GDK_SB_H_DOUBLE_ARROW = 108,
  GDK_SB_LEFT_ARROW = 110,
  GDK_SB_RIGHT_ARROW = 112,
  GDK_SB_UP_ARROW = 114,
  GDK_SB_V_DOUBLE_ARROW = 116,
  GDK_SHUTTLE = 118,
  GDK_SIZING = 120,
  GDK_SPIDER = 122,
  GDK_SPRAYCAN = 124,
  GDK_STAR = 126,
  GDK_TARGET = 128,
  GDK_TCROSS = 130,
  GDK_TOP_LEFT_ARROW = 132,
  GDK_TOP_LEFT_CORNER = 134,
  GDK_TOP_RIGHT_CORNER = 136,
  GDK_TOP_SIDE = 138,
  GDK_TOP_TEE = 140,
  GDK_TREK = 142,
  GDK_UL_ANGLE = 144,
  GDK_UMBRELLA = 146,
  GDK_UR_ANGLE = 148,
  GDK_WATCH = 150,
  GDK_XTERM = 152,
  GDK_LAST_CURSOR,
  GDK_BLANK_CURSOR = -2,
  GDK_CURSOR_IS_PIXMAP = -1
} GdkCursorType;

struct _GdkCursor
{
  GdkCursorType type;

  guint ref_count;
};




GType gdk_cursor_get_type (void) __attribute__ ((__const__));

GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display,
       GdkCursorType cursor_type);

GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);

GdkCursor* gdk_cursor_new_from_pixmap (GdkPixmap *source,
       GdkPixmap *mask,
       const GdkColor *fg,
       const GdkColor *bg,
       gint x,
       gint y);
GdkCursor* gdk_cursor_new_from_pixbuf (GdkDisplay *display,
       GdkPixbuf *pixbuf,
       gint x,
       gint y);
GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);
GdkCursor* gdk_cursor_ref (GdkCursor *cursor);
void gdk_cursor_unref (GdkCursor *cursor);
GdkCursor* gdk_cursor_new_from_name (GdkDisplay *display,
       const gchar *name);
GdkPixbuf* gdk_cursor_get_image (GdkCursor *cursor);
GdkCursorType gdk_cursor_get_cursor_type (GdkCursor *cursor);






# 36 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h"


typedef struct _GdkDisplayManager GdkDisplayManager;
typedef struct _GdkDisplayManagerClass GdkDisplayManagerClass;
# 49 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h"
struct _GdkDisplayManagerClass
{
  GObjectClass parent_class;

  void (*display_opened) (GdkDisplayManager *display_manager,
     GdkDisplay *display);
};

GType gdk_display_manager_get_type (void) __attribute__ ((__const__));

GdkDisplayManager *gdk_display_manager_get (void);
GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *display_manager);
void gdk_display_manager_set_default_display (GdkDisplayManager *display_manager,
           GdkDisplay *display);
GSList * gdk_display_manager_list_displays (GdkDisplayManager *display_manager);


# 38 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkdrawable.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkgc.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkgc.h"


typedef struct _GdkGCValues GdkGCValues;
typedef struct _GdkGCClass GdkGCClass;







typedef enum
{
  GDK_CAP_NOT_LAST,
  GDK_CAP_BUTT,
  GDK_CAP_ROUND,
  GDK_CAP_PROJECTING
} GdkCapStyle;







typedef enum
{
  GDK_SOLID,
  GDK_TILED,
  GDK_STIPPLED,
  GDK_OPAQUE_STIPPLED
} GdkFill;
# 88 "/usr/include/gtk-2.0/gdk/gdkgc.h"
typedef enum
{
  GDK_COPY,
  GDK_INVERT,
  GDK_XOR,
  GDK_CLEAR,
  GDK_AND,
  GDK_AND_REVERSE,
  GDK_AND_INVERT,
  GDK_NOOP,
  GDK_OR,
  GDK_EQUIV,
  GDK_OR_REVERSE,
  GDK_COPY_INVERT,
  GDK_OR_INVERT,
  GDK_NAND,
  GDK_NOR,
  GDK_SET
} GdkFunction;






typedef enum
{
  GDK_JOIN_MITER,
  GDK_JOIN_ROUND,
  GDK_JOIN_BEVEL
} GdkJoinStyle;






typedef enum
{
  GDK_LINE_SOLID,
  GDK_LINE_ON_OFF_DASH,
  GDK_LINE_DOUBLE_DASH
} GdkLineStyle;

typedef enum
{
  GDK_CLIP_BY_CHILDREN = 0,
  GDK_INCLUDE_INFERIORS = 1
} GdkSubwindowMode;

typedef enum
{
  GDK_GC_FOREGROUND = 1 << 0,
  GDK_GC_BACKGROUND = 1 << 1,
  GDK_GC_FONT = 1 << 2,
  GDK_GC_FUNCTION = 1 << 3,
  GDK_GC_FILL = 1 << 4,
  GDK_GC_TILE = 1 << 5,
  GDK_GC_STIPPLE = 1 << 6,
  GDK_GC_CLIP_MASK = 1 << 7,
  GDK_GC_SUBWINDOW = 1 << 8,
  GDK_GC_TS_X_ORIGIN = 1 << 9,
  GDK_GC_TS_Y_ORIGIN = 1 << 10,
  GDK_GC_CLIP_X_ORIGIN = 1 << 11,
  GDK_GC_CLIP_Y_ORIGIN = 1 << 12,
  GDK_GC_EXPOSURES = 1 << 13,
  GDK_GC_LINE_WIDTH = 1 << 14,
  GDK_GC_LINE_STYLE = 1 << 15,
  GDK_GC_CAP_STYLE = 1 << 16,
  GDK_GC_JOIN_STYLE = 1 << 17
} GdkGCValuesMask;

struct _GdkGCValues
{
  GdkColor foreground;
  GdkColor background;
  GdkFont *font;
  GdkFunction function;
  GdkFill fill;
  GdkPixmap *tile;
  GdkPixmap *stipple;
  GdkPixmap *clip_mask;
  GdkSubwindowMode subwindow_mode;
  gint ts_x_origin;
  gint ts_y_origin;
  gint clip_x_origin;
  gint clip_y_origin;
  gint graphics_exposures;
  gint line_width;
  GdkLineStyle line_style;
  GdkCapStyle cap_style;
  GdkJoinStyle join_style;
};
# 189 "/usr/include/gtk-2.0/gdk/gdkgc.h"
struct _GdkGC
{
  GObject parent_instance;

  gint clip_x_origin;
  gint clip_y_origin;
  gint ts_x_origin;
  gint ts_y_origin;

  GdkColormap *colormap;
};

struct _GdkGCClass
{
  GObjectClass parent_class;

  void (*get_values) (GdkGC *gc,
     GdkGCValues *values);
  void (*set_values) (GdkGC *gc,
     GdkGCValues *values,
     GdkGCValuesMask mask);
  void (*set_dashes) (GdkGC *gc,
     gint dash_offset,
     gint8 dash_list[],
     gint n);


  void (*_gdk_reserved1) (void);
  void (*_gdk_reserved2) (void);
  void (*_gdk_reserved3) (void);
  void (*_gdk_reserved4) (void);
};



GType gdk_gc_get_type (void) __attribute__ ((__const__));
GdkGC *gdk_gc_new (GdkDrawable *drawable);
GdkGC *gdk_gc_new_with_values (GdkDrawable *drawable,
       GdkGCValues *values,
       GdkGCValuesMask values_mask);

GdkGC *gdk_gc_ref (GdkGC *gc);
void gdk_gc_unref (GdkGC *gc);

void gdk_gc_get_values (GdkGC *gc,
       GdkGCValues *values);
void gdk_gc_set_values (GdkGC *gc,
                                   GdkGCValues *values,
                                   GdkGCValuesMask values_mask);
void gdk_gc_set_foreground (GdkGC *gc,
       const GdkColor *color);
void gdk_gc_set_background (GdkGC *gc,
       const GdkColor *color);
void gdk_gc_set_font (GdkGC *gc,
       GdkFont *font);
void gdk_gc_set_function (GdkGC *gc,
       GdkFunction function);
void gdk_gc_set_fill (GdkGC *gc,
       GdkFill fill);
void gdk_gc_set_tile (GdkGC *gc,
       GdkPixmap *tile);
void gdk_gc_set_stipple (GdkGC *gc,
       GdkPixmap *stipple);
void gdk_gc_set_ts_origin (GdkGC *gc,
       gint x,
       gint y);
void gdk_gc_set_clip_origin (GdkGC *gc,
       gint x,
       gint y);
void gdk_gc_set_clip_mask (GdkGC *gc,
       GdkBitmap *mask);
void gdk_gc_set_clip_rectangle (GdkGC *gc,
       const GdkRectangle *rectangle);
void gdk_gc_set_clip_region (GdkGC *gc,
       const GdkRegion *region);
void gdk_gc_set_subwindow (GdkGC *gc,
       GdkSubwindowMode mode);
void gdk_gc_set_exposures (GdkGC *gc,
       gboolean exposures);
void gdk_gc_set_line_attributes (GdkGC *gc,
       gint line_width,
       GdkLineStyle line_style,
       GdkCapStyle cap_style,
       GdkJoinStyle join_style);
void gdk_gc_set_dashes (GdkGC *gc,
       gint dash_offset,
       gint8 dash_list[],
       gint n);
void gdk_gc_offset (GdkGC *gc,
       gint x_offset,
       gint y_offset);
void gdk_gc_copy (GdkGC *dst_gc,
       GdkGC *src_gc);


void gdk_gc_set_colormap (GdkGC *gc,
          GdkColormap *colormap);
GdkColormap *gdk_gc_get_colormap (GdkGC *gc);
void gdk_gc_set_rgb_fg_color (GdkGC *gc,
          const GdkColor *color);
void gdk_gc_set_rgb_bg_color (GdkGC *gc,
          const GdkColor *color);
GdkScreen * gdk_gc_get_screen (GdkGC *gc);





# 36 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2







typedef struct _GdkDrawableClass GdkDrawableClass;
typedef struct _GdkTrapezoid GdkTrapezoid;
# 53 "/usr/include/gtk-2.0/gdk/gdkdrawable.h"
struct _GdkDrawable
{
  GObject parent_instance;
};

struct _GdkDrawableClass
{
  GObjectClass parent_class;

  GdkGC *(*create_gc) (GdkDrawable *drawable,
            GdkGCValues *values,
            GdkGCValuesMask mask);
  void (*draw_rectangle) (GdkDrawable *drawable,
     GdkGC *gc,
     gboolean filled,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_arc) (GdkDrawable *drawable,
     GdkGC *gc,
     gboolean filled,
     gint x,
     gint y,
     gint width,
     gint height,
     gint angle1,
     gint angle2);
  void (*draw_polygon) (GdkDrawable *drawable,
     GdkGC *gc,
     gboolean filled,
     GdkPoint *points,
     gint npoints);
  void (*draw_text) (GdkDrawable *drawable,
     GdkFont *font,
     GdkGC *gc,
     gint x,
     gint y,
     const gchar *text,
     gint text_length);
  void (*draw_text_wc) (GdkDrawable *drawable,
     GdkFont *font,
     GdkGC *gc,
     gint x,
     gint y,
     const GdkWChar *text,
     gint text_length);
  void (*draw_drawable) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkDrawable *src,
     gint xsrc,
     gint ysrc,
     gint xdest,
     gint ydest,
     gint width,
     gint height);
  void (*draw_points) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkPoint *points,
     gint npoints);
  void (*draw_segments) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkSegment *segs,
     gint nsegs);
  void (*draw_lines) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkPoint *points,
     gint npoints);

  void (*draw_glyphs) (GdkDrawable *drawable,
     GdkGC *gc,
     PangoFont *font,
     gint x,
     gint y,
     PangoGlyphString *glyphs);

  void (*draw_image) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkImage *image,
                          gint xsrc,
                          gint ysrc,
                          gint xdest,
                          gint ydest,
                          gint width,
                          gint height);

  gint (*get_depth) (GdkDrawable *drawable);
  void (*get_size) (GdkDrawable *drawable,
                          gint *width,
                          gint *height);

  void (*set_colormap) (GdkDrawable *drawable,
                          GdkColormap *cmap);

  GdkColormap* (*get_colormap) (GdkDrawable *drawable);
  GdkVisual* (*get_visual) (GdkDrawable *drawable);
  GdkScreen* (*get_screen) (GdkDrawable *drawable);

  GdkImage* (*get_image) (GdkDrawable *drawable,
                              gint x,
                              gint y,
                              gint width,
                              gint height);

  GdkRegion* (*get_clip_region) (GdkDrawable *drawable);
  GdkRegion* (*get_visible_region) (GdkDrawable *drawable);

  GdkDrawable* (*get_composite_drawable) (GdkDrawable *drawable,
                                          gint x,
                                          gint y,
                                          gint width,
                                          gint height,
                                          gint *composite_x_offset,
                                          gint *composite_y_offset);

  void (*draw_pixbuf) (GdkDrawable *drawable,
          GdkGC *gc,
          GdkPixbuf *pixbuf,
          gint src_x,
          gint src_y,
          gint dest_x,
          gint dest_y,
          gint width,
          gint height,
          GdkRgbDither dither,
          gint x_dither,
          gint y_dither);
  GdkImage* (*_copy_to_image) (GdkDrawable *drawable,
      GdkImage *image,
      gint src_x,
      gint src_y,
      gint dest_x,
      gint dest_y,
      gint width,
      gint height);

  void (*draw_glyphs_transformed) (GdkDrawable *drawable,
       GdkGC *gc,
       PangoMatrix *matrix,
       PangoFont *font,
       gint x,
       gint y,
       PangoGlyphString *glyphs);
  void (*draw_trapezoids) (GdkDrawable *drawable,
       GdkGC *gc,
       GdkTrapezoid *trapezoids,
       gint n_trapezoids);

  cairo_surface_t *(*ref_cairo_surface) (GdkDrawable *drawable);

  GdkDrawable *(*get_source_drawable) (GdkDrawable *drawable);

  void (*set_cairo_clip) (GdkDrawable *drawable,
           cairo_t *cr);

  cairo_surface_t * (*create_cairo_surface) (GdkDrawable *drawable,
          int width,
          int height);

  void (*draw_drawable_with_src) (GdkDrawable *drawable,
       GdkGC *gc,
       GdkDrawable *src,
       gint xsrc,
       gint ysrc,
       gint xdest,
       gint ydest,
       gint width,
       gint height,
       GdkDrawable *original_src);


  void (*_gdk_reserved7) (void);
  void (*_gdk_reserved9) (void);
  void (*_gdk_reserved10) (void);
  void (*_gdk_reserved11) (void);
  void (*_gdk_reserved12) (void);
  void (*_gdk_reserved13) (void);
  void (*_gdk_reserved14) (void);
  void (*_gdk_reserved15) (void);
};

struct _GdkTrapezoid
{
  double y1, x11, x21, y2, x12, x22;
};

GType gdk_drawable_get_type (void) __attribute__ ((__const__));





void gdk_drawable_set_data (GdkDrawable *drawable,
        const gchar *key,
        gpointer data,
        GDestroyNotify destroy_func);
gpointer gdk_drawable_get_data (GdkDrawable *drawable,
        const gchar *key);


void gdk_drawable_set_colormap (GdkDrawable *drawable,
        GdkColormap *colormap);
GdkColormap* gdk_drawable_get_colormap (GdkDrawable *drawable);
gint gdk_drawable_get_depth (GdkDrawable *drawable);


void gdk_drawable_get_size (GdkDrawable *drawable,
        gint *width,
        gint *height);
GdkVisual* gdk_drawable_get_visual (GdkDrawable *drawable);
GdkScreen* gdk_drawable_get_screen (GdkDrawable *drawable);
GdkDisplay* gdk_drawable_get_display (GdkDrawable *drawable);



GdkDrawable* gdk_drawable_ref (GdkDrawable *drawable);
void gdk_drawable_unref (GdkDrawable *drawable);





void gdk_draw_point (GdkDrawable *drawable,
    GdkGC *gc,
    gint x,
    gint y);
void gdk_draw_line (GdkDrawable *drawable,
    GdkGC *gc,
    gint x1_,
    gint y1_,
    gint x2_,
    gint y2_);
void gdk_draw_rectangle (GdkDrawable *drawable,
    GdkGC *gc,
    gboolean filled,
    gint x,
    gint y,
    gint width,
    gint height);
void gdk_draw_arc (GdkDrawable *drawable,
    GdkGC *gc,
    gboolean filled,
    gint x,
    gint y,
    gint width,
    gint height,
    gint angle1,
    gint angle2);
void gdk_draw_polygon (GdkDrawable *drawable,
    GdkGC *gc,
    gboolean filled,
    const GdkPoint *points,
    gint n_points);
void gdk_draw_string (GdkDrawable *drawable,
    GdkFont *font,
    GdkGC *gc,
    gint x,
    gint y,
    const gchar *string);
void gdk_draw_text (GdkDrawable *drawable,
    GdkFont *font,
    GdkGC *gc,
    gint x,
    gint y,
    const gchar *text,
    gint text_length);
void gdk_draw_text_wc (GdkDrawable *drawable,
    GdkFont *font,
    GdkGC *gc,
    gint x,
    gint y,
    const GdkWChar *text,
    gint text_length);
void gdk_draw_drawable (GdkDrawable *drawable,
    GdkGC *gc,
    GdkDrawable *src,
    gint xsrc,
    gint ysrc,
    gint xdest,
    gint ydest,
    gint width,
    gint height);
void gdk_draw_image (GdkDrawable *drawable,
    GdkGC *gc,
    GdkImage *image,
    gint xsrc,
    gint ysrc,
    gint xdest,
    gint ydest,
    gint width,
    gint height);
void gdk_draw_points (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkPoint *points,
    gint n_points);
void gdk_draw_segments (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkSegment *segs,
    gint n_segs);
void gdk_draw_lines (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkPoint *points,
    gint n_points);
void gdk_draw_pixbuf (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkPixbuf *pixbuf,
    gint src_x,
    gint src_y,
    gint dest_x,
    gint dest_y,
    gint width,
    gint height,
    GdkRgbDither dither,
    gint x_dither,
    gint y_dither);

void gdk_draw_glyphs (GdkDrawable *drawable,
      GdkGC *gc,
      PangoFont *font,
      gint x,
      gint y,
      PangoGlyphString *glyphs);
void gdk_draw_layout_line (GdkDrawable *drawable,
      GdkGC *gc,
      gint x,
      gint y,
      PangoLayoutLine *line);
void gdk_draw_layout (GdkDrawable *drawable,
      GdkGC *gc,
      gint x,
      gint y,
      PangoLayout *layout);

void gdk_draw_layout_line_with_colors (GdkDrawable *drawable,
                                       GdkGC *gc,
                                       gint x,
                                       gint y,
                                       PangoLayoutLine *line,
                                       const GdkColor *foreground,
                                       const GdkColor *background);
void gdk_draw_layout_with_colors (GdkDrawable *drawable,
                                       GdkGC *gc,
                                       gint x,
                                       gint y,
                                       PangoLayout *layout,
                                       const GdkColor *foreground,
                                       const GdkColor *background);

void gdk_draw_glyphs_transformed (GdkDrawable *drawable,
      GdkGC *gc,
      const PangoMatrix *matrix,
      PangoFont *font,
      gint x,
      gint y,
      PangoGlyphString *glyphs);
void gdk_draw_trapezoids (GdkDrawable *drawable,
      GdkGC *gc,
      const GdkTrapezoid *trapezoids,
      gint n_trapezoids);




GdkImage* gdk_drawable_get_image (GdkDrawable *drawable,
                                       gint x,
                                       gint y,
                                       gint width,
                                       gint height);
GdkImage *gdk_drawable_copy_to_image (GdkDrawable *drawable,
          GdkImage *image,
          gint src_x,
          gint src_y,
          gint dest_x,
          gint dest_y,
          gint width,
          gint height);


GdkRegion *gdk_drawable_get_clip_region (GdkDrawable *drawable);
GdkRegion *gdk_drawable_get_visible_region (GdkDrawable *drawable);


# 40 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkenumtypes.h" 1
# 13 "/usr/include/gtk-2.0/gdk/gdkenumtypes.h"



GType gdk_cursor_type_get_type (void) __attribute__ ((__const__));



GType gdk_drag_action_get_type (void) __attribute__ ((__const__));

GType gdk_drag_protocol_get_type (void) __attribute__ ((__const__));



GType gdk_filter_return_get_type (void) __attribute__ ((__const__));

GType gdk_event_type_get_type (void) __attribute__ ((__const__));

GType gdk_event_mask_get_type (void) __attribute__ ((__const__));

GType gdk_visibility_state_get_type (void) __attribute__ ((__const__));

GType gdk_scroll_direction_get_type (void) __attribute__ ((__const__));

GType gdk_notify_type_get_type (void) __attribute__ ((__const__));

GType gdk_crossing_mode_get_type (void) __attribute__ ((__const__));

GType gdk_property_state_get_type (void) __attribute__ ((__const__));

GType gdk_window_state_get_type (void) __attribute__ ((__const__));

GType gdk_setting_action_get_type (void) __attribute__ ((__const__));

GType gdk_owner_change_get_type (void) __attribute__ ((__const__));



GType gdk_font_type_get_type (void) __attribute__ ((__const__));



GType gdk_cap_style_get_type (void) __attribute__ ((__const__));

GType gdk_fill_get_type (void) __attribute__ ((__const__));

GType gdk_function_get_type (void) __attribute__ ((__const__));

GType gdk_join_style_get_type (void) __attribute__ ((__const__));

GType gdk_line_style_get_type (void) __attribute__ ((__const__));

GType gdk_subwindow_mode_get_type (void) __attribute__ ((__const__));

GType gdk_gc_values_mask_get_type (void) __attribute__ ((__const__));



GType gdk_image_type_get_type (void) __attribute__ ((__const__));



GType gdk_extension_mode_get_type (void) __attribute__ ((__const__));

GType gdk_input_source_get_type (void) __attribute__ ((__const__));

GType gdk_input_mode_get_type (void) __attribute__ ((__const__));

GType gdk_axis_use_get_type (void) __attribute__ ((__const__));



GType gdk_prop_mode_get_type (void) __attribute__ ((__const__));



GType gdk_fill_rule_get_type (void) __attribute__ ((__const__));

GType gdk_overlap_type_get_type (void) __attribute__ ((__const__));



GType gdk_rgb_dither_get_type (void) __attribute__ ((__const__));



GType gdk_byte_order_get_type (void) __attribute__ ((__const__));

GType gdk_modifier_type_get_type (void) __attribute__ ((__const__));

GType gdk_input_condition_get_type (void) __attribute__ ((__const__));

GType gdk_status_get_type (void) __attribute__ ((__const__));

GType gdk_grab_status_get_type (void) __attribute__ ((__const__));



GType gdk_visual_type_get_type (void) __attribute__ ((__const__));



GType gdk_window_class_get_type (void) __attribute__ ((__const__));

GType gdk_window_type_get_type (void) __attribute__ ((__const__));

GType gdk_window_attributes_type_get_type (void) __attribute__ ((__const__));

GType gdk_window_hints_get_type (void) __attribute__ ((__const__));

GType gdk_window_type_hint_get_type (void) __attribute__ ((__const__));

GType gdk_wm_decoration_get_type (void) __attribute__ ((__const__));

GType gdk_wm_function_get_type (void) __attribute__ ((__const__));

GType gdk_gravity_get_type (void) __attribute__ ((__const__));

GType gdk_window_edge_get_type (void) __attribute__ ((__const__));


# 41 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkfont.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkfont.h"








typedef enum
{
  GDK_FONT_FONT,
  GDK_FONT_FONTSET
} GdkFontType;

struct _GdkFont
{
  GdkFontType type;
  gint ascent;
  gint descent;
};

GType gdk_font_get_type (void) __attribute__ ((__const__));

GdkFont* gdk_font_ref (GdkFont *font);
void gdk_font_unref (GdkFont *font);
gint gdk_font_id (const GdkFont *font);
gboolean gdk_font_equal (const GdkFont *fonta,
        const GdkFont *fontb);

GdkFont *gdk_font_load_for_display (GdkDisplay *display,
      const gchar *font_name);
GdkFont *gdk_fontset_load_for_display (GdkDisplay *display,
      const gchar *fontset_name);
GdkFont *gdk_font_from_description_for_display (GdkDisplay *display,
      PangoFontDescription *font_desc);




GdkFont* gdk_font_load (const gchar *font_name);
GdkFont* gdk_fontset_load (const gchar *fontset_name);
GdkFont* gdk_font_from_description (PangoFontDescription *font_desc);


gint gdk_string_width (GdkFont *font,
        const gchar *string);
gint gdk_text_width (GdkFont *font,
        const gchar *text,
        gint text_length);
gint gdk_text_width_wc (GdkFont *font,
        const GdkWChar *text,
        gint text_length);
gint gdk_char_width (GdkFont *font,
        gchar character);
gint gdk_char_width_wc (GdkFont *font,
        GdkWChar character);
gint gdk_string_measure (GdkFont *font,
        const gchar *string);
gint gdk_text_measure (GdkFont *font,
        const gchar *text,
        gint text_length);
gint gdk_char_measure (GdkFont *font,
        gchar character);
gint gdk_string_height (GdkFont *font,
        const gchar *string);
gint gdk_text_height (GdkFont *font,
        const gchar *text,
        gint text_length);
gint gdk_char_height (GdkFont *font,
        gchar character);

void gdk_text_extents (GdkFont *font,
        const gchar *text,
        gint text_length,
        gint *lbearing,
        gint *rbearing,
        gint *width,
        gint *ascent,
        gint *descent);
void gdk_text_extents_wc (GdkFont *font,
        const GdkWChar *text,
        gint text_length,
        gint *lbearing,
        gint *rbearing,
        gint *width,
        gint *ascent,
        gint *descent);
void gdk_string_extents (GdkFont *font,
        const gchar *string,
        gint *lbearing,
        gint *rbearing,
        gint *width,
        gint *ascent,
        gint *descent);

GdkDisplay * gdk_font_get_display (GdkFont *font);




# 43 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkimage.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkimage.h"

# 49 "/usr/include/gtk-2.0/gdk/gdkimage.h"
typedef enum
{
  GDK_IMAGE_NORMAL,
  GDK_IMAGE_SHARED,
  GDK_IMAGE_FASTEST
} GdkImageType;

typedef struct _GdkImageClass GdkImageClass;
# 65 "/usr/include/gtk-2.0/gdk/gdkimage.h"
struct _GdkImage
{
  GObject parent_instance;



  GdkImageType type;
  GdkVisual *visual;
  GdkByteOrder byte_order;
  gint width;
  gint height;
  guint16 depth;
  guint16 bpp;
  guint16 bpl;
  guint16 bits_per_pixel;
  gpointer mem;

  GdkColormap *colormap;


  gpointer windowing_data;
};

struct _GdkImageClass
{
  GObjectClass parent_class;
};

GType gdk_image_get_type (void) __attribute__ ((__const__));


GdkImage* gdk_image_new (GdkImageType type,
    GdkVisual *visual,
    gint width,
    gint height);

GdkImage* gdk_image_get (GdkDrawable *drawable,
    gint x,
    gint y,
    gint width,
    gint height);

GdkImage * gdk_image_ref (GdkImage *image);
void gdk_image_unref (GdkImage *image);

void gdk_image_put_pixel (GdkImage *image,
    gint x,
    gint y,
    guint32 pixel);
guint32 gdk_image_get_pixel (GdkImage *image,
    gint x,
    gint y);

void gdk_image_set_colormap (GdkImage *image,
                                   GdkColormap *colormap);
GdkColormap* gdk_image_get_colormap (GdkImage *image);

GdkImageType gdk_image_get_image_type (GdkImage *image);
GdkVisual *gdk_image_get_visual (GdkImage *image);
GdkByteOrder gdk_image_get_byte_order (GdkImage *image);
gint gdk_image_get_width (GdkImage *image);
gint gdk_image_get_height (GdkImage *image);
guint16 gdk_image_get_depth (GdkImage *image);
guint16 gdk_image_get_bytes_per_pixel(GdkImage *image);
guint16 gdk_image_get_bytes_per_line (GdkImage *image);
guint16 gdk_image_get_bits_per_pixel (GdkImage *image);
gpointer gdk_image_get_pixels (GdkImage *image);
# 143 "/usr/include/gtk-2.0/gdk/gdkimage.h"

# 45 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkkeys.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkkeys.h"


typedef struct _GdkKeymapKey GdkKeymapKey;


struct _GdkKeymapKey
{
  guint keycode;
  gint group;
  gint level;
};
# 56 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
typedef struct _GdkKeymap GdkKeymap;
typedef struct _GdkKeymapClass GdkKeymapClass;
# 66 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
struct _GdkKeymap
{
  GObject parent_instance;
  GdkDisplay *display;
};

struct _GdkKeymapClass
{
  GObjectClass parent_class;

  void (*direction_changed) (GdkKeymap *keymap);
  void (*keys_changed) (GdkKeymap *keymap);
  void (*state_changed) (GdkKeymap *keymap);
};

GType gdk_keymap_get_type (void) __attribute__ ((__const__));


GdkKeymap* gdk_keymap_get_default (void);

GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);


guint gdk_keymap_lookup_key (GdkKeymap *keymap,
          const GdkKeymapKey *key);
gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkModifierType state,
          gint group,
          guint *keyval,
          gint *effective_group,
          gint *level,
          GdkModifierType *consumed_modifiers);
gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap,
          guint keyval,
          GdkKeymapKey **keys,
          gint *n_keys);
gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkKeymapKey **keys,
          guint **keyvals,
          gint *n_entries);
PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);
gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);
gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);
void gdk_keymap_add_virtual_modifiers (GdkKeymap *keymap,
                                                    GdkModifierType *state);
gboolean gdk_keymap_map_virtual_modifiers (GdkKeymap *keymap,
                                                    GdkModifierType *state);



gchar* gdk_keyval_name (guint keyval) __attribute__ ((__const__));
guint gdk_keyval_from_name (const gchar *keyval_name);
void gdk_keyval_convert_case (guint symbol,
      guint *lower,
      guint *upper);
guint gdk_keyval_to_upper (guint keyval) __attribute__ ((__const__));
guint gdk_keyval_to_lower (guint keyval) __attribute__ ((__const__));
gboolean gdk_keyval_is_upper (guint keyval) __attribute__ ((__const__));
gboolean gdk_keyval_is_lower (guint keyval) __attribute__ ((__const__));

guint32 gdk_keyval_to_unicode (guint keyval) __attribute__ ((__const__));
guint gdk_unicode_to_keyval (guint32 wc) __attribute__ ((__const__));



# 47 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpango.h" 1
# 29 "/usr/include/gtk-2.0/gdk/gdkpango.h"




typedef struct _GdkPangoRenderer GdkPangoRenderer;
typedef struct _GdkPangoRendererClass GdkPangoRendererClass;
typedef struct _GdkPangoRendererPrivate GdkPangoRendererPrivate;
# 68 "/usr/include/gtk-2.0/gdk/gdkpango.h"
struct _GdkPangoRenderer
{

  PangoRenderer parent_instance;

  GdkPangoRendererPrivate *priv;
};
# 83 "/usr/include/gtk-2.0/gdk/gdkpango.h"
struct _GdkPangoRendererClass
{

  PangoRendererClass parent_class;
};

GType gdk_pango_renderer_get_type (void) __attribute__ ((__const__));

PangoRenderer *gdk_pango_renderer_new (GdkScreen *screen);
PangoRenderer *gdk_pango_renderer_get_default (GdkScreen *screen);

void gdk_pango_renderer_set_drawable (GdkPangoRenderer *gdk_renderer,
         GdkDrawable *drawable);
void gdk_pango_renderer_set_gc (GdkPangoRenderer *gdk_renderer,
         GdkGC *gc);
void gdk_pango_renderer_set_stipple (GdkPangoRenderer *gdk_renderer,
         PangoRenderPart part,
         GdkBitmap *stipple);
void gdk_pango_renderer_set_override_color (GdkPangoRenderer *gdk_renderer,
         PangoRenderPart part,
         const GdkColor *color);



PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);

PangoContext *gdk_pango_context_get (void);


void gdk_pango_context_set_colormap (PangoContext *context,
                                                GdkColormap *colormap);
# 123 "/usr/include/gtk-2.0/gdk/gdkpango.h"
GdkRegion *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);
GdkRegion *gdk_pango_layout_get_clip_region (PangoLayout *layout,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);





typedef struct _GdkPangoAttrStipple GdkPangoAttrStipple;
typedef struct _GdkPangoAttrEmbossed GdkPangoAttrEmbossed;
typedef struct _GdkPangoAttrEmbossColor GdkPangoAttrEmbossColor;

struct _GdkPangoAttrStipple
{
  PangoAttribute attr;
  GdkBitmap *stipple;
};

struct _GdkPangoAttrEmbossed
{
  PangoAttribute attr;
  gboolean embossed;
};

struct _GdkPangoAttrEmbossColor
{
  PangoAttribute attr;
  PangoColor color;
};

PangoAttribute *gdk_pango_attr_stipple_new (GdkBitmap *stipple);
PangoAttribute *gdk_pango_attr_embossed_new (gboolean embossed);
PangoAttribute *gdk_pango_attr_emboss_color_new (const GdkColor *color);


# 48 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkpixmap.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"


typedef struct _GdkPixmapObject GdkPixmapObject;
typedef struct _GdkPixmapObjectClass GdkPixmapObjectClass;
# 50 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"
struct _GdkPixmapObject
{
  GdkDrawable parent_instance;

  GdkDrawable *impl;

  gint depth;
};

struct _GdkPixmapObjectClass
{
  GdkDrawableClass parent_class;

};

GType gdk_pixmap_get_type (void) __attribute__ ((__const__));



GdkPixmap* gdk_pixmap_new (GdkDrawable *drawable,
      gint width,
      gint height,
      gint depth);

GdkBitmap* gdk_bitmap_create_from_data (GdkDrawable *drawable,
      const gchar *data,
      gint width,
      gint height);
GdkPixmap* gdk_pixmap_create_from_data (GdkDrawable *drawable,
      const gchar *data,
      gint width,
      gint height,
      gint depth,
      const GdkColor *fg,
      const GdkColor *bg);

GdkPixmap* gdk_pixmap_create_from_xpm (GdkDrawable *drawable,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        const gchar *filename);
GdkPixmap* gdk_pixmap_colormap_create_from_xpm (GdkDrawable *drawable,
        GdkColormap *colormap,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        const gchar *filename);
GdkPixmap* gdk_pixmap_create_from_xpm_d (GdkDrawable *drawable,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        gchar **data);
GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d (GdkDrawable *drawable,
        GdkColormap *colormap,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        gchar **data);


void gdk_pixmap_get_size (GdkPixmap *pixmap,
                                                  gint *width,
                                                  gint *height);




GdkPixmap* gdk_pixmap_foreign_new (GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_lookup (GdkNativeWindow anid);


GdkPixmap* gdk_pixmap_foreign_new_for_display (GdkDisplay *display,
        GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_lookup_for_display (GdkDisplay *display,
        GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_foreign_new_for_screen (GdkScreen *screen,
        GdkNativeWindow anid,
        gint width,
                                                  gint height,
                                                  gint depth);
# 134 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"

# 50 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkproperty.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkproperty.h"


typedef enum
{
  GDK_PROP_MODE_REPLACE,
  GDK_PROP_MODE_PREPEND,
  GDK_PROP_MODE_APPEND
} GdkPropMode;

GdkAtom gdk_atom_intern (const gchar *atom_name,
    gboolean only_if_exists);
GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);
gchar* gdk_atom_name (GdkAtom atom);

gboolean gdk_property_get (GdkWindow *window,
         GdkAtom property,
         GdkAtom type,
         gulong offset,
         gulong length,
         gint pdelete,
         GdkAtom *actual_property_type,
         gint *actual_format,
         gint *actual_length,
         guchar **data);
void gdk_property_change (GdkWindow *window,
         GdkAtom property,
         GdkAtom type,
         gint format,
         GdkPropMode mode,
         const guchar *data,
         gint nelements);
void gdk_property_delete (GdkWindow *window,
         GdkAtom property);


gint gdk_text_property_to_text_list (GdkAtom encoding,
         gint format,
         const guchar *text,
         gint length,
         gchar ***list);
gboolean gdk_utf8_to_compound_text (const gchar *str,
        GdkAtom *encoding,
        gint *format,
        guchar **ctext,
        gint *length);
gint gdk_string_to_compound_text (const gchar *str,
         GdkAtom *encoding,
         gint *format,
         guchar **ctext,
         gint *length);
gint gdk_text_property_to_utf8_list (GdkAtom encoding,
         gint format,
         const guchar *text,
         gint length,
         gchar ***list);



gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display,
       GdkAtom encoding,
       gint format,
       const guchar *text,
       gint length,
       gchar ***list);

gchar *gdk_utf8_to_string_target (const gchar *str);

gint gdk_text_property_to_text_list_for_display (GdkDisplay *display,
       GdkAtom encoding,
       gint format,
       const guchar *text,
       gint length,
       gchar ***list);
gint gdk_string_to_compound_text_for_display (GdkDisplay *display,
        const gchar *str,
        GdkAtom *encoding,
        gint *format,
        guchar **ctext,
        gint *length);
gboolean gdk_utf8_to_compound_text_for_display (GdkDisplay *display,
        const gchar *str,
        GdkAtom *encoding,
        gint *format,
        guchar **ctext,
        gint *length);

void gdk_free_text_list (gchar **list);
void gdk_free_compound_text (guchar *ctext);



# 51 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkregion.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkregion.h"







typedef enum
{
  GDK_EVEN_ODD_RULE,
  GDK_WINDING_RULE
} GdkFillRule;







typedef enum
{
  GDK_OVERLAP_RECTANGLE_IN,
  GDK_OVERLAP_RECTANGLE_OUT,
  GDK_OVERLAP_RECTANGLE_PART
} GdkOverlapType;


typedef void (* GdkSpanFunc) (GdkSpan *span,
                              gpointer data);


GdkRegion * gdk_region_new (void);

GdkRegion * gdk_region_polygon (const GdkPoint *points,
                                           gint n_points,
                                           GdkFillRule fill_rule);

GdkRegion * gdk_region_copy (const GdkRegion *region);
GdkRegion * gdk_region_rectangle (const GdkRectangle *rectangle);
void gdk_region_destroy (GdkRegion *region);

void gdk_region_get_clipbox (const GdkRegion *region,
                                           GdkRectangle *rectangle);
void gdk_region_get_rectangles (const GdkRegion *region,
                                           GdkRectangle **rectangles,
                                           gint *n_rectangles);

gboolean gdk_region_empty (const GdkRegion *region);
gboolean gdk_region_equal (const GdkRegion *region1,
                                           const GdkRegion *region2);

gboolean gdk_region_rect_equal (const GdkRegion *region,
                                           const GdkRectangle *rectangle);

gboolean gdk_region_point_in (const GdkRegion *region,
                                           int x,
                                           int y);
GdkOverlapType gdk_region_rect_in (const GdkRegion *region,
                                           const GdkRectangle *rectangle);

void gdk_region_offset (GdkRegion *region,
                                           gint dx,
                                           gint dy);

void gdk_region_shrink (GdkRegion *region,
                                           gint dx,
                                           gint dy);

void gdk_region_union_with_rect (GdkRegion *region,
                                           const GdkRectangle *rect);
void gdk_region_intersect (GdkRegion *source1,
                                           const GdkRegion *source2);
void gdk_region_union (GdkRegion *source1,
                                           const GdkRegion *source2);
void gdk_region_subtract (GdkRegion *source1,
                                           const GdkRegion *source2);
void gdk_region_xor (GdkRegion *source1,
                                           const GdkRegion *source2);


void gdk_region_spans_intersect_foreach (GdkRegion *region,
                                           const GdkSpan *spans,
                                           int n_spans,
                                           gboolean sorted,
                                           GdkSpanFunc function,
                                           gpointer data);



# 52 "/usr/include/gtk-2.0/gdk/gdk.h" 2


# 1 "/usr/include/gtk-2.0/gdk/gdkselection.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkselection.h"

# 60 "/usr/include/gtk-2.0/gdk/gdkselection.h"
typedef GdkAtom GdkSelection;
typedef GdkAtom GdkTarget;
typedef GdkAtom GdkSelectionType;







gboolean gdk_selection_owner_set (GdkWindow *owner,
        GdkAtom selection,
        guint32 time_,
        gboolean send_event);
GdkWindow* gdk_selection_owner_get (GdkAtom selection);


gboolean gdk_selection_owner_set_for_display (GdkDisplay *display,
      GdkWindow *owner,
      GdkAtom selection,
      guint32 time_,
      gboolean send_event);
GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display,
      GdkAtom selection);

void gdk_selection_convert (GdkWindow *requestor,
        GdkAtom selection,
        GdkAtom target,
        guint32 time_);
gint gdk_selection_property_get (GdkWindow *requestor,
           guchar **data,
           GdkAtom *prop_type,
           gint *prop_format);


void gdk_selection_send_notify (GdkNativeWindow requestor,
          GdkAtom selection,
          GdkAtom target,
          GdkAtom property,
          guint32 time_);


void gdk_selection_send_notify_for_display (GdkDisplay *display,
        GdkNativeWindow requestor,
        GdkAtom selection,
        GdkAtom target,
        GdkAtom property,
        guint32 time_);


# 55 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkspawn.h" 1
# 31 "/usr/include/gtk-2.0/gdk/gdkspawn.h"



gboolean gdk_spawn_on_screen (GdkScreen *screen,
        const gchar *working_directory,
        gchar **argv,
        gchar **envp,
        GSpawnFlags flags,
        GSpawnChildSetupFunc child_setup,
        gpointer user_data,
        gint *child_pid,
        GError **error);

gboolean gdk_spawn_on_screen_with_pipes (GdkScreen *screen,
        const gchar *working_directory,
        gchar **argv,
        gchar **envp,
        GSpawnFlags flags,
        GSpawnChildSetupFunc child_setup,
        gpointer user_data,
        gint *child_pid,
        gint *standard_input,
        gint *standard_output,
        gint *standard_error,
        GError **error);

gboolean gdk_spawn_command_line_on_screen (GdkScreen *screen,
        const gchar *command_line,
        GError **error);



# 56 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktestutils.h" 1
# 28 "/usr/include/gtk-2.0/gdk/gdktestutils.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 1
# 38 "/usr/include/gtk-2.0/gdk/gdkwindow.h"


typedef struct _GdkGeometry GdkGeometry;
typedef struct _GdkWindowAttr GdkWindowAttr;
typedef struct _GdkPointerHooks GdkPointerHooks;
typedef struct _GdkWindowRedirect GdkWindowRedirect;
# 54 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_INPUT_OUTPUT,
  GDK_INPUT_ONLY
} GdkWindowClass;
# 73 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_ROOT,
  GDK_WINDOW_TOPLEVEL,
  GDK_WINDOW_CHILD,
  GDK_WINDOW_DIALOG,
  GDK_WINDOW_TEMP,
  GDK_WINDOW_FOREIGN,
  GDK_WINDOW_OFFSCREEN
} GdkWindowType;
# 92 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WA_TITLE = 1 << 1,
  GDK_WA_X = 1 << 2,
  GDK_WA_Y = 1 << 3,
  GDK_WA_CURSOR = 1 << 4,
  GDK_WA_COLORMAP = 1 << 5,
  GDK_WA_VISUAL = 1 << 6,
  GDK_WA_WMCLASS = 1 << 7,
  GDK_WA_NOREDIR = 1 << 8,
  GDK_WA_TYPE_HINT = 1 << 9
} GdkWindowAttributesType;



typedef enum
{
  GDK_HINT_POS = 1 << 0,
  GDK_HINT_MIN_SIZE = 1 << 1,
  GDK_HINT_MAX_SIZE = 1 << 2,
  GDK_HINT_BASE_SIZE = 1 << 3,
  GDK_HINT_ASPECT = 1 << 4,
  GDK_HINT_RESIZE_INC = 1 << 5,
  GDK_HINT_WIN_GRAVITY = 1 << 6,
  GDK_HINT_USER_POS = 1 << 7,
  GDK_HINT_USER_SIZE = 1 << 8
} GdkWindowHints;
# 133 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_TYPE_HINT_NORMAL,
  GDK_WINDOW_TYPE_HINT_DIALOG,
  GDK_WINDOW_TYPE_HINT_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLBAR,
  GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
  GDK_WINDOW_TYPE_HINT_UTILITY,
  GDK_WINDOW_TYPE_HINT_DOCK,
  GDK_WINDOW_TYPE_HINT_DESKTOP,
  GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU,
  GDK_WINDOW_TYPE_HINT_POPUP_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLTIP,
  GDK_WINDOW_TYPE_HINT_NOTIFICATION,
  GDK_WINDOW_TYPE_HINT_COMBO,
  GDK_WINDOW_TYPE_HINT_DND
} GdkWindowTypeHint;






typedef enum
{
  GDK_DECOR_ALL = 1 << 0,
  GDK_DECOR_BORDER = 1 << 1,
  GDK_DECOR_RESIZEH = 1 << 2,
  GDK_DECOR_TITLE = 1 << 3,
  GDK_DECOR_MENU = 1 << 4,
  GDK_DECOR_MINIMIZE = 1 << 5,
  GDK_DECOR_MAXIMIZE = 1 << 6
} GdkWMDecoration;

typedef enum
{
  GDK_FUNC_ALL = 1 << 0,
  GDK_FUNC_RESIZE = 1 << 1,
  GDK_FUNC_MOVE = 1 << 2,
  GDK_FUNC_MINIMIZE = 1 << 3,
  GDK_FUNC_MAXIMIZE = 1 << 4,
  GDK_FUNC_CLOSE = 1 << 5
} GdkWMFunction;





typedef enum
{
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH,
  GDK_GRAVITY_NORTH_EAST,
  GDK_GRAVITY_WEST,
  GDK_GRAVITY_CENTER,
  GDK_GRAVITY_EAST,
  GDK_GRAVITY_SOUTH_WEST,
  GDK_GRAVITY_SOUTH,
  GDK_GRAVITY_SOUTH_EAST,
  GDK_GRAVITY_STATIC
} GdkGravity;


typedef enum
{
  GDK_WINDOW_EDGE_NORTH_WEST,
  GDK_WINDOW_EDGE_NORTH,
  GDK_WINDOW_EDGE_NORTH_EAST,
  GDK_WINDOW_EDGE_WEST,
  GDK_WINDOW_EDGE_EAST,
  GDK_WINDOW_EDGE_SOUTH_WEST,
  GDK_WINDOW_EDGE_SOUTH,
  GDK_WINDOW_EDGE_SOUTH_EAST
} GdkWindowEdge;

struct _GdkWindowAttr
{
  gchar *title;
  gint event_mask;
  gint x, y;
  gint width;
  gint height;
  GdkWindowClass wclass;
  GdkVisual *visual;
  GdkColormap *colormap;
  GdkWindowType window_type;
  GdkCursor *cursor;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gboolean override_redirect;
  GdkWindowTypeHint type_hint;
};

struct _GdkGeometry
{
  gint min_width;
  gint min_height;
  gint max_width;
  gint max_height;
  gint base_width;
  gint base_height;
  gint width_inc;
  gint height_inc;
  gdouble min_aspect;
  gdouble max_aspect;
  GdkGravity win_gravity;
};

struct _GdkPointerHooks
{
  GdkWindow* (*get_pointer) (GdkWindow *window,
              gint *x,
              gint *y,
              GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkScreen *screen,
                                   gint *win_x,
                                   gint *win_y);
};

typedef struct _GdkWindowObject GdkWindowObject;
typedef struct _GdkWindowObjectClass GdkWindowObjectClass;
# 272 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
struct _GdkWindowObject
{
  GdkDrawable parent_instance;

  GdkDrawable *impl;

  GdkWindowObject *parent;

  gpointer user_data;

  gint x;
  gint y;

  gint extension_events;

  GList *filters;
  GList *children;

  GdkColor bg_color;
  GdkPixmap *bg_pixmap;

  GSList *paint_stack;

  GdkRegion *update_area;
  guint update_freeze_count;

  guint8 window_type;
  guint8 depth;
  guint8 resize_count;

  GdkWindowState state;

  guint guffaw_gravity : 1;
  guint input_only : 1;
  guint modal_hint : 1;
  guint composited : 1;

  guint destroyed : 2;

  guint accept_focus : 1;
  guint focus_on_map : 1;
  guint shaped : 1;

  GdkEventMask event_mask;

  guint update_and_descendants_freeze_count;

  GdkWindowRedirect *redirect;
};



struct _GdkWindowObjectClass
{
  GdkDrawableClass parent_class;
};



GType gdk_window_object_get_type (void) __attribute__ ((__const__));
GdkWindow* gdk_window_new (GdkWindow *parent,
                                                GdkWindowAttr *attributes,
                                                gint attributes_mask);
void gdk_window_destroy (GdkWindow *window);
GdkWindowType gdk_window_get_window_type (GdkWindow *window);
gboolean gdk_window_is_destroyed (GdkWindow *window);

GdkScreen* gdk_window_get_screen (GdkWindow *window);
GdkDisplay* gdk_window_get_display (GdkWindow *window);
GdkVisual* gdk_window_get_visual (GdkWindow *window);
int gdk_window_get_width (GdkWindow *window);
int gdk_window_get_height (GdkWindow *window);

GdkWindow* gdk_window_at_pointer (gint *win_x,
                                                gint *win_y);
void gdk_window_show (GdkWindow *window);
void gdk_window_hide (GdkWindow *window);
void gdk_window_withdraw (GdkWindow *window);
void gdk_window_show_unraised (GdkWindow *window);
void gdk_window_move (GdkWindow *window,
                                                gint x,
                                                gint y);
void gdk_window_resize (GdkWindow *window,
                                                gint width,
                                                gint height);
void gdk_window_move_resize (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_reparent (GdkWindow *window,
                                                GdkWindow *new_parent,
                                                gint x,
                                                gint y);
void gdk_window_clear (GdkWindow *window);
void gdk_window_clear_area (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_clear_area_e (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_raise (GdkWindow *window);
void gdk_window_lower (GdkWindow *window);
void gdk_window_restack (GdkWindow *window,
      GdkWindow *sibling,
      gboolean above);
void gdk_window_focus (GdkWindow *window,
                                                guint32 timestamp);
void gdk_window_set_user_data (GdkWindow *window,
                                                gpointer user_data);
void gdk_window_set_override_redirect (GdkWindow *window,
                                                gboolean override_redirect);
gboolean gdk_window_get_accept_focus (GdkWindow *window);
void gdk_window_set_accept_focus (GdkWindow *window,
             gboolean accept_focus);
gboolean gdk_window_get_focus_on_map (GdkWindow *window);
void gdk_window_set_focus_on_map (GdkWindow *window,
             gboolean focus_on_map);
void gdk_window_add_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
void gdk_window_remove_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
void gdk_window_scroll (GdkWindow *window,
                                                gint dx,
                                                gint dy);
void gdk_window_move_region (GdkWindow *window,
      const GdkRegion *region,
      gint dx,
      gint dy);
gboolean gdk_window_ensure_native (GdkWindow *window);







void gdk_window_shape_combine_mask (GdkWindow *window,
                                     GdkBitmap *mask,
                                     gint x,
                                     gint y);
void gdk_window_shape_combine_region (GdkWindow *window,
                                      const GdkRegion *shape_region,
                                      gint offset_x,
                                      gint offset_y);
# 431 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
void gdk_window_set_child_shapes (GdkWindow *window);

gboolean gdk_window_get_composited (GdkWindow *window);
void gdk_window_set_composited (GdkWindow *window,
                                  gboolean composited);
# 444 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
void gdk_window_merge_child_shapes (GdkWindow *window);

void gdk_window_input_shape_combine_mask (GdkWindow *window,
         GdkBitmap *mask,
         gint x,
         gint y);
void gdk_window_input_shape_combine_region (GdkWindow *window,
                                            const GdkRegion *shape_region,
                                            gint offset_x,
                                            gint offset_y);
void gdk_window_set_child_input_shapes (GdkWindow *window);
void gdk_window_merge_child_input_shapes (GdkWindow *window);
# 464 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
gboolean gdk_window_is_visible (GdkWindow *window);
gboolean gdk_window_is_viewable (GdkWindow *window);
gboolean gdk_window_is_input_only (GdkWindow *window);
gboolean gdk_window_is_shaped (GdkWindow *window);

GdkWindowState gdk_window_get_state (GdkWindow *window);




gboolean gdk_window_set_static_gravities (GdkWindow *window,
       gboolean use_static);




GdkWindow* gdk_window_foreign_new (GdkNativeWindow anid);
GdkWindow* gdk_window_lookup (GdkNativeWindow anid);

GdkWindow *gdk_window_foreign_new_for_display (GdkDisplay *display,
        GdkNativeWindow anid);
GdkWindow* gdk_window_lookup_for_display (GdkDisplay *display,
          GdkNativeWindow anid);





gboolean gdk_window_has_native (GdkWindow *window);

void gdk_window_set_hints (GdkWindow *window,
       gint x,
       gint y,
       gint min_width,
       gint min_height,
       gint max_width,
       gint max_height,
       gint flags);

void gdk_window_set_type_hint (GdkWindow *window,
                                            GdkWindowTypeHint hint);
GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);

gboolean gdk_window_get_modal_hint (GdkWindow *window);
void gdk_window_set_modal_hint (GdkWindow *window,
                                           gboolean modal);

void gdk_window_set_skip_taskbar_hint (GdkWindow *window,
                                       gboolean skips_taskbar);
void gdk_window_set_skip_pager_hint (GdkWindow *window,
                                       gboolean skips_pager);
void gdk_window_set_urgency_hint (GdkWindow *window,
           gboolean urgent);

void gdk_window_set_geometry_hints (GdkWindow *window,
          const GdkGeometry *geometry,
          GdkWindowHints geom_mask);

void gdk_set_sm_client_id (const gchar *sm_client_id);


void gdk_window_begin_paint_rect (GdkWindow *window,
          const GdkRectangle *rectangle);
void gdk_window_begin_paint_region (GdkWindow *window,
          const GdkRegion *region);
void gdk_window_end_paint (GdkWindow *window);
void gdk_window_flush (GdkWindow *window);

void gdk_window_set_title (GdkWindow *window,
         const gchar *title);
void gdk_window_set_role (GdkWindow *window,
         const gchar *role);
void gdk_window_set_startup_id (GdkWindow *window,
         const gchar *startup_id);
void gdk_window_set_transient_for (GdkWindow *window,
         GdkWindow *parent);
void gdk_window_set_background (GdkWindow *window,
       const GdkColor *color);
void gdk_window_set_back_pixmap (GdkWindow *window,
       GdkPixmap *pixmap,
       gboolean parent_relative);
cairo_pattern_t *gdk_window_get_background_pattern (GdkWindow *window);

void gdk_window_set_cursor (GdkWindow *window,
       GdkCursor *cursor);
GdkCursor *gdk_window_get_cursor (GdkWindow *window);
void gdk_window_get_user_data (GdkWindow *window,
       gpointer *data);
void gdk_window_get_geometry (GdkWindow *window,
       gint *x,
       gint *y,
       gint *width,
       gint *height,
       gint *depth);
void gdk_window_get_position (GdkWindow *window,
       gint *x,
       gint *y);
gint gdk_window_get_origin (GdkWindow *window,
       gint *x,
       gint *y);
void gdk_window_get_root_coords (GdkWindow *window,
       gint x,
       gint y,
       gint *root_x,
       gint *root_y);
void gdk_window_coords_to_parent (GdkWindow *window,
                                          gdouble x,
                                          gdouble y,
                                          gdouble *parent_x,
                                          gdouble *parent_y);
void gdk_window_coords_from_parent (GdkWindow *window,
                                          gdouble parent_x,
                                          gdouble parent_y,
                                          gdouble *x,
                                          gdouble *y);



gboolean gdk_window_get_deskrelative_origin (GdkWindow *window,
       gint *x,
       gint *y);


void gdk_window_get_root_origin (GdkWindow *window,
       gint *x,
       gint *y);
void gdk_window_get_frame_extents (GdkWindow *window,
                                            GdkRectangle *rect);
GdkWindow* gdk_window_get_pointer (GdkWindow *window,
       gint *x,
       gint *y,
       GdkModifierType *mask);
GdkWindow * gdk_window_get_parent (GdkWindow *window);
GdkWindow * gdk_window_get_toplevel (GdkWindow *window);

GdkWindow * gdk_window_get_effective_parent (GdkWindow *window);
GdkWindow * gdk_window_get_effective_toplevel (GdkWindow *window);

GList * gdk_window_get_children (GdkWindow *window);
GList * gdk_window_peek_children (GdkWindow *window);
GdkEventMask gdk_window_get_events (GdkWindow *window);
void gdk_window_set_events (GdkWindow *window,
       GdkEventMask event_mask);

void gdk_window_set_icon_list (GdkWindow *window,
       GList *pixbufs);
void gdk_window_set_icon (GdkWindow *window,
       GdkWindow *icon_window,
       GdkPixmap *pixmap,
       GdkBitmap *mask);
void gdk_window_set_icon_name (GdkWindow *window,
       const gchar *name);
void gdk_window_set_group (GdkWindow *window,
       GdkWindow *leader);
GdkWindow* gdk_window_get_group (GdkWindow *window);
void gdk_window_set_decorations (GdkWindow *window,
       GdkWMDecoration decorations);
gboolean gdk_window_get_decorations (GdkWindow *window,
       GdkWMDecoration *decorations);
void gdk_window_set_functions (GdkWindow *window,
       GdkWMFunction functions);

GList * gdk_window_get_toplevels (void);


cairo_surface_t *
              gdk_window_create_similar_surface (GdkWindow *window,
                                          cairo_content_t content,
                                          int width,
                                          int height);

void gdk_window_beep (GdkWindow *window);
void gdk_window_iconify (GdkWindow *window);
void gdk_window_deiconify (GdkWindow *window);
void gdk_window_stick (GdkWindow *window);
void gdk_window_unstick (GdkWindow *window);
void gdk_window_maximize (GdkWindow *window);
void gdk_window_unmaximize (GdkWindow *window);
void gdk_window_fullscreen (GdkWindow *window);
void gdk_window_unfullscreen (GdkWindow *window);
void gdk_window_set_keep_above (GdkWindow *window,
                                          gboolean setting);
void gdk_window_set_keep_below (GdkWindow *window,
                                          gboolean setting);
void gdk_window_set_opacity (GdkWindow *window,
                                          gdouble opacity);
void gdk_window_register_dnd (GdkWindow *window);

void gdk_window_begin_resize_drag (GdkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
void gdk_window_begin_move_drag (GdkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);


void gdk_window_invalidate_rect (GdkWindow *window,
              const GdkRectangle *rect,
              gboolean invalidate_children);
void gdk_window_invalidate_region (GdkWindow *window,
              const GdkRegion *region,
              gboolean invalidate_children);
void gdk_window_invalidate_maybe_recurse (GdkWindow *window,
       const GdkRegion *region,
       gboolean (*child_func) (GdkWindow *, gpointer),
       gpointer user_data);
GdkRegion *gdk_window_get_update_area (GdkWindow *window);

void gdk_window_freeze_updates (GdkWindow *window);
void gdk_window_thaw_updates (GdkWindow *window);

void gdk_window_freeze_toplevel_updates_libgtk_only (GdkWindow *window);
void gdk_window_thaw_toplevel_updates_libgtk_only (GdkWindow *window);

void gdk_window_process_all_updates (void);
void gdk_window_process_updates (GdkWindow *window,
        gboolean update_children);


void gdk_window_set_debug_updates (gboolean setting);

void gdk_window_constrain_size (GdkGeometry *geometry,
                                           guint flags,
                                           gint width,
                                           gint height,
                                           gint *new_width,
                                           gint *new_height);

void gdk_window_get_internal_paint_info (GdkWindow *window,
      GdkDrawable **real_drawable,
      gint *x_offset,
      gint *y_offset);

void gdk_window_enable_synchronized_configure (GdkWindow *window);
void gdk_window_configure_finished (GdkWindow *window);

GdkWindow *gdk_get_default_root_window (void);


GdkPixmap *gdk_offscreen_window_get_pixmap (GdkWindow *window);
void gdk_offscreen_window_set_embedder (GdkWindow *window,
      GdkWindow *embedder);
GdkWindow *gdk_offscreen_window_get_embedder (GdkWindow *window);
void gdk_window_geometry_changed (GdkWindow *window);

void gdk_window_redirect_to_drawable (GdkWindow *window,
                                              GdkDrawable *drawable,
                                              gint src_x,
                                              gint src_y,
                                              gint dest_x,
                                              gint dest_y,
                                              gint width,
                                              gint height);
void gdk_window_remove_redirection (GdkWindow *window);



GdkPointerHooks *gdk_set_pointer_hooks (const GdkPointerHooks *new_hooks);
# 741 "/usr/include/gtk-2.0/gdk/gdkwindow.h"

# 29 "/usr/include/gtk-2.0/gdk/gdktestutils.h" 2




void gdk_test_render_sync (GdkWindow *window);
gboolean gdk_test_simulate_key (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint keyval,
                                                 GdkModifierType modifiers,
                                                 GdkEventType key_pressrelease);
gboolean gdk_test_simulate_button (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint button,
                                                 GdkModifierType modifiers,
                                                 GdkEventType button_pressrelease);


# 57 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkvisual.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkvisual.h"

# 45 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
typedef struct _GdkVisualClass GdkVisualClass;
# 55 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
typedef enum
{
  GDK_VISUAL_STATIC_GRAY,
  GDK_VISUAL_GRAYSCALE,
  GDK_VISUAL_STATIC_COLOR,
  GDK_VISUAL_PSEUDO_COLOR,
  GDK_VISUAL_TRUE_COLOR,
  GDK_VISUAL_DIRECT_COLOR
} GdkVisualType;
# 77 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
struct _GdkVisual
{
  GObject parent_instance;

  GdkVisualType type;
  gint depth;
  GdkByteOrder byte_order;
  gint colormap_size;
  gint bits_per_rgb;

  guint32 red_mask;
  gint red_shift;
  gint red_prec;

  guint32 green_mask;
  gint green_shift;
  gint green_prec;

  guint32 blue_mask;
  gint blue_shift;
  gint blue_prec;
};

GType gdk_visual_get_type (void) __attribute__ ((__const__));


gint gdk_visual_get_best_depth (void);
GdkVisualType gdk_visual_get_best_type (void);
GdkVisual* gdk_visual_get_system (void);
GdkVisual* gdk_visual_get_best (void);
GdkVisual* gdk_visual_get_best_with_depth (gint depth);
GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);
GdkVisual* gdk_visual_get_best_with_both (gint depth,
           GdkVisualType visual_type);

void gdk_query_depths (gint **depths,
        gint *count);
void gdk_query_visual_types (GdkVisualType **visual_types,
        gint *count);

GList* gdk_list_visuals (void);


GdkScreen *gdk_visual_get_screen (GdkVisual *visual);

GdkVisualType gdk_visual_get_visual_type (GdkVisual *visual);
gint gdk_visual_get_depth (GdkVisual *visual);
GdkByteOrder gdk_visual_get_byte_order (GdkVisual *visual);
gint gdk_visual_get_colormap_size (GdkVisual *visual);
gint gdk_visual_get_bits_per_rgb (GdkVisual *visual);
void gdk_visual_get_red_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
void gdk_visual_get_green_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
void gdk_visual_get_blue_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);







# 59 "/usr/include/gtk-2.0/gdk/gdk.h" 2










void gdk_parse_args (gint *argc,
      gchar ***argv);
void gdk_init (gint *argc,
      gchar ***argv);
gboolean gdk_init_check (gint *argc,
      gchar ***argv);
void gdk_add_option_entries_libgtk_only (GOptionGroup *group);
void gdk_pre_parse_libgtk_only (void);


void gdk_exit (gint error_code);
gchar* gdk_set_locale (void);


const char * gdk_get_program_class (void);
void gdk_set_program_class (const char *program_class);



void gdk_error_trap_push (void);
gint gdk_error_trap_pop (void);


void gdk_set_use_xshm (gboolean use_xshm);
gboolean gdk_get_use_xshm (void);


gchar* gdk_get_display (void);
const gchar* gdk_get_display_arg_name (void);


gint gdk_input_add_full (gint source,
      GdkInputCondition condition,
      GdkInputFunction function,
      gpointer data,
      GDestroyNotify destroy);
gint gdk_input_add (gint source,
      GdkInputCondition condition,
      GdkInputFunction function,
      gpointer data);
void gdk_input_remove (gint tag);


GdkGrabStatus gdk_pointer_grab (GdkWindow *window,
          gboolean owner_events,
          GdkEventMask event_mask,
          GdkWindow *confine_to,
          GdkCursor *cursor,
          guint32 time_);
GdkGrabStatus gdk_keyboard_grab (GdkWindow *window,
          gboolean owner_events,
          guint32 time_);

gboolean gdk_pointer_grab_info_libgtk_only (GdkDisplay *display,
         GdkWindow **grab_window,
         gboolean *owner_events);
gboolean gdk_keyboard_grab_info_libgtk_only (GdkDisplay *display,
          GdkWindow **grab_window,
          gboolean *owner_events);


void gdk_pointer_ungrab (guint32 time_);
void gdk_keyboard_ungrab (guint32 time_);
gboolean gdk_pointer_is_grabbed (void);

gint gdk_screen_width (void) __attribute__ ((__const__));
gint gdk_screen_height (void) __attribute__ ((__const__));

gint gdk_screen_width_mm (void) __attribute__ ((__const__));
gint gdk_screen_height_mm (void) __attribute__ ((__const__));

void gdk_beep (void);


void gdk_flush (void);


void gdk_set_double_click_time (guint msec);




gboolean gdk_rectangle_intersect (const GdkRectangle *src1,
      const GdkRectangle *src2,
      GdkRectangle *dest);
void gdk_rectangle_union (const GdkRectangle *src1,
      const GdkRectangle *src2,
      GdkRectangle *dest);

GType gdk_rectangle_get_type (void) __attribute__ ((__const__));






gchar *gdk_wcstombs (const GdkWChar *src);
gint gdk_mbstowcs (GdkWChar *dest,
      const gchar *src,
      gint dest_max);




gboolean gdk_event_send_client_message (GdkEvent *event,
          GdkNativeWindow winid);
void gdk_event_send_clientmessage_toall (GdkEvent *event);

gboolean gdk_event_send_client_message_for_display (GdkDisplay *display,
          GdkEvent *event,
          GdkNativeWindow winid);

void gdk_notify_startup_complete (void);

void gdk_notify_startup_complete_with_id (const gchar* startup_id);





extern GMutex *gdk_threads_mutex;


extern GCallback gdk_threads_lock;
extern GCallback gdk_threads_unlock;

void gdk_threads_enter (void);
void gdk_threads_leave (void);
void gdk_threads_init (void);
void gdk_threads_set_lock_functions (GCallback enter_fn,
            GCallback leave_fn);

guint gdk_threads_add_idle_full (gint priority,
                                 GSourceFunc function,
                                 gpointer data,
                                 GDestroyNotify notify);
guint gdk_threads_add_idle (GSourceFunc function,
                                 gpointer data);
guint gdk_threads_add_timeout_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
guint gdk_threads_add_timeout (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
guint gdk_threads_add_timeout_seconds_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
guint gdk_threads_add_timeout_seconds (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
# 238 "/usr/include/gtk-2.0/gdk/gdk.h"

# 24 "../lib/color.h" 2
# 1 "../lib/diavar.h" 1
# 25 "../lib/color.h" 2





struct _Color {
  float red;
  float green;
  float blue;
  float alpha;
};

void color_init(void);
Color *color_new_rgb(float r, float g, float b);
Color *color_new_rgba(float r, float g, float b, float alpha);
void color_convert(const Color *color, GdkColor *gdkcolor);
gboolean color_equals(const Color *color1, const Color *color2);





extern Color color_black;
extern Color color_white;
# 27 "../lib/diagramdata.h" 2
# 1 "../lib/geometry.h" 1
# 28 "../lib/diagramdata.h" 2
# 1 "../lib/paper.h" 1
# 23 "../lib/paper.h"
# 1 "../lib/diatypes.h" 1
# 24 "../lib/paper.h" 2

struct _PaperInfo {
  gchar *name;
  gfloat tmargin, bmargin, lmargin, rmargin;
  gboolean is_portrait;
  gfloat scaling;
  gboolean fitto;
  gint fitwidth, fitheight;

  gfloat width, height;


};

int find_paper(const gchar* name);
int get_default_paper(void);
void get_paper_info(PaperInfo *paper, int i, NewDiagramData *data);

GList *get_paper_name_list(void);
const gchar *get_paper_name(int i);
gdouble get_paper_psheight(int i);
gdouble get_paper_pswidth(int i);
gdouble get_paper_lmargin(int i);
gdouble get_paper_rmargin(int i);
gdouble get_paper_bmargin(int i);
gdouble get_paper_tmargin(int i);
# 29 "../lib/diagramdata.h" 2






struct _NewDiagramData {
  gchar *papertype;
  gfloat tmargin, bmargin, lmargin, rmargin;
  gboolean is_portrait;
  gfloat scaling;
  gboolean fitto;
  gint fitwidth, fitheight;
  Color bg_color, pagebreak_color, grid_color;
  int compress_save;
  gchar *unit, *font_unit;
};

GType diagram_data_get_type (void) __attribute__ ((__const__));
# 63 "../lib/diagramdata.h"
struct _DiagramData {
  GObject parent_instance;

  Rectangle extents;

  Color bg_color;

  PaperInfo paper;
  gboolean is_compressed;


  GPtrArray *layers;
  Layer *active_layer;

  guint selected_count_private;
  GList *selected;




  GList *text_edits;

  gchar *unit, *font_unit;


  Focus *active_text_edit;

  GList *highlighted;

};


typedef struct _DiagramDataClass {
  GObjectClass parent_class;


  void (* object_add) (DiagramData*, Layer*, DiaObject*);
  void (* object_remove) (DiagramData*, Layer*, DiaObject*);
  void (* selection_changed) (DiagramData*, int);

} DiagramDataClass;







struct _Layer {
  char *name;
  Rectangle extents;

  GList *objects;




  gboolean visible;
  gboolean connectable;


  DiagramData *parent_diagram;



};

typedef enum {
  DIA_HIGHLIGHT_NONE,
  DIA_HIGHLIGHT_CONNECTIONPOINT,
  DIA_HIGHLIGHT_CONNECTIONPOINT_MAIN,
  DIA_HIGHLIGHT_TEXT_EDIT
} DiaHighlightType;

Layer *new_layer (char *name, DiagramData *parent);
void layer_destroy(Layer *layer);

void data_raise_layer(DiagramData *data, Layer *layer);
void data_lower_layer(DiagramData *data, Layer *layer);

void data_add_layer(DiagramData *data, Layer *layer);
void data_add_layer_at(DiagramData *data, Layer *layer, int pos);
void data_set_active_layer(DiagramData *data, Layer *layer);
void data_remove_layer(DiagramData *data, Layer *layer);
int data_layer_get_index (const DiagramData *data, const Layer *layer);
int data_layer_count(const DiagramData *data);
Layer *data_layer_get_nth (const DiagramData *data, guint index);

void data_highlight_add(DiagramData *data, DiaObject *obj, DiaHighlightType type);
void data_highlight_remove(DiagramData *data, DiaObject *obj);
DiaHighlightType data_object_get_highlight(DiagramData *data, DiaObject *obj);

void data_select(DiagramData *data, DiaObject *obj);
void data_unselect(DiagramData *data, DiaObject *obj);
void data_remove_all_selected(DiagramData *data);
gboolean data_update_extents(DiagramData *data);
GList *data_get_sorted_selected(DiagramData *data);
GList *data_get_sorted_selected_remove(DiagramData *data);
void data_emit(DiagramData *data,Layer *layer,DiaObject* obj,const char *signal_name);

void data_foreach_object (DiagramData *data, GFunc func, gpointer user_data);


typedef void (*ObjectRenderer)(DiaObject *obj, DiaRenderer *renderer,
          int active_layer,
          gpointer data);
void data_render(DiagramData *data, DiaRenderer *renderer, Rectangle *update,
   ObjectRenderer obj_renderer ,
   gpointer gdata);
void data_render_paginated(DiagramData *data, DiaRenderer *renderer, gpointer user_data);

void layer_render(Layer *layer, DiaRenderer *renderer, Rectangle *update,
    ObjectRenderer obj_renderer ,
    gpointer data,
    int active_layer);

DiagramData *diagram_data_clone (DiagramData *data);
DiagramData *diagram_data_clone_selected (DiagramData *data);

int layer_object_get_index(Layer *layer, DiaObject *obj);
DiaObject *layer_object_get_nth(Layer *layer, guint index);
int layer_object_count(Layer *layer);
gchar *layer_get_name(Layer *layer);
void layer_add_object(Layer *layer, DiaObject *obj);
void layer_add_object_at(Layer *layer, DiaObject *obj, int pos);
void layer_add_objects(Layer *layer, GList *obj_list);
void layer_add_objects_first(Layer *layer, GList *obj_list);
void layer_remove_object(Layer *layer, DiaObject *obj);
void layer_remove_objects(Layer *layer, GList *obj_list);
GList *layer_find_objects_intersecting_rectangle(Layer *layer, Rectangle*rect);
GList *layer_find_objects_in_rectangle(Layer *layer, Rectangle *rect);
GList *layer_find_objects_containing_rectangle(Layer *layer, Rectangle *rect);
DiaObject *layer_find_closest_object(Layer *layer, Point *pos, real maxdist);
DiaObject *layer_find_closest_object_except(Layer *layer, Point *pos,
      real maxdist, GList *avoid);
real layer_find_closest_connectionpoint(Layer *layer,
     ConnectionPoint **closest,
     Point *pos,
     DiaObject *notthis);
int layer_update_extents(Layer *layer);
void layer_replace_object_with_list(Layer *layer, DiaObject *obj,
        GList *list);
void layer_set_object_list(Layer *layer, GList *list);
DiagramData *layer_get_parent_diagram(Layer *layer);


# 27 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h" 2
# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/undo.h" 1
# 22 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/undo.h"
typedef struct _UndoStack UndoStack;
typedef struct _Change Change;

# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h" 1
# 26 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/undo.h" 2

typedef void (*UndoApplyFunc)(Change *change, Diagram *dia);
typedef void (*UndoRevertFunc)(Change *change, Diagram *dia);
typedef void (*UndoFreeFunc)(Change *change);

struct _Change {


  UndoApplyFunc apply;
  UndoRevertFunc revert;
  UndoFreeFunc free;
  Change *prev, *next;
};

struct _UndoStack {
  Diagram *dia;
  Change *last_change;
  Change *current_change;
  Change *last_save;
  int depth;
};

UndoStack *new_undo_stack(Diagram *dia);
void undo_destroy(UndoStack *stack);
void undo_push_change(UndoStack *stack, Change *change);
void undo_set_transactionpoint(UndoStack *stack);
void undo_revert_to_last_tp(UndoStack *stack);
void undo_apply_to_next_tp(UndoStack *stack);
void undo_clear(UndoStack *stack);
void undo_mark_save(UndoStack *stack);
gboolean undo_is_saved(UndoStack *stack);
gboolean undo_available(UndoStack *stack, gboolean undo);
Change* undo_remove_to(UndoStack *stack, UndoApplyFunc *type);



Change *undo_move_objects(Diagram *dia, Point *orig_pos,
     Point *dest_pos, GList *obj_list);
Change *undo_move_handle(Diagram *dia,
    Handle *handle, DiaObject *obj,
    Point orig_pos, Point dest_pos,
    int modifiers);
Change *undo_connect(Diagram *dia, DiaObject *obj, Handle *handle,
       ConnectionPoint *connectionpoint);
Change *undo_unconnect(Diagram *dia, DiaObject *obj, Handle *handle);
Change *undo_delete_objects_children(Diagram *dia, GList *obj_list);
Change *undo_delete_objects(Diagram *dia, GList *obj_list);
Change *undo_insert_objects(Diagram *dia, GList *obj_list,
       int applied);
Change *undo_reorder_objects(Diagram *dia, GList *changed_list,
        GList *orig_list);
Change *undo_object_change(Diagram *dia, DiaObject *obj,
      ObjectChange *obj_change);
Change *undo_group_objects(Diagram *dia, GList *obj_list,
      DiaObject *group, GList *orig_list);
Change *undo_ungroup_objects(Diagram *dia, GList *obj_list,
        DiaObject *group, int group_index);
Change *undo_parenting(Diagram *dia, DiaObject *parentobj, DiaObject *childobj,
         gboolean parent);
Change *undo_move_object_other_layer(Diagram *diagram, GList *selected_list,
         gboolean moving_up);


Change *undo_import_change_setup (Diagram *diagram);

gboolean undo_import_change_done (Diagram *dia, Change *chg);


Change *undo_change_memswap (Diagram *dia, gpointer dest, gsize size);
# 28 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h" 2
# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagrid.h" 1



typedef struct _DiaGrid DiaGrid;

struct _DiaGrid {

  real width_x, width_y, width_w;

  guint visible_x, visible_y;




  guint major_lines;



  gboolean dynamic;


  Color colour;

  gboolean hex;

  real hex_size;
};
# 29 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/diagram.h" 2



GType diagram_get_type (void) __attribute__ ((__const__));







struct _Diagram {
  DiagramData parent_instance;

  char *filename;
  int unsaved;
  gboolean is_default;
  int mollified;
  gboolean autosaved;
  char *autosavefilename;


  Color pagebreak_color;
  DiaGrid grid;


  struct {

    real *hguides, *vguides;
    guint nhguides, nvguides;
  } guides;

  DiagramData *data;

  GSList *displays;

  UndoStack *undo;
};

typedef struct _DiagramClass {
  DiagramDataClass parent_class;


  void (* removed) (Diagram*);

} DiagramClass;

GList *dia_open_diagrams(void);

Diagram *diagram_load(const char *filename, DiaImportFilter *ifilter);
int diagram_load_into (Diagram *dest, const char *filename, DiaImportFilter *ifilter);
Diagram *new_diagram(const char *filename);
void diagram_destroy(Diagram *dia);
gboolean diagram_is_modified(Diagram *dia);
void diagram_modified(Diagram *dia);
void diagram_set_modified(Diagram *dia, int modified);
void diagram_add_object(Diagram *dia, DiaObject *obj);
void diagram_add_object_list(Diagram *dia, GList *list);
void diagram_selected_break_external(Diagram *dia);
void diagram_remove_all_selected(Diagram *diagram, int delete_empty);
void diagram_unselect_object(Diagram *dia, DiaObject *obj);
void diagram_unselect_objects(Diagram *dia, GList *obj_list);
void diagram_select(Diagram *diagram, DiaObject *obj);
void diagram_select_list(Diagram *diagram, GList *list);
int diagram_is_selected(Diagram *diagram, DiaObject *obj);
GList *diagram_get_sorted_selected(Diagram *dia);

GList *diagram_get_sorted_selected_remove(Diagram *dia);
void diagram_add_update(Diagram *dia, const Rectangle *update);
void diagram_add_update_with_border(Diagram *dia, const Rectangle *update,
        int pixel_border);
void diagram_add_update_all(Diagram *dia);
void diagram_add_update_pixels(Diagram *dia, Point *point,
          int pixel_width, int pixel_height);
void diagram_flush(Diagram *dia);
DiaObject *diagram_find_clicked_object(Diagram *dia,
        Point *pos,
        real maxdist);
DiaObject *diagram_find_clicked_object_except(Diagram *dia,
        Point *pos,
        real maxdist,
        GList *avoid);
real diagram_find_closest_handle(Diagram *dia, Handle **handle,
     DiaObject **obj, Point *pos);
real diagram_find_closest_connectionpoint(Diagram *dia,
       ConnectionPoint **cp,
       Point *pos,
       DiaObject *notthis);
void diagram_update_extents(Diagram *dia);

void diagram_update_menu_sensitivity (Diagram *dia);

void diagram_place_under_selected(Diagram *dia);
void diagram_place_over_selected(Diagram *dia);
void diagram_place_down_selected(Diagram *dia);
void diagram_place_up_selected(Diagram *dia);
void diagram_group_selected(Diagram *dia);
void diagram_ungroup_selected(Diagram *dia);
void diagram_parent_selected(Diagram *dia);
void diagram_unparent_selected(Diagram *dia);
void diagram_unparent_children_selected(Diagram *dia);

gboolean object_within_parent(DiaObject *obj, DiaObject *parent);
void diagram_set_filename(Diagram *dia, const char *filename);
gchar *diagram_get_name(Diagram *dia);

int diagram_modified_exists(void);

void diagram_redraw_all(void);

void diagram_object_modified(Diagram *dia, DiaObject *object);


# 35 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c" 2
# 1 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/load_save.h" 1
# 22 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/load_save.h"
# 1 "../lib/filter.h" 1
# 26 "../lib/filter.h"
# 1 "../lib/diagramdata.h" 1
# 27 "../lib/filter.h" 2
# 1 "../lib/diacontext.h" 1








DiaContext *dia_context_new (const char *desc);
void dia_context_reset (DiaContext *context);
void dia_context_release (DiaContext *context);

void dia_context_set_filename (DiaContext *context, const char *filename);
void dia_context_add_message (DiaContext *context, const char *fomat, ...) __attribute__((__format__ (gnu_printf, 2, 3)));
void dia_context_add_message_with_errno (DiaContext *context, int nr, const char *fomat, ...) __attribute__((__format__ (gnu_printf, 3, 4)));

const char *dia_context_get_filename (DiaContext *context);


# 28 "../lib/filter.h" 2



enum FilterFlags {
  FILTER_DONT_GUESS = (1<<0)
};

typedef gboolean (* DiaExportFunc) (DiagramData *dia, DiaContext *ctx,
        const gchar *filename, const char *diagram_filename,
        void* user_data);

struct _DiaExportFilter {
  const gchar *description;


  const gchar **extensions;
  DiaExportFunc export_func;
  void* user_data;





  const gchar *unique_name;

  guint hints;

  GType renderer_type;
};


typedef gboolean (* DiaImportFunc) (const gchar* filename, DiagramData *dia,
                                    DiaContext *ctx, void* user_data);

typedef gboolean (* DiaImportMemFunc) (const guchar *p, guint size, DiagramData *dia,
           DiaContext *ctx, void *user_data);

struct _DiaImportFilter {
  const gchar *description;


  const gchar **extensions;
  DiaImportFunc import_func;
  void* user_data;





  const gchar *unique_name;

  guint hints;

  DiaImportMemFunc import_mem_func;
};


typedef ObjectChange * (* DiaCallbackFunc) (DiagramData *dia,
         const gchar *filename,
         guint flags,
         void* user_data);

struct _DiaCallbackFilter {
  const gchar *action;
  const gchar *description;
  const gchar *menupath;
  DiaCallbackFunc callback;
  void* user_data;
};



void filter_register_export(DiaExportFilter *efilter);

void filter_unregister_export(DiaExportFilter *efilter);


GList *filter_get_export_filters(void);


gchar *filter_get_export_filter_label(DiaExportFilter *efilter);


DiaExportFilter *filter_guess_export_filter(const gchar *filename);

DiaExportFilter *filter_export_get_by_name(const gchar *name);

GList *filter_get_unique_export_names(const char *extension);

void filter_set_favored_export(const char *extension, const char *name);

void filter_register_import(DiaImportFilter *ifilter);
void filter_unregister_import(DiaImportFilter *ifilter);
GList *filter_get_import_filters(void);
gchar *filter_get_import_filter_label(DiaImportFilter *ifilter);
DiaImportFilter *filter_guess_import_filter(const gchar *filename);

DiaImportFilter *filter_import_get_by_name(const gchar *name);

void filter_register_callback(DiaCallbackFilter *cbfilter);
void filter_unregister_callback(DiaCallbackFilter *cbfilter);

GList *filter_get_callbacks(void);


# 23 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/load_save.h" 2

int diagram_save(Diagram *dia, const char *filename, DiaContext *ctx);
void diagram_autosave(Diagram *dia);
void diagram_cleanup_autosave(Diagram *dia);

extern DiaExportFilter dia_export_filter;
extern DiaImportFilter dia_import_filter;
# 36 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c" 2

static void
autosave_save_diagram(gpointer data)
{
  Diagram *dia = (Diagram *)data;

  g_idle_remove_by_data(data);

  diagram_autosave(dia);
}






gboolean
autosave_check_autosave(gpointer data)
{
  GList *diagrams = dia_open_diagrams();
  Diagram *diagram;

  while (diagrams != 
# 58 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c" 3 4
                    ((void *)0)
# 58 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c"
                        ) {
    diagram = (Diagram *)diagrams->data;
    if (diagram_is_modified(diagram) &&
 !diagram->autosaved) {

      g_idle_add ((GSourceFunc)autosave_save_diagram, diagram);
    }
    diagrams = ((diagrams) ? (((GList *)(diagrams))->next) : 
# 65 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c" 3 4
              ((void *)0)
# 65 "/root/oss-experiment/data/dia-0.97.3+git20160930/app/autosave.c"
              );
  }
  return (!(0));
}
