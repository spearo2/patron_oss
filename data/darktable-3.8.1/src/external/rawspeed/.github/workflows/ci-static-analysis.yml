name: CI - Static Analysis

on:
  push:
    branches: [ stable ]
  pull_request:
    branches: [ stable ]

jobs:
  linux:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        compiler:
          - { compiler: LLVM13, CC: clang-13, CXX: clang++-13, CLANG_TIDY: clang-tidy-13 }
        flavor: [ ClangStaticAnalysis, CodeQLAnalysis ]
    container: debian:unstable-slim
    steps:
      - name: Configure APT
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # Paper over occasional network flakiness of some mirrors.
          echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80retry
          # Do not install recommended packages
          echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends
          # Do not install suggested packages
          echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests
          # Assume yes
          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes
          # Fix broken packages
          echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing
      - name: Install/Update necessary packages
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get upgrade;
          apt-get install ca-certificates \
                          clang++-13 \
                          clang-tidy-13 \
                          clang-tools-13 \
                          cmake \
                          git \
                          googletest \
                          libjpeg-dev \
                          libomp-13-dev \
                          libpugixml-dev \
                          libxml2-utils \
                          make \
                          ninja-build \
                          zlib1g-dev;
          apt-get clean;
          dpkg-divert --add --rename --divert /usr/bin/ld.original /usr/bin/ld;
          ln -s /usr/bin/ld.gold /usr/bin/ld;
          ln -s /usr/bin/clang-13 /usr/local/bin/clang;
          ln -s /usr/bin/clang++-13 /usr/local/bin/clang++;
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
        with:
          path: ''
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Fetch/Checkout CodeChecker git repo (for clang static analysis)
        uses: actions/checkout@v2
        with:
          repository: 'Ericsson/codechecker'
          path: 'codechecker'
          fetch-depth: '1'
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Move CodeChecker git repo into right place (for clang static analysis)
        run: |
          mv codechecker ..
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Install CodeChecker (for clang static analysis)
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get install curl \
                          libxml2-dev \
                          libxslt1-dev \
                          python-pip-whl \
                          python3-dev \
                          python3-lxml \
                          python3-portalocker \
                          python3-psutil \
                          python3-venv \
                          python3-virtualenv \
                          python3-wheel \
                          python3-yaml;
          apt-get clean;
          cd ../codechecker
          make venv
          . $PWD/venv/bin/activate
          BUILD_LOGGER_64_BIT_ONLY=YES BUILD_UI_DIST=NO make package
          export PATH="$PWD/build/CodeChecker/bin:$PATH"
      - if: matrix.flavor == 'CodeQLAnalysis'
        name: Initialize CodeQL (for CodeQL static analysis)
        uses: github/codeql-action/init@v1
        with:
          languages: cpp
      - if: matrix.flavor == 'SonarCloudStaticAnalysis'
        name: Set up JDK 11 (for SonarCloud static analysis)
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - if: matrix.flavor == 'SonarCloudStaticAnalysis'
        name: Download and set up sonar-scanner (for SonarCloud static analysis)
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get install curl unzip;
          apt-get clean;
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          CLANG_TIDY: ${{ matrix.compiler.CLANG_TIDY }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          export ECO="${ECO} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DUSE_CLANG_TIDY=ON -DCMAKE_C_FLAGS_RELWITHDEBINFO=-UNDEBUG -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=-UNDEBUG";
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          "${SRC_DIR}/.ci/ci-script.sh";
      - if: matrix.flavor == 'ClangStaticAnalysis'
        name: Perform clang static analysis
        env:
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
        run: |
          . "$PWD/../codechecker/venv/bin/activate"
          export PATH="$PWD/../codechecker/build/CodeChecker/bin:$PATH"
          CodeChecker check --logfile "${BUILD_DIR}/compile_commands.json" --analyzers clangsa --jobs "$(nproc --all)" --file "${SRC_DIR}/*" --disable deadcode.DeadStores
      - if: matrix.flavor == 'CodeQLAnalysis'
        name: Perform CodeQL static analysis
        uses: github/codeql-action/analyze@v1
      - if: matrix.flavor == 'SonarCloudStaticAnalysis'
        name: Perform SonarCloud static analysis
        env:
          SONAR_SERVER_URL: "https://sonarcloud.io"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
        run: |
          sonar-scanner --define project.settings="${SRC_DIR}/.ci/sonar-project.properties" --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.projectKey="${{ env.SONAR_PROJECT_KEY }}" --define sonar.organization="${{ env.SONAR_ORGANIZATION }}" --define sonar.cfamily.compile-commands="${BUILD_DIR}/compile_commands.json" --define sonar.cfamily.threads="$(nproc --all)" --define sonar.cfamily.cache.enabled=false
